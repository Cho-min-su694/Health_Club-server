
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Notice
 * 
 */
export type Notice = $Result.DefaultSelection<Prisma.$NoticePayload>
/**
 * Model Board
 * 
 */
export type Board = $Result.DefaultSelection<Prisma.$BoardPayload>
/**
 * Model BoardImage
 * 
 */
export type BoardImage = $Result.DefaultSelection<Prisma.$BoardImagePayload>
/**
 * Model BoardReply
 * 
 */
export type BoardReply = $Result.DefaultSelection<Prisma.$BoardReplyPayload>
/**
 * Model BodyPart
 * 
 */
export type BodyPart = $Result.DefaultSelection<Prisma.$BodyPartPayload>
/**
 * Model GymEquipment
 * 
 */
export type GymEquipment = $Result.DefaultSelection<Prisma.$GymEquipmentPayload>
/**
 * Model GymEquipmentImage
 * 
 */
export type GymEquipmentImage = $Result.DefaultSelection<Prisma.$GymEquipmentImagePayload>
/**
 * Model BodyPartsOnGymEquipments
 * 
 */
export type BodyPartsOnGymEquipments = $Result.DefaultSelection<Prisma.$BodyPartsOnGymEquipmentsPayload>
/**
 * Model Gym
 * 
 */
export type Gym = $Result.DefaultSelection<Prisma.$GymPayload>
/**
 * Model GymEuquipmentsOnGyms
 * 
 */
export type GymEuquipmentsOnGyms = $Result.DefaultSelection<Prisma.$GymEuquipmentsOnGymsPayload>
/**
 * Model GymEquipmentUserHistory
 * 
 */
export type GymEquipmentUserHistory = $Result.DefaultSelection<Prisma.$GymEquipmentUserHistoryPayload>
/**
 * Model GymMembership
 * 
 */
export type GymMembership = $Result.DefaultSelection<Prisma.$GymMembershipPayload>
/**
 * Model GymMembershipCancellation
 * 
 */
export type GymMembershipCancellation = $Result.DefaultSelection<Prisma.$GymMembershipCancellationPayload>
/**
 * Model FavoriteGym
 * 
 */
export type FavoriteGym = $Result.DefaultSelection<Prisma.$FavoriteGymPayload>
/**
 * Model GymAccessHistory
 * 
 */
export type GymAccessHistory = $Result.DefaultSelection<Prisma.$GymAccessHistoryPayload>
/**
 * Model GymPassHistory
 * 
 */
export type GymPassHistory = $Result.DefaultSelection<Prisma.$GymPassHistoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const LoginType: {
  LOCAL: 'LOCAL',
  ADMIN: 'ADMIN'
};

export type LoginType = (typeof LoginType)[keyof typeof LoginType]


export const UserType: {
  GENERAL: 'GENERAL',
  BUSINESS: 'BUSINESS',
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const BoardType: {
  BTALK: 'BTALK',
  BINFORM: 'BINFORM',
  BQUESTION: 'BQUESTION'
};

export type BoardType = (typeof BoardType)[keyof typeof BoardType]

}

export type LoginType = $Enums.LoginType

export const LoginType: typeof $Enums.LoginType

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

export type BoardType = $Enums.BoardType

export const BoardType: typeof $Enums.BoardType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.notice`: Exposes CRUD operations for the **Notice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notices
    * const notices = await prisma.notice.findMany()
    * ```
    */
  get notice(): Prisma.NoticeDelegate<ExtArgs>;

  /**
   * `prisma.board`: Exposes CRUD operations for the **Board** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boards
    * const boards = await prisma.board.findMany()
    * ```
    */
  get board(): Prisma.BoardDelegate<ExtArgs>;

  /**
   * `prisma.boardImage`: Exposes CRUD operations for the **BoardImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BoardImages
    * const boardImages = await prisma.boardImage.findMany()
    * ```
    */
  get boardImage(): Prisma.BoardImageDelegate<ExtArgs>;

  /**
   * `prisma.boardReply`: Exposes CRUD operations for the **BoardReply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BoardReplies
    * const boardReplies = await prisma.boardReply.findMany()
    * ```
    */
  get boardReply(): Prisma.BoardReplyDelegate<ExtArgs>;

  /**
   * `prisma.bodyPart`: Exposes CRUD operations for the **BodyPart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BodyParts
    * const bodyParts = await prisma.bodyPart.findMany()
    * ```
    */
  get bodyPart(): Prisma.BodyPartDelegate<ExtArgs>;

  /**
   * `prisma.gymEquipment`: Exposes CRUD operations for the **GymEquipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GymEquipments
    * const gymEquipments = await prisma.gymEquipment.findMany()
    * ```
    */
  get gymEquipment(): Prisma.GymEquipmentDelegate<ExtArgs>;

  /**
   * `prisma.gymEquipmentImage`: Exposes CRUD operations for the **GymEquipmentImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GymEquipmentImages
    * const gymEquipmentImages = await prisma.gymEquipmentImage.findMany()
    * ```
    */
  get gymEquipmentImage(): Prisma.GymEquipmentImageDelegate<ExtArgs>;

  /**
   * `prisma.bodyPartsOnGymEquipments`: Exposes CRUD operations for the **BodyPartsOnGymEquipments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BodyPartsOnGymEquipments
    * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.findMany()
    * ```
    */
  get bodyPartsOnGymEquipments(): Prisma.BodyPartsOnGymEquipmentsDelegate<ExtArgs>;

  /**
   * `prisma.gym`: Exposes CRUD operations for the **Gym** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gyms
    * const gyms = await prisma.gym.findMany()
    * ```
    */
  get gym(): Prisma.GymDelegate<ExtArgs>;

  /**
   * `prisma.gymEuquipmentsOnGyms`: Exposes CRUD operations for the **GymEuquipmentsOnGyms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GymEuquipmentsOnGyms
    * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.findMany()
    * ```
    */
  get gymEuquipmentsOnGyms(): Prisma.GymEuquipmentsOnGymsDelegate<ExtArgs>;

  /**
   * `prisma.gymEquipmentUserHistory`: Exposes CRUD operations for the **GymEquipmentUserHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GymEquipmentUserHistories
    * const gymEquipmentUserHistories = await prisma.gymEquipmentUserHistory.findMany()
    * ```
    */
  get gymEquipmentUserHistory(): Prisma.GymEquipmentUserHistoryDelegate<ExtArgs>;

  /**
   * `prisma.gymMembership`: Exposes CRUD operations for the **GymMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GymMemberships
    * const gymMemberships = await prisma.gymMembership.findMany()
    * ```
    */
  get gymMembership(): Prisma.GymMembershipDelegate<ExtArgs>;

  /**
   * `prisma.gymMembershipCancellation`: Exposes CRUD operations for the **GymMembershipCancellation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GymMembershipCancellations
    * const gymMembershipCancellations = await prisma.gymMembershipCancellation.findMany()
    * ```
    */
  get gymMembershipCancellation(): Prisma.GymMembershipCancellationDelegate<ExtArgs>;

  /**
   * `prisma.favoriteGym`: Exposes CRUD operations for the **FavoriteGym** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteGyms
    * const favoriteGyms = await prisma.favoriteGym.findMany()
    * ```
    */
  get favoriteGym(): Prisma.FavoriteGymDelegate<ExtArgs>;

  /**
   * `prisma.gymAccessHistory`: Exposes CRUD operations for the **GymAccessHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GymAccessHistories
    * const gymAccessHistories = await prisma.gymAccessHistory.findMany()
    * ```
    */
  get gymAccessHistory(): Prisma.GymAccessHistoryDelegate<ExtArgs>;

  /**
   * `prisma.gymPassHistory`: Exposes CRUD operations for the **GymPassHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GymPassHistories
    * const gymPassHistories = await prisma.gymPassHistory.findMany()
    * ```
    */
  get gymPassHistory(): Prisma.GymPassHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Notice: 'Notice',
    Board: 'Board',
    BoardImage: 'BoardImage',
    BoardReply: 'BoardReply',
    BodyPart: 'BodyPart',
    GymEquipment: 'GymEquipment',
    GymEquipmentImage: 'GymEquipmentImage',
    BodyPartsOnGymEquipments: 'BodyPartsOnGymEquipments',
    Gym: 'Gym',
    GymEuquipmentsOnGyms: 'GymEuquipmentsOnGyms',
    GymEquipmentUserHistory: 'GymEquipmentUserHistory',
    GymMembership: 'GymMembership',
    GymMembershipCancellation: 'GymMembershipCancellation',
    FavoriteGym: 'FavoriteGym',
    GymAccessHistory: 'GymAccessHistory',
    GymPassHistory: 'GymPassHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'notice' | 'board' | 'boardImage' | 'boardReply' | 'bodyPart' | 'gymEquipment' | 'gymEquipmentImage' | 'bodyPartsOnGymEquipments' | 'gym' | 'gymEuquipmentsOnGyms' | 'gymEquipmentUserHistory' | 'gymMembership' | 'gymMembershipCancellation' | 'favoriteGym' | 'gymAccessHistory' | 'gymPassHistory'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Notice: {
        payload: Prisma.$NoticePayload<ExtArgs>
        fields: Prisma.NoticeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoticeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          findFirst: {
            args: Prisma.NoticeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          findMany: {
            args: Prisma.NoticeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>[]
          }
          create: {
            args: Prisma.NoticeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          createMany: {
            args: Prisma.NoticeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NoticeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          update: {
            args: Prisma.NoticeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          deleteMany: {
            args: Prisma.NoticeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NoticeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NoticeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          aggregate: {
            args: Prisma.NoticeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotice>
          }
          groupBy: {
            args: Prisma.NoticeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NoticeGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticeCountArgs<ExtArgs>,
            result: $Utils.Optional<NoticeCountAggregateOutputType> | number
          }
        }
      }
      Board: {
        payload: Prisma.$BoardPayload<ExtArgs>
        fields: Prisma.BoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          findFirst: {
            args: Prisma.BoardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          findMany: {
            args: Prisma.BoardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>[]
          }
          create: {
            args: Prisma.BoardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          createMany: {
            args: Prisma.BoardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          update: {
            args: Prisma.BoardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          deleteMany: {
            args: Prisma.BoardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          aggregate: {
            args: Prisma.BoardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoard>
          }
          groupBy: {
            args: Prisma.BoardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardCountArgs<ExtArgs>,
            result: $Utils.Optional<BoardCountAggregateOutputType> | number
          }
        }
      }
      BoardImage: {
        payload: Prisma.$BoardImagePayload<ExtArgs>
        fields: Prisma.BoardImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload>
          }
          findFirst: {
            args: Prisma.BoardImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload>
          }
          findMany: {
            args: Prisma.BoardImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload>[]
          }
          create: {
            args: Prisma.BoardImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload>
          }
          createMany: {
            args: Prisma.BoardImageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoardImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload>
          }
          update: {
            args: Prisma.BoardImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload>
          }
          deleteMany: {
            args: Prisma.BoardImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoardImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoardImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardImagePayload>
          }
          aggregate: {
            args: Prisma.BoardImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoardImage>
          }
          groupBy: {
            args: Prisma.BoardImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoardImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardImageCountArgs<ExtArgs>,
            result: $Utils.Optional<BoardImageCountAggregateOutputType> | number
          }
        }
      }
      BoardReply: {
        payload: Prisma.$BoardReplyPayload<ExtArgs>
        fields: Prisma.BoardReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardReplyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardReplyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload>
          }
          findFirst: {
            args: Prisma.BoardReplyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardReplyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload>
          }
          findMany: {
            args: Prisma.BoardReplyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload>[]
          }
          create: {
            args: Prisma.BoardReplyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload>
          }
          createMany: {
            args: Prisma.BoardReplyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoardReplyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload>
          }
          update: {
            args: Prisma.BoardReplyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload>
          }
          deleteMany: {
            args: Prisma.BoardReplyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoardReplyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoardReplyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardReplyPayload>
          }
          aggregate: {
            args: Prisma.BoardReplyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoardReply>
          }
          groupBy: {
            args: Prisma.BoardReplyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoardReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardReplyCountArgs<ExtArgs>,
            result: $Utils.Optional<BoardReplyCountAggregateOutputType> | number
          }
        }
      }
      BodyPart: {
        payload: Prisma.$BodyPartPayload<ExtArgs>
        fields: Prisma.BodyPartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BodyPartFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BodyPartFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload>
          }
          findFirst: {
            args: Prisma.BodyPartFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BodyPartFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload>
          }
          findMany: {
            args: Prisma.BodyPartFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload>[]
          }
          create: {
            args: Prisma.BodyPartCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload>
          }
          createMany: {
            args: Prisma.BodyPartCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BodyPartDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload>
          }
          update: {
            args: Prisma.BodyPartUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload>
          }
          deleteMany: {
            args: Prisma.BodyPartDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BodyPartUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BodyPartUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartPayload>
          }
          aggregate: {
            args: Prisma.BodyPartAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBodyPart>
          }
          groupBy: {
            args: Prisma.BodyPartGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BodyPartGroupByOutputType>[]
          }
          count: {
            args: Prisma.BodyPartCountArgs<ExtArgs>,
            result: $Utils.Optional<BodyPartCountAggregateOutputType> | number
          }
        }
      }
      GymEquipment: {
        payload: Prisma.$GymEquipmentPayload<ExtArgs>
        fields: Prisma.GymEquipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymEquipmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymEquipmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload>
          }
          findFirst: {
            args: Prisma.GymEquipmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymEquipmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload>
          }
          findMany: {
            args: Prisma.GymEquipmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload>[]
          }
          create: {
            args: Prisma.GymEquipmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload>
          }
          createMany: {
            args: Prisma.GymEquipmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymEquipmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload>
          }
          update: {
            args: Prisma.GymEquipmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload>
          }
          deleteMany: {
            args: Prisma.GymEquipmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymEquipmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymEquipmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentPayload>
          }
          aggregate: {
            args: Prisma.GymEquipmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGymEquipment>
          }
          groupBy: {
            args: Prisma.GymEquipmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymEquipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymEquipmentCountArgs<ExtArgs>,
            result: $Utils.Optional<GymEquipmentCountAggregateOutputType> | number
          }
        }
      }
      GymEquipmentImage: {
        payload: Prisma.$GymEquipmentImagePayload<ExtArgs>
        fields: Prisma.GymEquipmentImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymEquipmentImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymEquipmentImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload>
          }
          findFirst: {
            args: Prisma.GymEquipmentImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymEquipmentImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload>
          }
          findMany: {
            args: Prisma.GymEquipmentImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload>[]
          }
          create: {
            args: Prisma.GymEquipmentImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload>
          }
          createMany: {
            args: Prisma.GymEquipmentImageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymEquipmentImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload>
          }
          update: {
            args: Prisma.GymEquipmentImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload>
          }
          deleteMany: {
            args: Prisma.GymEquipmentImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymEquipmentImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymEquipmentImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentImagePayload>
          }
          aggregate: {
            args: Prisma.GymEquipmentImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGymEquipmentImage>
          }
          groupBy: {
            args: Prisma.GymEquipmentImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymEquipmentImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymEquipmentImageCountArgs<ExtArgs>,
            result: $Utils.Optional<GymEquipmentImageCountAggregateOutputType> | number
          }
        }
      }
      BodyPartsOnGymEquipments: {
        payload: Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>
        fields: Prisma.BodyPartsOnGymEquipmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BodyPartsOnGymEquipmentsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BodyPartsOnGymEquipmentsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload>
          }
          findFirst: {
            args: Prisma.BodyPartsOnGymEquipmentsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BodyPartsOnGymEquipmentsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload>
          }
          findMany: {
            args: Prisma.BodyPartsOnGymEquipmentsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload>[]
          }
          create: {
            args: Prisma.BodyPartsOnGymEquipmentsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload>
          }
          createMany: {
            args: Prisma.BodyPartsOnGymEquipmentsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BodyPartsOnGymEquipmentsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload>
          }
          update: {
            args: Prisma.BodyPartsOnGymEquipmentsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload>
          }
          deleteMany: {
            args: Prisma.BodyPartsOnGymEquipmentsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BodyPartsOnGymEquipmentsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BodyPartsOnGymEquipmentsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BodyPartsOnGymEquipmentsPayload>
          }
          aggregate: {
            args: Prisma.BodyPartsOnGymEquipmentsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBodyPartsOnGymEquipments>
          }
          groupBy: {
            args: Prisma.BodyPartsOnGymEquipmentsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BodyPartsOnGymEquipmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BodyPartsOnGymEquipmentsCountArgs<ExtArgs>,
            result: $Utils.Optional<BodyPartsOnGymEquipmentsCountAggregateOutputType> | number
          }
        }
      }
      Gym: {
        payload: Prisma.$GymPayload<ExtArgs>
        fields: Prisma.GymFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          findFirst: {
            args: Prisma.GymFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          findMany: {
            args: Prisma.GymFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload>[]
          }
          create: {
            args: Prisma.GymCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          createMany: {
            args: Prisma.GymCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          update: {
            args: Prisma.GymUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          deleteMany: {
            args: Prisma.GymDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPayload>
          }
          aggregate: {
            args: Prisma.GymAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGym>
          }
          groupBy: {
            args: Prisma.GymGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymCountArgs<ExtArgs>,
            result: $Utils.Optional<GymCountAggregateOutputType> | number
          }
        }
      }
      GymEuquipmentsOnGyms: {
        payload: Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>
        fields: Prisma.GymEuquipmentsOnGymsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymEuquipmentsOnGymsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymEuquipmentsOnGymsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload>
          }
          findFirst: {
            args: Prisma.GymEuquipmentsOnGymsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymEuquipmentsOnGymsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload>
          }
          findMany: {
            args: Prisma.GymEuquipmentsOnGymsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload>[]
          }
          create: {
            args: Prisma.GymEuquipmentsOnGymsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload>
          }
          createMany: {
            args: Prisma.GymEuquipmentsOnGymsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymEuquipmentsOnGymsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload>
          }
          update: {
            args: Prisma.GymEuquipmentsOnGymsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload>
          }
          deleteMany: {
            args: Prisma.GymEuquipmentsOnGymsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymEuquipmentsOnGymsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymEuquipmentsOnGymsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEuquipmentsOnGymsPayload>
          }
          aggregate: {
            args: Prisma.GymEuquipmentsOnGymsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGymEuquipmentsOnGyms>
          }
          groupBy: {
            args: Prisma.GymEuquipmentsOnGymsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymEuquipmentsOnGymsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymEuquipmentsOnGymsCountArgs<ExtArgs>,
            result: $Utils.Optional<GymEuquipmentsOnGymsCountAggregateOutputType> | number
          }
        }
      }
      GymEquipmentUserHistory: {
        payload: Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>
        fields: Prisma.GymEquipmentUserHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymEquipmentUserHistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymEquipmentUserHistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload>
          }
          findFirst: {
            args: Prisma.GymEquipmentUserHistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymEquipmentUserHistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload>
          }
          findMany: {
            args: Prisma.GymEquipmentUserHistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload>[]
          }
          create: {
            args: Prisma.GymEquipmentUserHistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload>
          }
          createMany: {
            args: Prisma.GymEquipmentUserHistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymEquipmentUserHistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload>
          }
          update: {
            args: Prisma.GymEquipmentUserHistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload>
          }
          deleteMany: {
            args: Prisma.GymEquipmentUserHistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymEquipmentUserHistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymEquipmentUserHistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymEquipmentUserHistoryPayload>
          }
          aggregate: {
            args: Prisma.GymEquipmentUserHistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGymEquipmentUserHistory>
          }
          groupBy: {
            args: Prisma.GymEquipmentUserHistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymEquipmentUserHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymEquipmentUserHistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<GymEquipmentUserHistoryCountAggregateOutputType> | number
          }
        }
      }
      GymMembership: {
        payload: Prisma.$GymMembershipPayload<ExtArgs>
        fields: Prisma.GymMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymMembershipFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymMembershipFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload>
          }
          findFirst: {
            args: Prisma.GymMembershipFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymMembershipFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload>
          }
          findMany: {
            args: Prisma.GymMembershipFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload>[]
          }
          create: {
            args: Prisma.GymMembershipCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload>
          }
          createMany: {
            args: Prisma.GymMembershipCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymMembershipDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload>
          }
          update: {
            args: Prisma.GymMembershipUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload>
          }
          deleteMany: {
            args: Prisma.GymMembershipDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymMembershipUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymMembershipUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipPayload>
          }
          aggregate: {
            args: Prisma.GymMembershipAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGymMembership>
          }
          groupBy: {
            args: Prisma.GymMembershipGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymMembershipCountArgs<ExtArgs>,
            result: $Utils.Optional<GymMembershipCountAggregateOutputType> | number
          }
        }
      }
      GymMembershipCancellation: {
        payload: Prisma.$GymMembershipCancellationPayload<ExtArgs>
        fields: Prisma.GymMembershipCancellationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymMembershipCancellationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymMembershipCancellationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload>
          }
          findFirst: {
            args: Prisma.GymMembershipCancellationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymMembershipCancellationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload>
          }
          findMany: {
            args: Prisma.GymMembershipCancellationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload>[]
          }
          create: {
            args: Prisma.GymMembershipCancellationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload>
          }
          createMany: {
            args: Prisma.GymMembershipCancellationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymMembershipCancellationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload>
          }
          update: {
            args: Prisma.GymMembershipCancellationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload>
          }
          deleteMany: {
            args: Prisma.GymMembershipCancellationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymMembershipCancellationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymMembershipCancellationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymMembershipCancellationPayload>
          }
          aggregate: {
            args: Prisma.GymMembershipCancellationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGymMembershipCancellation>
          }
          groupBy: {
            args: Prisma.GymMembershipCancellationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymMembershipCancellationGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymMembershipCancellationCountArgs<ExtArgs>,
            result: $Utils.Optional<GymMembershipCancellationCountAggregateOutputType> | number
          }
        }
      }
      FavoriteGym: {
        payload: Prisma.$FavoriteGymPayload<ExtArgs>
        fields: Prisma.FavoriteGymFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteGymFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteGymFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload>
          }
          findFirst: {
            args: Prisma.FavoriteGymFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteGymFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload>
          }
          findMany: {
            args: Prisma.FavoriteGymFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload>[]
          }
          create: {
            args: Prisma.FavoriteGymCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload>
          }
          createMany: {
            args: Prisma.FavoriteGymCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FavoriteGymDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload>
          }
          update: {
            args: Prisma.FavoriteGymUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload>
          }
          deleteMany: {
            args: Prisma.FavoriteGymDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteGymUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteGymUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoriteGymPayload>
          }
          aggregate: {
            args: Prisma.FavoriteGymAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavoriteGym>
          }
          groupBy: {
            args: Prisma.FavoriteGymGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavoriteGymGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteGymCountArgs<ExtArgs>,
            result: $Utils.Optional<FavoriteGymCountAggregateOutputType> | number
          }
        }
      }
      GymAccessHistory: {
        payload: Prisma.$GymAccessHistoryPayload<ExtArgs>
        fields: Prisma.GymAccessHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymAccessHistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymAccessHistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload>
          }
          findFirst: {
            args: Prisma.GymAccessHistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymAccessHistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload>
          }
          findMany: {
            args: Prisma.GymAccessHistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload>[]
          }
          create: {
            args: Prisma.GymAccessHistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload>
          }
          createMany: {
            args: Prisma.GymAccessHistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymAccessHistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload>
          }
          update: {
            args: Prisma.GymAccessHistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload>
          }
          deleteMany: {
            args: Prisma.GymAccessHistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymAccessHistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymAccessHistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymAccessHistoryPayload>
          }
          aggregate: {
            args: Prisma.GymAccessHistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGymAccessHistory>
          }
          groupBy: {
            args: Prisma.GymAccessHistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymAccessHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymAccessHistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<GymAccessHistoryCountAggregateOutputType> | number
          }
        }
      }
      GymPassHistory: {
        payload: Prisma.$GymPassHistoryPayload<ExtArgs>
        fields: Prisma.GymPassHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GymPassHistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GymPassHistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload>
          }
          findFirst: {
            args: Prisma.GymPassHistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GymPassHistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload>
          }
          findMany: {
            args: Prisma.GymPassHistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload>[]
          }
          create: {
            args: Prisma.GymPassHistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload>
          }
          createMany: {
            args: Prisma.GymPassHistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GymPassHistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload>
          }
          update: {
            args: Prisma.GymPassHistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload>
          }
          deleteMany: {
            args: Prisma.GymPassHistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GymPassHistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GymPassHistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GymPassHistoryPayload>
          }
          aggregate: {
            args: Prisma.GymPassHistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGymPassHistory>
          }
          groupBy: {
            args: Prisma.GymPassHistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GymPassHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GymPassHistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<GymPassHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Board: number
    BoardReply: number
    Notice: number
    Gym: number
    assignedGymEquipments: number
    GymMembership: number
    assignedGymMemberships: number
    FavoriteGyms: number
    GymEquipmentUserHistory: number
    GymAccessHistory: number
    GymPassHistory: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Board?: boolean | UserCountOutputTypeCountBoardArgs
    BoardReply?: boolean | UserCountOutputTypeCountBoardReplyArgs
    Notice?: boolean | UserCountOutputTypeCountNoticeArgs
    Gym?: boolean | UserCountOutputTypeCountGymArgs
    assignedGymEquipments?: boolean | UserCountOutputTypeCountAssignedGymEquipmentsArgs
    GymMembership?: boolean | UserCountOutputTypeCountGymMembershipArgs
    assignedGymMemberships?: boolean | UserCountOutputTypeCountAssignedGymMembershipsArgs
    FavoriteGyms?: boolean | UserCountOutputTypeCountFavoriteGymsArgs
    GymEquipmentUserHistory?: boolean | UserCountOutputTypeCountGymEquipmentUserHistoryArgs
    GymAccessHistory?: boolean | UserCountOutputTypeCountGymAccessHistoryArgs
    GymPassHistory?: boolean | UserCountOutputTypeCountGymPassHistoryArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoardReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardReplyWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNoticeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGymArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedGymEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEuquipmentsOnGymsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGymMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymMembershipWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedGymMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymMembershipWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteGymsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteGymWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGymEquipmentUserHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEquipmentUserHistoryWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGymAccessHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymAccessHistoryWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGymPassHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymPassHistoryWhereInput
  }



  /**
   * Count Type BoardCountOutputType
   */

  export type BoardCountOutputType = {
    BoardImage: number
    BoardReply: number
  }

  export type BoardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardImage?: boolean | BoardCountOutputTypeCountBoardImageArgs
    BoardReply?: boolean | BoardCountOutputTypeCountBoardReplyArgs
  }

  // Custom InputTypes

  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardCountOutputType
     */
    select?: BoardCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeCountBoardImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardImageWhereInput
  }


  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeCountBoardReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardReplyWhereInput
  }



  /**
   * Count Type BoardReplyCountOutputType
   */

  export type BoardReplyCountOutputType = {
    BoardNestedReply: number
  }

  export type BoardReplyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardNestedReply?: boolean | BoardReplyCountOutputTypeCountBoardNestedReplyArgs
  }

  // Custom InputTypes

  /**
   * BoardReplyCountOutputType without action
   */
  export type BoardReplyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReplyCountOutputType
     */
    select?: BoardReplyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BoardReplyCountOutputType without action
   */
  export type BoardReplyCountOutputTypeCountBoardNestedReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardReplyWhereInput
  }



  /**
   * Count Type BodyPartCountOutputType
   */

  export type BodyPartCountOutputType = {
    GymEquipments: number
  }

  export type BodyPartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymEquipments?: boolean | BodyPartCountOutputTypeCountGymEquipmentsArgs
  }

  // Custom InputTypes

  /**
   * BodyPartCountOutputType without action
   */
  export type BodyPartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartCountOutputType
     */
    select?: BodyPartCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BodyPartCountOutputType without action
   */
  export type BodyPartCountOutputTypeCountGymEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BodyPartsOnGymEquipmentsWhereInput
  }



  /**
   * Count Type GymEquipmentCountOutputType
   */

  export type GymEquipmentCountOutputType = {
    BodyParts: number
    Gyms: number
    GymEquipmentImage: number
  }

  export type GymEquipmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BodyParts?: boolean | GymEquipmentCountOutputTypeCountBodyPartsArgs
    Gyms?: boolean | GymEquipmentCountOutputTypeCountGymsArgs
    GymEquipmentImage?: boolean | GymEquipmentCountOutputTypeCountGymEquipmentImageArgs
  }

  // Custom InputTypes

  /**
   * GymEquipmentCountOutputType without action
   */
  export type GymEquipmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentCountOutputType
     */
    select?: GymEquipmentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GymEquipmentCountOutputType without action
   */
  export type GymEquipmentCountOutputTypeCountBodyPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BodyPartsOnGymEquipmentsWhereInput
  }


  /**
   * GymEquipmentCountOutputType without action
   */
  export type GymEquipmentCountOutputTypeCountGymsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEuquipmentsOnGymsWhereInput
  }


  /**
   * GymEquipmentCountOutputType without action
   */
  export type GymEquipmentCountOutputTypeCountGymEquipmentImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEquipmentImageWhereInput
  }



  /**
   * Count Type GymCountOutputType
   */

  export type GymCountOutputType = {
    GymEquipments: number
    FavoriteUsers: number
    GymAccessHistory: number
    GymMembership: number
    GymPassHistory: number
  }

  export type GymCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymEquipments?: boolean | GymCountOutputTypeCountGymEquipmentsArgs
    FavoriteUsers?: boolean | GymCountOutputTypeCountFavoriteUsersArgs
    GymAccessHistory?: boolean | GymCountOutputTypeCountGymAccessHistoryArgs
    GymMembership?: boolean | GymCountOutputTypeCountGymMembershipArgs
    GymPassHistory?: boolean | GymCountOutputTypeCountGymPassHistoryArgs
  }

  // Custom InputTypes

  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymCountOutputType
     */
    select?: GymCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeCountGymEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEuquipmentsOnGymsWhereInput
  }


  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeCountFavoriteUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteGymWhereInput
  }


  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeCountGymAccessHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymAccessHistoryWhereInput
  }


  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeCountGymMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymMembershipWhereInput
  }


  /**
   * GymCountOutputType without action
   */
  export type GymCountOutputTypeCountGymPassHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymPassHistoryWhereInput
  }



  /**
   * Count Type GymEuquipmentsOnGymsCountOutputType
   */

  export type GymEuquipmentsOnGymsCountOutputType = {
    GymEquipmentUserHistory: number
  }

  export type GymEuquipmentsOnGymsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymEquipmentUserHistory?: boolean | GymEuquipmentsOnGymsCountOutputTypeCountGymEquipmentUserHistoryArgs
  }

  // Custom InputTypes

  /**
   * GymEuquipmentsOnGymsCountOutputType without action
   */
  export type GymEuquipmentsOnGymsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGymsCountOutputType
     */
    select?: GymEuquipmentsOnGymsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GymEuquipmentsOnGymsCountOutputType without action
   */
  export type GymEuquipmentsOnGymsCountOutputTypeCountGymEquipmentUserHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEquipmentUserHistoryWhereInput
  }



  /**
   * Count Type GymMembershipCancellationCountOutputType
   */

  export type GymMembershipCancellationCountOutputType = {
    GymMembership: number
  }

  export type GymMembershipCancellationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymMembership?: boolean | GymMembershipCancellationCountOutputTypeCountGymMembershipArgs
  }

  // Custom InputTypes

  /**
   * GymMembershipCancellationCountOutputType without action
   */
  export type GymMembershipCancellationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellationCountOutputType
     */
    select?: GymMembershipCancellationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GymMembershipCancellationCountOutputType without action
   */
  export type GymMembershipCancellationCountOutputTypeCountGymMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymMembershipWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    loginId: string | null
    loginPw: string | null
    username: string | null
    loginType: $Enums.LoginType | null
    userType: $Enums.UserType | null
    nickname: string | null
    phone: string | null
    isDisable: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    loginId: string | null
    loginPw: string | null
    username: string | null
    loginType: $Enums.LoginType | null
    userType: $Enums.UserType | null
    nickname: string | null
    phone: string | null
    isDisable: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    loginId: number
    loginPw: number
    username: number
    loginType: number
    userType: number
    nickname: number
    phone: number
    isDisable: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    loginId?: true
    loginPw?: true
    username?: true
    loginType?: true
    userType?: true
    nickname?: true
    phone?: true
    isDisable?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    loginId?: true
    loginPw?: true
    username?: true
    loginType?: true
    userType?: true
    nickname?: true
    phone?: true
    isDisable?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    loginId?: true
    loginPw?: true
    username?: true
    loginType?: true
    userType?: true
    nickname?: true
    phone?: true
    isDisable?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    loginId: string
    loginPw: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone: string
    isDisable: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    loginId?: boolean
    loginPw?: boolean
    username?: boolean
    loginType?: boolean
    userType?: boolean
    nickname?: boolean
    phone?: boolean
    isDisable?: boolean
    Board?: boolean | User$BoardArgs<ExtArgs>
    BoardReply?: boolean | User$BoardReplyArgs<ExtArgs>
    Notice?: boolean | User$NoticeArgs<ExtArgs>
    Gym?: boolean | User$GymArgs<ExtArgs>
    assignedGymEquipments?: boolean | User$assignedGymEquipmentsArgs<ExtArgs>
    GymMembership?: boolean | User$GymMembershipArgs<ExtArgs>
    assignedGymMemberships?: boolean | User$assignedGymMembershipsArgs<ExtArgs>
    FavoriteGyms?: boolean | User$FavoriteGymsArgs<ExtArgs>
    GymEquipmentUserHistory?: boolean | User$GymEquipmentUserHistoryArgs<ExtArgs>
    GymAccessHistory?: boolean | User$GymAccessHistoryArgs<ExtArgs>
    GymPassHistory?: boolean | User$GymPassHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    loginId?: boolean
    loginPw?: boolean
    username?: boolean
    loginType?: boolean
    userType?: boolean
    nickname?: boolean
    phone?: boolean
    isDisable?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Board?: boolean | User$BoardArgs<ExtArgs>
    BoardReply?: boolean | User$BoardReplyArgs<ExtArgs>
    Notice?: boolean | User$NoticeArgs<ExtArgs>
    Gym?: boolean | User$GymArgs<ExtArgs>
    assignedGymEquipments?: boolean | User$assignedGymEquipmentsArgs<ExtArgs>
    GymMembership?: boolean | User$GymMembershipArgs<ExtArgs>
    assignedGymMemberships?: boolean | User$assignedGymMembershipsArgs<ExtArgs>
    FavoriteGyms?: boolean | User$FavoriteGymsArgs<ExtArgs>
    GymEquipmentUserHistory?: boolean | User$GymEquipmentUserHistoryArgs<ExtArgs>
    GymAccessHistory?: boolean | User$GymAccessHistoryArgs<ExtArgs>
    GymPassHistory?: boolean | User$GymPassHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Board: Prisma.$BoardPayload<ExtArgs>[]
      BoardReply: Prisma.$BoardReplyPayload<ExtArgs>[]
      Notice: Prisma.$NoticePayload<ExtArgs>[]
      Gym: Prisma.$GymPayload<ExtArgs>[]
      assignedGymEquipments: Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>[]
      GymMembership: Prisma.$GymMembershipPayload<ExtArgs>[]
      assignedGymMemberships: Prisma.$GymMembershipPayload<ExtArgs>[]
      FavoriteGyms: Prisma.$FavoriteGymPayload<ExtArgs>[]
      GymEquipmentUserHistory: Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>[]
      GymAccessHistory: Prisma.$GymAccessHistoryPayload<ExtArgs>[]
      GymPassHistory: Prisma.$GymPassHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      loginId: string
      loginPw: string | null
      username: string
      loginType: $Enums.LoginType
      userType: $Enums.UserType
      nickname: string
      phone: string
      isDisable: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Board<T extends User$BoardArgs<ExtArgs> = {}>(args?: Subset<T, User$BoardArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'findMany'> | Null>;

    BoardReply<T extends User$BoardReplyArgs<ExtArgs> = {}>(args?: Subset<T, User$BoardReplyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findMany'> | Null>;

    Notice<T extends User$NoticeArgs<ExtArgs> = {}>(args?: Subset<T, User$NoticeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'findMany'> | Null>;

    Gym<T extends User$GymArgs<ExtArgs> = {}>(args?: Subset<T, User$GymArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findMany'> | Null>;

    assignedGymEquipments<T extends User$assignedGymEquipmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedGymEquipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findMany'> | Null>;

    GymMembership<T extends User$GymMembershipArgs<ExtArgs> = {}>(args?: Subset<T, User$GymMembershipArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findMany'> | Null>;

    assignedGymMemberships<T extends User$assignedGymMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedGymMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findMany'> | Null>;

    FavoriteGyms<T extends User$FavoriteGymsArgs<ExtArgs> = {}>(args?: Subset<T, User$FavoriteGymsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'findMany'> | Null>;

    GymEquipmentUserHistory<T extends User$GymEquipmentUserHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$GymEquipmentUserHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    GymAccessHistory<T extends User$GymAccessHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$GymAccessHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    GymPassHistory<T extends User$GymPassHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$GymPassHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly loginId: FieldRef<"User", 'String'>
    readonly loginPw: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly loginType: FieldRef<"User", 'LoginType'>
    readonly userType: FieldRef<"User", 'UserType'>
    readonly nickname: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly isDisable: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Board
   */
  export type User$BoardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    cursor?: BoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }


  /**
   * User.BoardReply
   */
  export type User$BoardReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    where?: BoardReplyWhereInput
    orderBy?: BoardReplyOrderByWithRelationInput | BoardReplyOrderByWithRelationInput[]
    cursor?: BoardReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardReplyScalarFieldEnum | BoardReplyScalarFieldEnum[]
  }


  /**
   * User.Notice
   */
  export type User$NoticeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    where?: NoticeWhereInput
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    cursor?: NoticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoticeScalarFieldEnum | NoticeScalarFieldEnum[]
  }


  /**
   * User.Gym
   */
  export type User$GymArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    where?: GymWhereInput
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    cursor?: GymWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymScalarFieldEnum | GymScalarFieldEnum[]
  }


  /**
   * User.assignedGymEquipments
   */
  export type User$assignedGymEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    where?: GymEuquipmentsOnGymsWhereInput
    orderBy?: GymEuquipmentsOnGymsOrderByWithRelationInput | GymEuquipmentsOnGymsOrderByWithRelationInput[]
    cursor?: GymEuquipmentsOnGymsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymEuquipmentsOnGymsScalarFieldEnum | GymEuquipmentsOnGymsScalarFieldEnum[]
  }


  /**
   * User.GymMembership
   */
  export type User$GymMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    where?: GymMembershipWhereInput
    orderBy?: GymMembershipOrderByWithRelationInput | GymMembershipOrderByWithRelationInput[]
    cursor?: GymMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymMembershipScalarFieldEnum | GymMembershipScalarFieldEnum[]
  }


  /**
   * User.assignedGymMemberships
   */
  export type User$assignedGymMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    where?: GymMembershipWhereInput
    orderBy?: GymMembershipOrderByWithRelationInput | GymMembershipOrderByWithRelationInput[]
    cursor?: GymMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymMembershipScalarFieldEnum | GymMembershipScalarFieldEnum[]
  }


  /**
   * User.FavoriteGyms
   */
  export type User$FavoriteGymsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    where?: FavoriteGymWhereInput
    orderBy?: FavoriteGymOrderByWithRelationInput | FavoriteGymOrderByWithRelationInput[]
    cursor?: FavoriteGymWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteGymScalarFieldEnum | FavoriteGymScalarFieldEnum[]
  }


  /**
   * User.GymEquipmentUserHistory
   */
  export type User$GymEquipmentUserHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    where?: GymEquipmentUserHistoryWhereInput
    orderBy?: GymEquipmentUserHistoryOrderByWithRelationInput | GymEquipmentUserHistoryOrderByWithRelationInput[]
    cursor?: GymEquipmentUserHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymEquipmentUserHistoryScalarFieldEnum | GymEquipmentUserHistoryScalarFieldEnum[]
  }


  /**
   * User.GymAccessHistory
   */
  export type User$GymAccessHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    where?: GymAccessHistoryWhereInput
    orderBy?: GymAccessHistoryOrderByWithRelationInput | GymAccessHistoryOrderByWithRelationInput[]
    cursor?: GymAccessHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymAccessHistoryScalarFieldEnum | GymAccessHistoryScalarFieldEnum[]
  }


  /**
   * User.GymPassHistory
   */
  export type User$GymPassHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    where?: GymPassHistoryWhereInput
    orderBy?: GymPassHistoryOrderByWithRelationInput | GymPassHistoryOrderByWithRelationInput[]
    cursor?: GymPassHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymPassHistoryScalarFieldEnum | GymPassHistoryScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Notice
   */

  export type AggregateNotice = {
    _count: NoticeCountAggregateOutputType | null
    _avg: NoticeAvgAggregateOutputType | null
    _sum: NoticeSumAggregateOutputType | null
    _min: NoticeMinAggregateOutputType | null
    _max: NoticeMaxAggregateOutputType | null
  }

  export type NoticeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NoticeSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NoticeMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    content: string | null
    link: string | null
    userId: number | null
  }

  export type NoticeMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    content: string | null
    link: string | null
    userId: number | null
  }

  export type NoticeCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    content: number
    link: number
    userId: number
    _all: number
  }


  export type NoticeAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NoticeSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NoticeMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    link?: true
    userId?: true
  }

  export type NoticeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    link?: true
    userId?: true
  }

  export type NoticeCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    link?: true
    userId?: true
    _all?: true
  }

  export type NoticeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notice to aggregate.
     */
    where?: NoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notices to fetch.
     */
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notices
    **/
    _count?: true | NoticeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoticeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoticeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticeMaxAggregateInputType
  }

  export type GetNoticeAggregateType<T extends NoticeAggregateArgs> = {
        [P in keyof T & keyof AggregateNotice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotice[P]>
      : GetScalarType<T[P], AggregateNotice[P]>
  }




  export type NoticeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticeWhereInput
    orderBy?: NoticeOrderByWithAggregationInput | NoticeOrderByWithAggregationInput[]
    by: NoticeScalarFieldEnum[] | NoticeScalarFieldEnum
    having?: NoticeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticeCountAggregateInputType | true
    _avg?: NoticeAvgAggregateInputType
    _sum?: NoticeSumAggregateInputType
    _min?: NoticeMinAggregateInputType
    _max?: NoticeMaxAggregateInputType
  }

  export type NoticeGroupByOutputType = {
    id: number
    createdAt: Date
    title: string
    content: string | null
    link: string | null
    userId: number
    _count: NoticeCountAggregateOutputType | null
    _avg: NoticeAvgAggregateOutputType | null
    _sum: NoticeSumAggregateOutputType | null
    _min: NoticeMinAggregateOutputType | null
    _max: NoticeMaxAggregateOutputType | null
  }

  type GetNoticeGroupByPayload<T extends NoticeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoticeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticeGroupByOutputType[P]>
            : GetScalarType<T[P], NoticeGroupByOutputType[P]>
        }
      >
    >


  export type NoticeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    title?: boolean
    content?: boolean
    link?: boolean
    userId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notice"]>

  export type NoticeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    content?: boolean
    link?: boolean
    userId?: boolean
  }

  export type NoticeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $NoticePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notice"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      title: string
      content: string | null
      link: string | null
      userId: number
    }, ExtArgs["result"]["notice"]>
    composites: {}
  }


  type NoticeGetPayload<S extends boolean | null | undefined | NoticeDefaultArgs> = $Result.GetResult<Prisma.$NoticePayload, S>

  type NoticeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoticeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoticeCountAggregateInputType | true
    }

  export interface NoticeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notice'], meta: { name: 'Notice' } }
    /**
     * Find zero or one Notice that matches the filter.
     * @param {NoticeFindUniqueArgs} args - Arguments to find a Notice
     * @example
     * // Get one Notice
     * const notice = await prisma.notice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoticeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeFindUniqueArgs<ExtArgs>>
    ): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NoticeFindUniqueOrThrowArgs} args - Arguments to find a Notice
     * @example
     * // Get one Notice
     * const notice = await prisma.notice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NoticeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeFindFirstArgs} args - Arguments to find a Notice
     * @example
     * // Get one Notice
     * const notice = await prisma.notice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoticeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeFindFirstArgs<ExtArgs>>
    ): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeFindFirstOrThrowArgs} args - Arguments to find a Notice
     * @example
     * // Get one Notice
     * const notice = await prisma.notice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NoticeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notices
     * const notices = await prisma.notice.findMany()
     * 
     * // Get first 10 Notices
     * const notices = await prisma.notice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticeWithIdOnly = await prisma.notice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NoticeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notice.
     * @param {NoticeCreateArgs} args - Arguments to create a Notice.
     * @example
     * // Create one Notice
     * const Notice = await prisma.notice.create({
     *   data: {
     *     // ... data to create a Notice
     *   }
     * })
     * 
    **/
    create<T extends NoticeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeCreateArgs<ExtArgs>>
    ): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notices.
     *     @param {NoticeCreateManyArgs} args - Arguments to create many Notices.
     *     @example
     *     // Create many Notices
     *     const notice = await prisma.notice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NoticeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notice.
     * @param {NoticeDeleteArgs} args - Arguments to delete one Notice.
     * @example
     * // Delete one Notice
     * const Notice = await prisma.notice.delete({
     *   where: {
     *     // ... filter to delete one Notice
     *   }
     * })
     * 
    **/
    delete<T extends NoticeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeDeleteArgs<ExtArgs>>
    ): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notice.
     * @param {NoticeUpdateArgs} args - Arguments to update one Notice.
     * @example
     * // Update one Notice
     * const notice = await prisma.notice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoticeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeUpdateArgs<ExtArgs>>
    ): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notices.
     * @param {NoticeDeleteManyArgs} args - Arguments to filter Notices to delete.
     * @example
     * // Delete a few Notices
     * const { count } = await prisma.notice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoticeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoticeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notices
     * const notice = await prisma.notice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoticeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notice.
     * @param {NoticeUpsertArgs} args - Arguments to update or create a Notice.
     * @example
     * // Update or create a Notice
     * const notice = await prisma.notice.upsert({
     *   create: {
     *     // ... data to create a Notice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notice we want to update
     *   }
     * })
    **/
    upsert<T extends NoticeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NoticeUpsertArgs<ExtArgs>>
    ): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeCountArgs} args - Arguments to filter Notices to count.
     * @example
     * // Count the number of Notices
     * const count = await prisma.notice.count({
     *   where: {
     *     // ... the filter for the Notices we want to count
     *   }
     * })
    **/
    count<T extends NoticeCountArgs>(
      args?: Subset<T, NoticeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticeAggregateArgs>(args: Subset<T, NoticeAggregateArgs>): Prisma.PrismaPromise<GetNoticeAggregateType<T>>

    /**
     * Group by Notice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticeGroupByArgs['orderBy'] }
        : { orderBy?: NoticeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notice model
   */
  readonly fields: NoticeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoticeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notice model
   */ 
  interface NoticeFieldRefs {
    readonly id: FieldRef<"Notice", 'Int'>
    readonly createdAt: FieldRef<"Notice", 'DateTime'>
    readonly title: FieldRef<"Notice", 'String'>
    readonly content: FieldRef<"Notice", 'String'>
    readonly link: FieldRef<"Notice", 'String'>
    readonly userId: FieldRef<"Notice", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Notice findUnique
   */
  export type NoticeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notice to fetch.
     */
    where: NoticeWhereUniqueInput
  }


  /**
   * Notice findUniqueOrThrow
   */
  export type NoticeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notice to fetch.
     */
    where: NoticeWhereUniqueInput
  }


  /**
   * Notice findFirst
   */
  export type NoticeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notice to fetch.
     */
    where?: NoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notices to fetch.
     */
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notices.
     */
    cursor?: NoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notices.
     */
    distinct?: NoticeScalarFieldEnum | NoticeScalarFieldEnum[]
  }


  /**
   * Notice findFirstOrThrow
   */
  export type NoticeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notice to fetch.
     */
    where?: NoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notices to fetch.
     */
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notices.
     */
    cursor?: NoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notices.
     */
    distinct?: NoticeScalarFieldEnum | NoticeScalarFieldEnum[]
  }


  /**
   * Notice findMany
   */
  export type NoticeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notices to fetch.
     */
    where?: NoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notices to fetch.
     */
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notices.
     */
    cursor?: NoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notices.
     */
    skip?: number
    distinct?: NoticeScalarFieldEnum | NoticeScalarFieldEnum[]
  }


  /**
   * Notice create
   */
  export type NoticeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * The data needed to create a Notice.
     */
    data: XOR<NoticeCreateInput, NoticeUncheckedCreateInput>
  }


  /**
   * Notice createMany
   */
  export type NoticeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notices.
     */
    data: NoticeCreateManyInput | NoticeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notice update
   */
  export type NoticeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * The data needed to update a Notice.
     */
    data: XOR<NoticeUpdateInput, NoticeUncheckedUpdateInput>
    /**
     * Choose, which Notice to update.
     */
    where: NoticeWhereUniqueInput
  }


  /**
   * Notice updateMany
   */
  export type NoticeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notices.
     */
    data: XOR<NoticeUpdateManyMutationInput, NoticeUncheckedUpdateManyInput>
    /**
     * Filter which Notices to update
     */
    where?: NoticeWhereInput
  }


  /**
   * Notice upsert
   */
  export type NoticeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * The filter to search for the Notice to update in case it exists.
     */
    where: NoticeWhereUniqueInput
    /**
     * In case the Notice found by the `where` argument doesn't exist, create a new Notice with this data.
     */
    create: XOR<NoticeCreateInput, NoticeUncheckedCreateInput>
    /**
     * In case the Notice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticeUpdateInput, NoticeUncheckedUpdateInput>
  }


  /**
   * Notice delete
   */
  export type NoticeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter which Notice to delete.
     */
    where: NoticeWhereUniqueInput
  }


  /**
   * Notice deleteMany
   */
  export type NoticeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notices to delete
     */
    where?: NoticeWhereInput
  }


  /**
   * Notice without action
   */
  export type NoticeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoticeInclude<ExtArgs> | null
  }



  /**
   * Model Board
   */

  export type AggregateBoard = {
    _count: BoardCountAggregateOutputType | null
    _avg: BoardAvgAggregateOutputType | null
    _sum: BoardSumAggregateOutputType | null
    _min: BoardMinAggregateOutputType | null
    _max: BoardMaxAggregateOutputType | null
  }

  export type BoardAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BoardSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BoardMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    content: string | null
    link: string | null
    startDay: Date | null
    endDay: Date | null
    isDisable: boolean | null
    userId: number | null
    boardType: $Enums.BoardType | null
  }

  export type BoardMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    content: string | null
    link: string | null
    startDay: Date | null
    endDay: Date | null
    isDisable: boolean | null
    userId: number | null
    boardType: $Enums.BoardType | null
  }

  export type BoardCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    content: number
    link: number
    startDay: number
    endDay: number
    isDisable: number
    userId: number
    boardType: number
    _all: number
  }


  export type BoardAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BoardSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BoardMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    link?: true
    startDay?: true
    endDay?: true
    isDisable?: true
    userId?: true
    boardType?: true
  }

  export type BoardMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    link?: true
    startDay?: true
    endDay?: true
    isDisable?: true
    userId?: true
    boardType?: true
  }

  export type BoardCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    link?: true
    startDay?: true
    endDay?: true
    isDisable?: true
    userId?: true
    boardType?: true
    _all?: true
  }

  export type BoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Board to aggregate.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boards
    **/
    _count?: true | BoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardMaxAggregateInputType
  }

  export type GetBoardAggregateType<T extends BoardAggregateArgs> = {
        [P in keyof T & keyof AggregateBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoard[P]>
      : GetScalarType<T[P], AggregateBoard[P]>
  }




  export type BoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithAggregationInput | BoardOrderByWithAggregationInput[]
    by: BoardScalarFieldEnum[] | BoardScalarFieldEnum
    having?: BoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardCountAggregateInputType | true
    _avg?: BoardAvgAggregateInputType
    _sum?: BoardSumAggregateInputType
    _min?: BoardMinAggregateInputType
    _max?: BoardMaxAggregateInputType
  }

  export type BoardGroupByOutputType = {
    id: number
    createdAt: Date
    title: string
    content: string | null
    link: string | null
    startDay: Date
    endDay: Date
    isDisable: boolean
    userId: number
    boardType: $Enums.BoardType
    _count: BoardCountAggregateOutputType | null
    _avg: BoardAvgAggregateOutputType | null
    _sum: BoardSumAggregateOutputType | null
    _min: BoardMinAggregateOutputType | null
    _max: BoardMaxAggregateOutputType | null
  }

  type GetBoardGroupByPayload<T extends BoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardGroupByOutputType[P]>
            : GetScalarType<T[P], BoardGroupByOutputType[P]>
        }
      >
    >


  export type BoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    title?: boolean
    content?: boolean
    link?: boolean
    startDay?: boolean
    endDay?: boolean
    isDisable?: boolean
    userId?: boolean
    boardType?: boolean
    BoardImage?: boolean | Board$BoardImageArgs<ExtArgs>
    BoardReply?: boolean | Board$BoardReplyArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | BoardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["board"]>

  export type BoardSelectScalar = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    content?: boolean
    link?: boolean
    startDay?: boolean
    endDay?: boolean
    isDisable?: boolean
    userId?: boolean
    boardType?: boolean
  }

  export type BoardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BoardImage?: boolean | Board$BoardImageArgs<ExtArgs>
    BoardReply?: boolean | Board$BoardReplyArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | BoardCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Board"
    objects: {
      BoardImage: Prisma.$BoardImagePayload<ExtArgs>[]
      BoardReply: Prisma.$BoardReplyPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      title: string
      content: string | null
      link: string | null
      startDay: Date
      endDay: Date
      isDisable: boolean
      userId: number
      boardType: $Enums.BoardType
    }, ExtArgs["result"]["board"]>
    composites: {}
  }


  type BoardGetPayload<S extends boolean | null | undefined | BoardDefaultArgs> = $Result.GetResult<Prisma.$BoardPayload, S>

  type BoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardCountAggregateInputType | true
    }

  export interface BoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Board'], meta: { name: 'Board' } }
    /**
     * Find zero or one Board that matches the filter.
     * @param {BoardFindUniqueArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoardFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BoardFindUniqueArgs<ExtArgs>>
    ): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Board that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoardFindUniqueOrThrowArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Board that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindFirstArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoardFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardFindFirstArgs<ExtArgs>>
    ): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Board that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindFirstOrThrowArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boards
     * const boards = await prisma.board.findMany()
     * 
     * // Get first 10 Boards
     * const boards = await prisma.board.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardWithIdOnly = await prisma.board.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BoardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Board.
     * @param {BoardCreateArgs} args - Arguments to create a Board.
     * @example
     * // Create one Board
     * const Board = await prisma.board.create({
     *   data: {
     *     // ... data to create a Board
     *   }
     * })
     * 
    **/
    create<T extends BoardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardCreateArgs<ExtArgs>>
    ): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Boards.
     *     @param {BoardCreateManyArgs} args - Arguments to create many Boards.
     *     @example
     *     // Create many Boards
     *     const board = await prisma.board.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Board.
     * @param {BoardDeleteArgs} args - Arguments to delete one Board.
     * @example
     * // Delete one Board
     * const Board = await prisma.board.delete({
     *   where: {
     *     // ... filter to delete one Board
     *   }
     * })
     * 
    **/
    delete<T extends BoardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoardDeleteArgs<ExtArgs>>
    ): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Board.
     * @param {BoardUpdateArgs} args - Arguments to update one Board.
     * @example
     * // Update one Board
     * const board = await prisma.board.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardUpdateArgs<ExtArgs>>
    ): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Boards.
     * @param {BoardDeleteManyArgs} args - Arguments to filter Boards to delete.
     * @example
     * // Delete a few Boards
     * const { count } = await prisma.board.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boards
     * const board = await prisma.board.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Board.
     * @param {BoardUpsertArgs} args - Arguments to update or create a Board.
     * @example
     * // Update or create a Board
     * const board = await prisma.board.upsert({
     *   create: {
     *     // ... data to create a Board
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Board we want to update
     *   }
     * })
    **/
    upsert<T extends BoardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoardUpsertArgs<ExtArgs>>
    ): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCountArgs} args - Arguments to filter Boards to count.
     * @example
     * // Count the number of Boards
     * const count = await prisma.board.count({
     *   where: {
     *     // ... the filter for the Boards we want to count
     *   }
     * })
    **/
    count<T extends BoardCountArgs>(
      args?: Subset<T, BoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardAggregateArgs>(args: Subset<T, BoardAggregateArgs>): Prisma.PrismaPromise<GetBoardAggregateType<T>>

    /**
     * Group by Board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardGroupByArgs['orderBy'] }
        : { orderBy?: BoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Board model
   */
  readonly fields: BoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Board.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    BoardImage<T extends Board$BoardImageArgs<ExtArgs> = {}>(args?: Subset<T, Board$BoardImageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'findMany'> | Null>;

    BoardReply<T extends Board$BoardReplyArgs<ExtArgs> = {}>(args?: Subset<T, Board$BoardReplyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findMany'> | Null>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Board model
   */ 
  interface BoardFieldRefs {
    readonly id: FieldRef<"Board", 'Int'>
    readonly createdAt: FieldRef<"Board", 'DateTime'>
    readonly title: FieldRef<"Board", 'String'>
    readonly content: FieldRef<"Board", 'String'>
    readonly link: FieldRef<"Board", 'String'>
    readonly startDay: FieldRef<"Board", 'DateTime'>
    readonly endDay: FieldRef<"Board", 'DateTime'>
    readonly isDisable: FieldRef<"Board", 'Boolean'>
    readonly userId: FieldRef<"Board", 'Int'>
    readonly boardType: FieldRef<"Board", 'BoardType'>
  }
    

  // Custom InputTypes

  /**
   * Board findUnique
   */
  export type BoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where: BoardWhereUniqueInput
  }


  /**
   * Board findUniqueOrThrow
   */
  export type BoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where: BoardWhereUniqueInput
  }


  /**
   * Board findFirst
   */
  export type BoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }


  /**
   * Board findFirstOrThrow
   */
  export type BoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }


  /**
   * Board findMany
   */
  export type BoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }


  /**
   * Board create
   */
  export type BoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The data needed to create a Board.
     */
    data: XOR<BoardCreateInput, BoardUncheckedCreateInput>
  }


  /**
   * Board createMany
   */
  export type BoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boards.
     */
    data: BoardCreateManyInput | BoardCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Board update
   */
  export type BoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The data needed to update a Board.
     */
    data: XOR<BoardUpdateInput, BoardUncheckedUpdateInput>
    /**
     * Choose, which Board to update.
     */
    where: BoardWhereUniqueInput
  }


  /**
   * Board updateMany
   */
  export type BoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boards.
     */
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyInput>
    /**
     * Filter which Boards to update
     */
    where?: BoardWhereInput
  }


  /**
   * Board upsert
   */
  export type BoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The filter to search for the Board to update in case it exists.
     */
    where: BoardWhereUniqueInput
    /**
     * In case the Board found by the `where` argument doesn't exist, create a new Board with this data.
     */
    create: XOR<BoardCreateInput, BoardUncheckedCreateInput>
    /**
     * In case the Board was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardUpdateInput, BoardUncheckedUpdateInput>
  }


  /**
   * Board delete
   */
  export type BoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter which Board to delete.
     */
    where: BoardWhereUniqueInput
  }


  /**
   * Board deleteMany
   */
  export type BoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boards to delete
     */
    where?: BoardWhereInput
  }


  /**
   * Board.BoardImage
   */
  export type Board$BoardImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    where?: BoardImageWhereInput
    orderBy?: BoardImageOrderByWithRelationInput | BoardImageOrderByWithRelationInput[]
    cursor?: BoardImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardImageScalarFieldEnum | BoardImageScalarFieldEnum[]
  }


  /**
   * Board.BoardReply
   */
  export type Board$BoardReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    where?: BoardReplyWhereInput
    orderBy?: BoardReplyOrderByWithRelationInput | BoardReplyOrderByWithRelationInput[]
    cursor?: BoardReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardReplyScalarFieldEnum | BoardReplyScalarFieldEnum[]
  }


  /**
   * Board without action
   */
  export type BoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardInclude<ExtArgs> | null
  }



  /**
   * Model BoardImage
   */

  export type AggregateBoardImage = {
    _count: BoardImageCountAggregateOutputType | null
    _avg: BoardImageAvgAggregateOutputType | null
    _sum: BoardImageSumAggregateOutputType | null
    _min: BoardImageMinAggregateOutputType | null
    _max: BoardImageMaxAggregateOutputType | null
  }

  export type BoardImageAvgAggregateOutputType = {
    id: number | null
    width: number | null
    height: number | null
    size: number | null
    boardId: number | null
  }

  export type BoardImageSumAggregateOutputType = {
    id: number | null
    width: number | null
    height: number | null
    size: number | null
    boardId: number | null
  }

  export type BoardImageMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    url: string | null
    width: number | null
    height: number | null
    size: number | null
    isThumb: boolean | null
    boardId: number | null
  }

  export type BoardImageMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    url: string | null
    width: number | null
    height: number | null
    size: number | null
    isThumb: boolean | null
    boardId: number | null
  }

  export type BoardImageCountAggregateOutputType = {
    id: number
    createdAt: number
    url: number
    width: number
    height: number
    size: number
    isThumb: number
    boardId: number
    _all: number
  }


  export type BoardImageAvgAggregateInputType = {
    id?: true
    width?: true
    height?: true
    size?: true
    boardId?: true
  }

  export type BoardImageSumAggregateInputType = {
    id?: true
    width?: true
    height?: true
    size?: true
    boardId?: true
  }

  export type BoardImageMinAggregateInputType = {
    id?: true
    createdAt?: true
    url?: true
    width?: true
    height?: true
    size?: true
    isThumb?: true
    boardId?: true
  }

  export type BoardImageMaxAggregateInputType = {
    id?: true
    createdAt?: true
    url?: true
    width?: true
    height?: true
    size?: true
    isThumb?: true
    boardId?: true
  }

  export type BoardImageCountAggregateInputType = {
    id?: true
    createdAt?: true
    url?: true
    width?: true
    height?: true
    size?: true
    isThumb?: true
    boardId?: true
    _all?: true
  }

  export type BoardImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardImage to aggregate.
     */
    where?: BoardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardImages to fetch.
     */
    orderBy?: BoardImageOrderByWithRelationInput | BoardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BoardImages
    **/
    _count?: true | BoardImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardImageMaxAggregateInputType
  }

  export type GetBoardImageAggregateType<T extends BoardImageAggregateArgs> = {
        [P in keyof T & keyof AggregateBoardImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoardImage[P]>
      : GetScalarType<T[P], AggregateBoardImage[P]>
  }




  export type BoardImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardImageWhereInput
    orderBy?: BoardImageOrderByWithAggregationInput | BoardImageOrderByWithAggregationInput[]
    by: BoardImageScalarFieldEnum[] | BoardImageScalarFieldEnum
    having?: BoardImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardImageCountAggregateInputType | true
    _avg?: BoardImageAvgAggregateInputType
    _sum?: BoardImageSumAggregateInputType
    _min?: BoardImageMinAggregateInputType
    _max?: BoardImageMaxAggregateInputType
  }

  export type BoardImageGroupByOutputType = {
    id: number
    createdAt: Date
    url: string
    width: number
    height: number
    size: number
    isThumb: boolean
    boardId: number
    _count: BoardImageCountAggregateOutputType | null
    _avg: BoardImageAvgAggregateOutputType | null
    _sum: BoardImageSumAggregateOutputType | null
    _min: BoardImageMinAggregateOutputType | null
    _max: BoardImageMaxAggregateOutputType | null
  }

  type GetBoardImageGroupByPayload<T extends BoardImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardImageGroupByOutputType[P]>
            : GetScalarType<T[P], BoardImageGroupByOutputType[P]>
        }
      >
    >


  export type BoardImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    url?: boolean
    width?: boolean
    height?: boolean
    size?: boolean
    isThumb?: boolean
    boardId?: boolean
    Board?: boolean | BoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardImage"]>

  export type BoardImageSelectScalar = {
    id?: boolean
    createdAt?: boolean
    url?: boolean
    width?: boolean
    height?: boolean
    size?: boolean
    isThumb?: boolean
    boardId?: boolean
  }

  export type BoardImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Board?: boolean | BoardDefaultArgs<ExtArgs>
  }


  export type $BoardImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BoardImage"
    objects: {
      Board: Prisma.$BoardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      url: string
      width: number
      height: number
      size: number
      isThumb: boolean
      boardId: number
    }, ExtArgs["result"]["boardImage"]>
    composites: {}
  }


  type BoardImageGetPayload<S extends boolean | null | undefined | BoardImageDefaultArgs> = $Result.GetResult<Prisma.$BoardImagePayload, S>

  type BoardImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardImageCountAggregateInputType | true
    }

  export interface BoardImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BoardImage'], meta: { name: 'BoardImage' } }
    /**
     * Find zero or one BoardImage that matches the filter.
     * @param {BoardImageFindUniqueArgs} args - Arguments to find a BoardImage
     * @example
     * // Get one BoardImage
     * const boardImage = await prisma.boardImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoardImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BoardImageFindUniqueArgs<ExtArgs>>
    ): Prisma__BoardImageClient<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BoardImage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoardImageFindUniqueOrThrowArgs} args - Arguments to find a BoardImage
     * @example
     * // Get one BoardImage
     * const boardImage = await prisma.boardImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoardImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoardImageClient<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BoardImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardImageFindFirstArgs} args - Arguments to find a BoardImage
     * @example
     * // Get one BoardImage
     * const boardImage = await prisma.boardImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoardImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardImageFindFirstArgs<ExtArgs>>
    ): Prisma__BoardImageClient<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BoardImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardImageFindFirstOrThrowArgs} args - Arguments to find a BoardImage
     * @example
     * // Get one BoardImage
     * const boardImage = await prisma.boardImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoardImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoardImageClient<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BoardImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BoardImages
     * const boardImages = await prisma.boardImage.findMany()
     * 
     * // Get first 10 BoardImages
     * const boardImages = await prisma.boardImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardImageWithIdOnly = await prisma.boardImage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BoardImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BoardImage.
     * @param {BoardImageCreateArgs} args - Arguments to create a BoardImage.
     * @example
     * // Create one BoardImage
     * const BoardImage = await prisma.boardImage.create({
     *   data: {
     *     // ... data to create a BoardImage
     *   }
     * })
     * 
    **/
    create<T extends BoardImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardImageCreateArgs<ExtArgs>>
    ): Prisma__BoardImageClient<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BoardImages.
     *     @param {BoardImageCreateManyArgs} args - Arguments to create many BoardImages.
     *     @example
     *     // Create many BoardImages
     *     const boardImage = await prisma.boardImage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoardImageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardImageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BoardImage.
     * @param {BoardImageDeleteArgs} args - Arguments to delete one BoardImage.
     * @example
     * // Delete one BoardImage
     * const BoardImage = await prisma.boardImage.delete({
     *   where: {
     *     // ... filter to delete one BoardImage
     *   }
     * })
     * 
    **/
    delete<T extends BoardImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoardImageDeleteArgs<ExtArgs>>
    ): Prisma__BoardImageClient<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BoardImage.
     * @param {BoardImageUpdateArgs} args - Arguments to update one BoardImage.
     * @example
     * // Update one BoardImage
     * const boardImage = await prisma.boardImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoardImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardImageUpdateArgs<ExtArgs>>
    ): Prisma__BoardImageClient<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BoardImages.
     * @param {BoardImageDeleteManyArgs} args - Arguments to filter BoardImages to delete.
     * @example
     * // Delete a few BoardImages
     * const { count } = await prisma.boardImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoardImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BoardImages
     * const boardImage = await prisma.boardImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoardImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoardImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BoardImage.
     * @param {BoardImageUpsertArgs} args - Arguments to update or create a BoardImage.
     * @example
     * // Update or create a BoardImage
     * const boardImage = await prisma.boardImage.upsert({
     *   create: {
     *     // ... data to create a BoardImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BoardImage we want to update
     *   }
     * })
    **/
    upsert<T extends BoardImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoardImageUpsertArgs<ExtArgs>>
    ): Prisma__BoardImageClient<$Result.GetResult<Prisma.$BoardImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BoardImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardImageCountArgs} args - Arguments to filter BoardImages to count.
     * @example
     * // Count the number of BoardImages
     * const count = await prisma.boardImage.count({
     *   where: {
     *     // ... the filter for the BoardImages we want to count
     *   }
     * })
    **/
    count<T extends BoardImageCountArgs>(
      args?: Subset<T, BoardImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BoardImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardImageAggregateArgs>(args: Subset<T, BoardImageAggregateArgs>): Prisma.PrismaPromise<GetBoardImageAggregateType<T>>

    /**
     * Group by BoardImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardImageGroupByArgs['orderBy'] }
        : { orderBy?: BoardImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BoardImage model
   */
  readonly fields: BoardImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BoardImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Board<T extends BoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardDefaultArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BoardImage model
   */ 
  interface BoardImageFieldRefs {
    readonly id: FieldRef<"BoardImage", 'Int'>
    readonly createdAt: FieldRef<"BoardImage", 'DateTime'>
    readonly url: FieldRef<"BoardImage", 'String'>
    readonly width: FieldRef<"BoardImage", 'Int'>
    readonly height: FieldRef<"BoardImage", 'Int'>
    readonly size: FieldRef<"BoardImage", 'Int'>
    readonly isThumb: FieldRef<"BoardImage", 'Boolean'>
    readonly boardId: FieldRef<"BoardImage", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * BoardImage findUnique
   */
  export type BoardImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * Filter, which BoardImage to fetch.
     */
    where: BoardImageWhereUniqueInput
  }


  /**
   * BoardImage findUniqueOrThrow
   */
  export type BoardImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * Filter, which BoardImage to fetch.
     */
    where: BoardImageWhereUniqueInput
  }


  /**
   * BoardImage findFirst
   */
  export type BoardImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * Filter, which BoardImage to fetch.
     */
    where?: BoardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardImages to fetch.
     */
    orderBy?: BoardImageOrderByWithRelationInput | BoardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardImages.
     */
    cursor?: BoardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardImages.
     */
    distinct?: BoardImageScalarFieldEnum | BoardImageScalarFieldEnum[]
  }


  /**
   * BoardImage findFirstOrThrow
   */
  export type BoardImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * Filter, which BoardImage to fetch.
     */
    where?: BoardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardImages to fetch.
     */
    orderBy?: BoardImageOrderByWithRelationInput | BoardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardImages.
     */
    cursor?: BoardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardImages.
     */
    distinct?: BoardImageScalarFieldEnum | BoardImageScalarFieldEnum[]
  }


  /**
   * BoardImage findMany
   */
  export type BoardImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * Filter, which BoardImages to fetch.
     */
    where?: BoardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardImages to fetch.
     */
    orderBy?: BoardImageOrderByWithRelationInput | BoardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BoardImages.
     */
    cursor?: BoardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardImages.
     */
    skip?: number
    distinct?: BoardImageScalarFieldEnum | BoardImageScalarFieldEnum[]
  }


  /**
   * BoardImage create
   */
  export type BoardImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * The data needed to create a BoardImage.
     */
    data: XOR<BoardImageCreateInput, BoardImageUncheckedCreateInput>
  }


  /**
   * BoardImage createMany
   */
  export type BoardImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BoardImages.
     */
    data: BoardImageCreateManyInput | BoardImageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BoardImage update
   */
  export type BoardImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * The data needed to update a BoardImage.
     */
    data: XOR<BoardImageUpdateInput, BoardImageUncheckedUpdateInput>
    /**
     * Choose, which BoardImage to update.
     */
    where: BoardImageWhereUniqueInput
  }


  /**
   * BoardImage updateMany
   */
  export type BoardImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BoardImages.
     */
    data: XOR<BoardImageUpdateManyMutationInput, BoardImageUncheckedUpdateManyInput>
    /**
     * Filter which BoardImages to update
     */
    where?: BoardImageWhereInput
  }


  /**
   * BoardImage upsert
   */
  export type BoardImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * The filter to search for the BoardImage to update in case it exists.
     */
    where: BoardImageWhereUniqueInput
    /**
     * In case the BoardImage found by the `where` argument doesn't exist, create a new BoardImage with this data.
     */
    create: XOR<BoardImageCreateInput, BoardImageUncheckedCreateInput>
    /**
     * In case the BoardImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardImageUpdateInput, BoardImageUncheckedUpdateInput>
  }


  /**
   * BoardImage delete
   */
  export type BoardImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
    /**
     * Filter which BoardImage to delete.
     */
    where: BoardImageWhereUniqueInput
  }


  /**
   * BoardImage deleteMany
   */
  export type BoardImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardImages to delete
     */
    where?: BoardImageWhereInput
  }


  /**
   * BoardImage without action
   */
  export type BoardImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardImage
     */
    select?: BoardImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardImageInclude<ExtArgs> | null
  }



  /**
   * Model BoardReply
   */

  export type AggregateBoardReply = {
    _count: BoardReplyCountAggregateOutputType | null
    _avg: BoardReplyAvgAggregateOutputType | null
    _sum: BoardReplySumAggregateOutputType | null
    _min: BoardReplyMinAggregateOutputType | null
    _max: BoardReplyMaxAggregateOutputType | null
  }

  export type BoardReplyAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    boardId: number | null
    boardReplyId: number | null
  }

  export type BoardReplySumAggregateOutputType = {
    id: number | null
    userId: number | null
    boardId: number | null
    boardReplyId: number | null
  }

  export type BoardReplyMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    content: string | null
    isDisable: boolean | null
    userId: number | null
    boardId: number | null
    boardReplyId: number | null
    boardType: $Enums.BoardType | null
  }

  export type BoardReplyMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    content: string | null
    isDisable: boolean | null
    userId: number | null
    boardId: number | null
    boardReplyId: number | null
    boardType: $Enums.BoardType | null
  }

  export type BoardReplyCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    content: number
    isDisable: number
    userId: number
    boardId: number
    boardReplyId: number
    boardType: number
    _all: number
  }


  export type BoardReplyAvgAggregateInputType = {
    id?: true
    userId?: true
    boardId?: true
    boardReplyId?: true
  }

  export type BoardReplySumAggregateInputType = {
    id?: true
    userId?: true
    boardId?: true
    boardReplyId?: true
  }

  export type BoardReplyMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    isDisable?: true
    userId?: true
    boardId?: true
    boardReplyId?: true
    boardType?: true
  }

  export type BoardReplyMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    isDisable?: true
    userId?: true
    boardId?: true
    boardReplyId?: true
    boardType?: true
  }

  export type BoardReplyCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    isDisable?: true
    userId?: true
    boardId?: true
    boardReplyId?: true
    boardType?: true
    _all?: true
  }

  export type BoardReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardReply to aggregate.
     */
    where?: BoardReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardReplies to fetch.
     */
    orderBy?: BoardReplyOrderByWithRelationInput | BoardReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BoardReplies
    **/
    _count?: true | BoardReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardReplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardReplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardReplyMaxAggregateInputType
  }

  export type GetBoardReplyAggregateType<T extends BoardReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateBoardReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoardReply[P]>
      : GetScalarType<T[P], AggregateBoardReply[P]>
  }




  export type BoardReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardReplyWhereInput
    orderBy?: BoardReplyOrderByWithAggregationInput | BoardReplyOrderByWithAggregationInput[]
    by: BoardReplyScalarFieldEnum[] | BoardReplyScalarFieldEnum
    having?: BoardReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardReplyCountAggregateInputType | true
    _avg?: BoardReplyAvgAggregateInputType
    _sum?: BoardReplySumAggregateInputType
    _min?: BoardReplyMinAggregateInputType
    _max?: BoardReplyMaxAggregateInputType
  }

  export type BoardReplyGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date | null
    content: string
    isDisable: boolean
    userId: number
    boardId: number
    boardReplyId: number | null
    boardType: $Enums.BoardType
    _count: BoardReplyCountAggregateOutputType | null
    _avg: BoardReplyAvgAggregateOutputType | null
    _sum: BoardReplySumAggregateOutputType | null
    _min: BoardReplyMinAggregateOutputType | null
    _max: BoardReplyMaxAggregateOutputType | null
  }

  type GetBoardReplyGroupByPayload<T extends BoardReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardReplyGroupByOutputType[P]>
            : GetScalarType<T[P], BoardReplyGroupByOutputType[P]>
        }
      >
    >


  export type BoardReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    isDisable?: boolean
    userId?: boolean
    boardId?: boolean
    boardReplyId?: boolean
    boardType?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Board?: boolean | BoardDefaultArgs<ExtArgs>
    BoardReply?: boolean | BoardReply$BoardReplyArgs<ExtArgs>
    BoardNestedReply?: boolean | BoardReply$BoardNestedReplyArgs<ExtArgs>
    _count?: boolean | BoardReplyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardReply"]>

  export type BoardReplySelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    isDisable?: boolean
    userId?: boolean
    boardId?: boolean
    boardReplyId?: boolean
    boardType?: boolean
  }

  export type BoardReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Board?: boolean | BoardDefaultArgs<ExtArgs>
    BoardReply?: boolean | BoardReply$BoardReplyArgs<ExtArgs>
    BoardNestedReply?: boolean | BoardReply$BoardNestedReplyArgs<ExtArgs>
    _count?: boolean | BoardReplyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BoardReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BoardReply"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Board: Prisma.$BoardPayload<ExtArgs>
      BoardReply: Prisma.$BoardReplyPayload<ExtArgs> | null
      BoardNestedReply: Prisma.$BoardReplyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date | null
      content: string
      isDisable: boolean
      userId: number
      boardId: number
      boardReplyId: number | null
      boardType: $Enums.BoardType
    }, ExtArgs["result"]["boardReply"]>
    composites: {}
  }


  type BoardReplyGetPayload<S extends boolean | null | undefined | BoardReplyDefaultArgs> = $Result.GetResult<Prisma.$BoardReplyPayload, S>

  type BoardReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardReplyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardReplyCountAggregateInputType | true
    }

  export interface BoardReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BoardReply'], meta: { name: 'BoardReply' } }
    /**
     * Find zero or one BoardReply that matches the filter.
     * @param {BoardReplyFindUniqueArgs} args - Arguments to find a BoardReply
     * @example
     * // Get one BoardReply
     * const boardReply = await prisma.boardReply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoardReplyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BoardReplyFindUniqueArgs<ExtArgs>>
    ): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BoardReply that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoardReplyFindUniqueOrThrowArgs} args - Arguments to find a BoardReply
     * @example
     * // Get one BoardReply
     * const boardReply = await prisma.boardReply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoardReplyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardReplyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BoardReply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardReplyFindFirstArgs} args - Arguments to find a BoardReply
     * @example
     * // Get one BoardReply
     * const boardReply = await prisma.boardReply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoardReplyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardReplyFindFirstArgs<ExtArgs>>
    ): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BoardReply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardReplyFindFirstOrThrowArgs} args - Arguments to find a BoardReply
     * @example
     * // Get one BoardReply
     * const boardReply = await prisma.boardReply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoardReplyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardReplyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BoardReplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardReplyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BoardReplies
     * const boardReplies = await prisma.boardReply.findMany()
     * 
     * // Get first 10 BoardReplies
     * const boardReplies = await prisma.boardReply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardReplyWithIdOnly = await prisma.boardReply.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BoardReplyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardReplyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BoardReply.
     * @param {BoardReplyCreateArgs} args - Arguments to create a BoardReply.
     * @example
     * // Create one BoardReply
     * const BoardReply = await prisma.boardReply.create({
     *   data: {
     *     // ... data to create a BoardReply
     *   }
     * })
     * 
    **/
    create<T extends BoardReplyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardReplyCreateArgs<ExtArgs>>
    ): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BoardReplies.
     *     @param {BoardReplyCreateManyArgs} args - Arguments to create many BoardReplies.
     *     @example
     *     // Create many BoardReplies
     *     const boardReply = await prisma.boardReply.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoardReplyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardReplyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BoardReply.
     * @param {BoardReplyDeleteArgs} args - Arguments to delete one BoardReply.
     * @example
     * // Delete one BoardReply
     * const BoardReply = await prisma.boardReply.delete({
     *   where: {
     *     // ... filter to delete one BoardReply
     *   }
     * })
     * 
    **/
    delete<T extends BoardReplyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoardReplyDeleteArgs<ExtArgs>>
    ): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BoardReply.
     * @param {BoardReplyUpdateArgs} args - Arguments to update one BoardReply.
     * @example
     * // Update one BoardReply
     * const boardReply = await prisma.boardReply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoardReplyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardReplyUpdateArgs<ExtArgs>>
    ): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BoardReplies.
     * @param {BoardReplyDeleteManyArgs} args - Arguments to filter BoardReplies to delete.
     * @example
     * // Delete a few BoardReplies
     * const { count } = await prisma.boardReply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoardReplyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardReplyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BoardReplies
     * const boardReply = await prisma.boardReply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoardReplyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoardReplyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BoardReply.
     * @param {BoardReplyUpsertArgs} args - Arguments to update or create a BoardReply.
     * @example
     * // Update or create a BoardReply
     * const boardReply = await prisma.boardReply.upsert({
     *   create: {
     *     // ... data to create a BoardReply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BoardReply we want to update
     *   }
     * })
    **/
    upsert<T extends BoardReplyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoardReplyUpsertArgs<ExtArgs>>
    ): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BoardReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardReplyCountArgs} args - Arguments to filter BoardReplies to count.
     * @example
     * // Count the number of BoardReplies
     * const count = await prisma.boardReply.count({
     *   where: {
     *     // ... the filter for the BoardReplies we want to count
     *   }
     * })
    **/
    count<T extends BoardReplyCountArgs>(
      args?: Subset<T, BoardReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BoardReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardReplyAggregateArgs>(args: Subset<T, BoardReplyAggregateArgs>): Prisma.PrismaPromise<GetBoardReplyAggregateType<T>>

    /**
     * Group by BoardReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardReplyGroupByArgs['orderBy'] }
        : { orderBy?: BoardReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BoardReply model
   */
  readonly fields: BoardReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BoardReply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Board<T extends BoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardDefaultArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    BoardReply<T extends BoardReply$BoardReplyArgs<ExtArgs> = {}>(args?: Subset<T, BoardReply$BoardReplyArgs<ExtArgs>>): Prisma__BoardReplyClient<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    BoardNestedReply<T extends BoardReply$BoardNestedReplyArgs<ExtArgs> = {}>(args?: Subset<T, BoardReply$BoardNestedReplyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardReplyPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BoardReply model
   */ 
  interface BoardReplyFieldRefs {
    readonly id: FieldRef<"BoardReply", 'Int'>
    readonly createdAt: FieldRef<"BoardReply", 'DateTime'>
    readonly updatedAt: FieldRef<"BoardReply", 'DateTime'>
    readonly content: FieldRef<"BoardReply", 'String'>
    readonly isDisable: FieldRef<"BoardReply", 'Boolean'>
    readonly userId: FieldRef<"BoardReply", 'Int'>
    readonly boardId: FieldRef<"BoardReply", 'Int'>
    readonly boardReplyId: FieldRef<"BoardReply", 'Int'>
    readonly boardType: FieldRef<"BoardReply", 'BoardType'>
  }
    

  // Custom InputTypes

  /**
   * BoardReply findUnique
   */
  export type BoardReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * Filter, which BoardReply to fetch.
     */
    where: BoardReplyWhereUniqueInput
  }


  /**
   * BoardReply findUniqueOrThrow
   */
  export type BoardReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * Filter, which BoardReply to fetch.
     */
    where: BoardReplyWhereUniqueInput
  }


  /**
   * BoardReply findFirst
   */
  export type BoardReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * Filter, which BoardReply to fetch.
     */
    where?: BoardReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardReplies to fetch.
     */
    orderBy?: BoardReplyOrderByWithRelationInput | BoardReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardReplies.
     */
    cursor?: BoardReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardReplies.
     */
    distinct?: BoardReplyScalarFieldEnum | BoardReplyScalarFieldEnum[]
  }


  /**
   * BoardReply findFirstOrThrow
   */
  export type BoardReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * Filter, which BoardReply to fetch.
     */
    where?: BoardReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardReplies to fetch.
     */
    orderBy?: BoardReplyOrderByWithRelationInput | BoardReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardReplies.
     */
    cursor?: BoardReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardReplies.
     */
    distinct?: BoardReplyScalarFieldEnum | BoardReplyScalarFieldEnum[]
  }


  /**
   * BoardReply findMany
   */
  export type BoardReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * Filter, which BoardReplies to fetch.
     */
    where?: BoardReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardReplies to fetch.
     */
    orderBy?: BoardReplyOrderByWithRelationInput | BoardReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BoardReplies.
     */
    cursor?: BoardReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardReplies.
     */
    skip?: number
    distinct?: BoardReplyScalarFieldEnum | BoardReplyScalarFieldEnum[]
  }


  /**
   * BoardReply create
   */
  export type BoardReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a BoardReply.
     */
    data: XOR<BoardReplyCreateInput, BoardReplyUncheckedCreateInput>
  }


  /**
   * BoardReply createMany
   */
  export type BoardReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BoardReplies.
     */
    data: BoardReplyCreateManyInput | BoardReplyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BoardReply update
   */
  export type BoardReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a BoardReply.
     */
    data: XOR<BoardReplyUpdateInput, BoardReplyUncheckedUpdateInput>
    /**
     * Choose, which BoardReply to update.
     */
    where: BoardReplyWhereUniqueInput
  }


  /**
   * BoardReply updateMany
   */
  export type BoardReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BoardReplies.
     */
    data: XOR<BoardReplyUpdateManyMutationInput, BoardReplyUncheckedUpdateManyInput>
    /**
     * Filter which BoardReplies to update
     */
    where?: BoardReplyWhereInput
  }


  /**
   * BoardReply upsert
   */
  export type BoardReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the BoardReply to update in case it exists.
     */
    where: BoardReplyWhereUniqueInput
    /**
     * In case the BoardReply found by the `where` argument doesn't exist, create a new BoardReply with this data.
     */
    create: XOR<BoardReplyCreateInput, BoardReplyUncheckedCreateInput>
    /**
     * In case the BoardReply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardReplyUpdateInput, BoardReplyUncheckedUpdateInput>
  }


  /**
   * BoardReply delete
   */
  export type BoardReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    /**
     * Filter which BoardReply to delete.
     */
    where: BoardReplyWhereUniqueInput
  }


  /**
   * BoardReply deleteMany
   */
  export type BoardReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardReplies to delete
     */
    where?: BoardReplyWhereInput
  }


  /**
   * BoardReply.BoardReply
   */
  export type BoardReply$BoardReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    where?: BoardReplyWhereInput
  }


  /**
   * BoardReply.BoardNestedReply
   */
  export type BoardReply$BoardNestedReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
    where?: BoardReplyWhereInput
    orderBy?: BoardReplyOrderByWithRelationInput | BoardReplyOrderByWithRelationInput[]
    cursor?: BoardReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardReplyScalarFieldEnum | BoardReplyScalarFieldEnum[]
  }


  /**
   * BoardReply without action
   */
  export type BoardReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardReply
     */
    select?: BoardReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoardReplyInclude<ExtArgs> | null
  }



  /**
   * Model BodyPart
   */

  export type AggregateBodyPart = {
    _count: BodyPartCountAggregateOutputType | null
    _avg: BodyPartAvgAggregateOutputType | null
    _sum: BodyPartSumAggregateOutputType | null
    _min: BodyPartMinAggregateOutputType | null
    _max: BodyPartMaxAggregateOutputType | null
  }

  export type BodyPartAvgAggregateOutputType = {
    id: number | null
  }

  export type BodyPartSumAggregateOutputType = {
    id: number | null
  }

  export type BodyPartMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    code: string | null
  }

  export type BodyPartMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    code: string | null
  }

  export type BodyPartCountAggregateOutputType = {
    id: number
    createdAt: number
    name: number
    code: number
    _all: number
  }


  export type BodyPartAvgAggregateInputType = {
    id?: true
  }

  export type BodyPartSumAggregateInputType = {
    id?: true
  }

  export type BodyPartMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    code?: true
  }

  export type BodyPartMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    code?: true
  }

  export type BodyPartCountAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    code?: true
    _all?: true
  }

  export type BodyPartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BodyPart to aggregate.
     */
    where?: BodyPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BodyParts to fetch.
     */
    orderBy?: BodyPartOrderByWithRelationInput | BodyPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BodyPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BodyParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BodyParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BodyParts
    **/
    _count?: true | BodyPartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BodyPartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BodyPartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BodyPartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BodyPartMaxAggregateInputType
  }

  export type GetBodyPartAggregateType<T extends BodyPartAggregateArgs> = {
        [P in keyof T & keyof AggregateBodyPart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBodyPart[P]>
      : GetScalarType<T[P], AggregateBodyPart[P]>
  }




  export type BodyPartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BodyPartWhereInput
    orderBy?: BodyPartOrderByWithAggregationInput | BodyPartOrderByWithAggregationInput[]
    by: BodyPartScalarFieldEnum[] | BodyPartScalarFieldEnum
    having?: BodyPartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BodyPartCountAggregateInputType | true
    _avg?: BodyPartAvgAggregateInputType
    _sum?: BodyPartSumAggregateInputType
    _min?: BodyPartMinAggregateInputType
    _max?: BodyPartMaxAggregateInputType
  }

  export type BodyPartGroupByOutputType = {
    id: number
    createdAt: Date
    name: string
    code: string
    _count: BodyPartCountAggregateOutputType | null
    _avg: BodyPartAvgAggregateOutputType | null
    _sum: BodyPartSumAggregateOutputType | null
    _min: BodyPartMinAggregateOutputType | null
    _max: BodyPartMaxAggregateOutputType | null
  }

  type GetBodyPartGroupByPayload<T extends BodyPartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BodyPartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BodyPartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BodyPartGroupByOutputType[P]>
            : GetScalarType<T[P], BodyPartGroupByOutputType[P]>
        }
      >
    >


  export type BodyPartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    code?: boolean
    GymEquipments?: boolean | BodyPart$GymEquipmentsArgs<ExtArgs>
    _count?: boolean | BodyPartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bodyPart"]>

  export type BodyPartSelectScalar = {
    id?: boolean
    createdAt?: boolean
    name?: boolean
    code?: boolean
  }

  export type BodyPartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymEquipments?: boolean | BodyPart$GymEquipmentsArgs<ExtArgs>
    _count?: boolean | BodyPartCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BodyPartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BodyPart"
    objects: {
      GymEquipments: Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      name: string
      code: string
    }, ExtArgs["result"]["bodyPart"]>
    composites: {}
  }


  type BodyPartGetPayload<S extends boolean | null | undefined | BodyPartDefaultArgs> = $Result.GetResult<Prisma.$BodyPartPayload, S>

  type BodyPartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BodyPartFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BodyPartCountAggregateInputType | true
    }

  export interface BodyPartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BodyPart'], meta: { name: 'BodyPart' } }
    /**
     * Find zero or one BodyPart that matches the filter.
     * @param {BodyPartFindUniqueArgs} args - Arguments to find a BodyPart
     * @example
     * // Get one BodyPart
     * const bodyPart = await prisma.bodyPart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BodyPartFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartFindUniqueArgs<ExtArgs>>
    ): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BodyPart that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BodyPartFindUniqueOrThrowArgs} args - Arguments to find a BodyPart
     * @example
     * // Get one BodyPart
     * const bodyPart = await prisma.bodyPart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BodyPartFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BodyPart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartFindFirstArgs} args - Arguments to find a BodyPart
     * @example
     * // Get one BodyPart
     * const bodyPart = await prisma.bodyPart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BodyPartFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartFindFirstArgs<ExtArgs>>
    ): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BodyPart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartFindFirstOrThrowArgs} args - Arguments to find a BodyPart
     * @example
     * // Get one BodyPart
     * const bodyPart = await prisma.bodyPart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BodyPartFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BodyParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BodyParts
     * const bodyParts = await prisma.bodyPart.findMany()
     * 
     * // Get first 10 BodyParts
     * const bodyParts = await prisma.bodyPart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bodyPartWithIdOnly = await prisma.bodyPart.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BodyPartFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BodyPart.
     * @param {BodyPartCreateArgs} args - Arguments to create a BodyPart.
     * @example
     * // Create one BodyPart
     * const BodyPart = await prisma.bodyPart.create({
     *   data: {
     *     // ... data to create a BodyPart
     *   }
     * })
     * 
    **/
    create<T extends BodyPartCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartCreateArgs<ExtArgs>>
    ): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BodyParts.
     *     @param {BodyPartCreateManyArgs} args - Arguments to create many BodyParts.
     *     @example
     *     // Create many BodyParts
     *     const bodyPart = await prisma.bodyPart.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BodyPartCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BodyPart.
     * @param {BodyPartDeleteArgs} args - Arguments to delete one BodyPart.
     * @example
     * // Delete one BodyPart
     * const BodyPart = await prisma.bodyPart.delete({
     *   where: {
     *     // ... filter to delete one BodyPart
     *   }
     * })
     * 
    **/
    delete<T extends BodyPartDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartDeleteArgs<ExtArgs>>
    ): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BodyPart.
     * @param {BodyPartUpdateArgs} args - Arguments to update one BodyPart.
     * @example
     * // Update one BodyPart
     * const bodyPart = await prisma.bodyPart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BodyPartUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartUpdateArgs<ExtArgs>>
    ): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BodyParts.
     * @param {BodyPartDeleteManyArgs} args - Arguments to filter BodyParts to delete.
     * @example
     * // Delete a few BodyParts
     * const { count } = await prisma.bodyPart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BodyPartDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BodyParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BodyParts
     * const bodyPart = await prisma.bodyPart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BodyPartUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BodyPart.
     * @param {BodyPartUpsertArgs} args - Arguments to update or create a BodyPart.
     * @example
     * // Update or create a BodyPart
     * const bodyPart = await prisma.bodyPart.upsert({
     *   create: {
     *     // ... data to create a BodyPart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BodyPart we want to update
     *   }
     * })
    **/
    upsert<T extends BodyPartUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartUpsertArgs<ExtArgs>>
    ): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BodyParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartCountArgs} args - Arguments to filter BodyParts to count.
     * @example
     * // Count the number of BodyParts
     * const count = await prisma.bodyPart.count({
     *   where: {
     *     // ... the filter for the BodyParts we want to count
     *   }
     * })
    **/
    count<T extends BodyPartCountArgs>(
      args?: Subset<T, BodyPartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BodyPartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BodyPart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BodyPartAggregateArgs>(args: Subset<T, BodyPartAggregateArgs>): Prisma.PrismaPromise<GetBodyPartAggregateType<T>>

    /**
     * Group by BodyPart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BodyPartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BodyPartGroupByArgs['orderBy'] }
        : { orderBy?: BodyPartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BodyPartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBodyPartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BodyPart model
   */
  readonly fields: BodyPartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BodyPart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BodyPartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    GymEquipments<T extends BodyPart$GymEquipmentsArgs<ExtArgs> = {}>(args?: Subset<T, BodyPart$GymEquipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BodyPart model
   */ 
  interface BodyPartFieldRefs {
    readonly id: FieldRef<"BodyPart", 'Int'>
    readonly createdAt: FieldRef<"BodyPart", 'DateTime'>
    readonly name: FieldRef<"BodyPart", 'String'>
    readonly code: FieldRef<"BodyPart", 'String'>
  }
    

  // Custom InputTypes

  /**
   * BodyPart findUnique
   */
  export type BodyPartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * Filter, which BodyPart to fetch.
     */
    where: BodyPartWhereUniqueInput
  }


  /**
   * BodyPart findUniqueOrThrow
   */
  export type BodyPartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * Filter, which BodyPart to fetch.
     */
    where: BodyPartWhereUniqueInput
  }


  /**
   * BodyPart findFirst
   */
  export type BodyPartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * Filter, which BodyPart to fetch.
     */
    where?: BodyPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BodyParts to fetch.
     */
    orderBy?: BodyPartOrderByWithRelationInput | BodyPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BodyParts.
     */
    cursor?: BodyPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BodyParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BodyParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BodyParts.
     */
    distinct?: BodyPartScalarFieldEnum | BodyPartScalarFieldEnum[]
  }


  /**
   * BodyPart findFirstOrThrow
   */
  export type BodyPartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * Filter, which BodyPart to fetch.
     */
    where?: BodyPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BodyParts to fetch.
     */
    orderBy?: BodyPartOrderByWithRelationInput | BodyPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BodyParts.
     */
    cursor?: BodyPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BodyParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BodyParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BodyParts.
     */
    distinct?: BodyPartScalarFieldEnum | BodyPartScalarFieldEnum[]
  }


  /**
   * BodyPart findMany
   */
  export type BodyPartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * Filter, which BodyParts to fetch.
     */
    where?: BodyPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BodyParts to fetch.
     */
    orderBy?: BodyPartOrderByWithRelationInput | BodyPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BodyParts.
     */
    cursor?: BodyPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BodyParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BodyParts.
     */
    skip?: number
    distinct?: BodyPartScalarFieldEnum | BodyPartScalarFieldEnum[]
  }


  /**
   * BodyPart create
   */
  export type BodyPartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * The data needed to create a BodyPart.
     */
    data: XOR<BodyPartCreateInput, BodyPartUncheckedCreateInput>
  }


  /**
   * BodyPart createMany
   */
  export type BodyPartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BodyParts.
     */
    data: BodyPartCreateManyInput | BodyPartCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BodyPart update
   */
  export type BodyPartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * The data needed to update a BodyPart.
     */
    data: XOR<BodyPartUpdateInput, BodyPartUncheckedUpdateInput>
    /**
     * Choose, which BodyPart to update.
     */
    where: BodyPartWhereUniqueInput
  }


  /**
   * BodyPart updateMany
   */
  export type BodyPartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BodyParts.
     */
    data: XOR<BodyPartUpdateManyMutationInput, BodyPartUncheckedUpdateManyInput>
    /**
     * Filter which BodyParts to update
     */
    where?: BodyPartWhereInput
  }


  /**
   * BodyPart upsert
   */
  export type BodyPartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * The filter to search for the BodyPart to update in case it exists.
     */
    where: BodyPartWhereUniqueInput
    /**
     * In case the BodyPart found by the `where` argument doesn't exist, create a new BodyPart with this data.
     */
    create: XOR<BodyPartCreateInput, BodyPartUncheckedCreateInput>
    /**
     * In case the BodyPart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BodyPartUpdateInput, BodyPartUncheckedUpdateInput>
  }


  /**
   * BodyPart delete
   */
  export type BodyPartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
    /**
     * Filter which BodyPart to delete.
     */
    where: BodyPartWhereUniqueInput
  }


  /**
   * BodyPart deleteMany
   */
  export type BodyPartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BodyParts to delete
     */
    where?: BodyPartWhereInput
  }


  /**
   * BodyPart.GymEquipments
   */
  export type BodyPart$GymEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    where?: BodyPartsOnGymEquipmentsWhereInput
    orderBy?: BodyPartsOnGymEquipmentsOrderByWithRelationInput | BodyPartsOnGymEquipmentsOrderByWithRelationInput[]
    cursor?: BodyPartsOnGymEquipmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BodyPartsOnGymEquipmentsScalarFieldEnum | BodyPartsOnGymEquipmentsScalarFieldEnum[]
  }


  /**
   * BodyPart without action
   */
  export type BodyPartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPart
     */
    select?: BodyPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartInclude<ExtArgs> | null
  }



  /**
   * Model GymEquipment
   */

  export type AggregateGymEquipment = {
    _count: GymEquipmentCountAggregateOutputType | null
    _avg: GymEquipmentAvgAggregateOutputType | null
    _sum: GymEquipmentSumAggregateOutputType | null
    _min: GymEquipmentMinAggregateOutputType | null
    _max: GymEquipmentMaxAggregateOutputType | null
  }

  export type GymEquipmentAvgAggregateOutputType = {
    id: number | null
  }

  export type GymEquipmentSumAggregateOutputType = {
    id: number | null
  }

  export type GymEquipmentMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    code: string | null
  }

  export type GymEquipmentMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    code: string | null
  }

  export type GymEquipmentCountAggregateOutputType = {
    id: number
    createdAt: number
    name: number
    code: number
    _all: number
  }


  export type GymEquipmentAvgAggregateInputType = {
    id?: true
  }

  export type GymEquipmentSumAggregateInputType = {
    id?: true
  }

  export type GymEquipmentMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    code?: true
  }

  export type GymEquipmentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    code?: true
  }

  export type GymEquipmentCountAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    code?: true
    _all?: true
  }

  export type GymEquipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymEquipment to aggregate.
     */
    where?: GymEquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipments to fetch.
     */
    orderBy?: GymEquipmentOrderByWithRelationInput | GymEquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymEquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GymEquipments
    **/
    _count?: true | GymEquipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymEquipmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymEquipmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymEquipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymEquipmentMaxAggregateInputType
  }

  export type GetGymEquipmentAggregateType<T extends GymEquipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateGymEquipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGymEquipment[P]>
      : GetScalarType<T[P], AggregateGymEquipment[P]>
  }




  export type GymEquipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEquipmentWhereInput
    orderBy?: GymEquipmentOrderByWithAggregationInput | GymEquipmentOrderByWithAggregationInput[]
    by: GymEquipmentScalarFieldEnum[] | GymEquipmentScalarFieldEnum
    having?: GymEquipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymEquipmentCountAggregateInputType | true
    _avg?: GymEquipmentAvgAggregateInputType
    _sum?: GymEquipmentSumAggregateInputType
    _min?: GymEquipmentMinAggregateInputType
    _max?: GymEquipmentMaxAggregateInputType
  }

  export type GymEquipmentGroupByOutputType = {
    id: number
    createdAt: Date
    name: string
    code: string
    _count: GymEquipmentCountAggregateOutputType | null
    _avg: GymEquipmentAvgAggregateOutputType | null
    _sum: GymEquipmentSumAggregateOutputType | null
    _min: GymEquipmentMinAggregateOutputType | null
    _max: GymEquipmentMaxAggregateOutputType | null
  }

  type GetGymEquipmentGroupByPayload<T extends GymEquipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymEquipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymEquipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymEquipmentGroupByOutputType[P]>
            : GetScalarType<T[P], GymEquipmentGroupByOutputType[P]>
        }
      >
    >


  export type GymEquipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    code?: boolean
    BodyParts?: boolean | GymEquipment$BodyPartsArgs<ExtArgs>
    Gyms?: boolean | GymEquipment$GymsArgs<ExtArgs>
    GymEquipmentImage?: boolean | GymEquipment$GymEquipmentImageArgs<ExtArgs>
    _count?: boolean | GymEquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gymEquipment"]>

  export type GymEquipmentSelectScalar = {
    id?: boolean
    createdAt?: boolean
    name?: boolean
    code?: boolean
  }

  export type GymEquipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BodyParts?: boolean | GymEquipment$BodyPartsArgs<ExtArgs>
    Gyms?: boolean | GymEquipment$GymsArgs<ExtArgs>
    GymEquipmentImage?: boolean | GymEquipment$GymEquipmentImageArgs<ExtArgs>
    _count?: boolean | GymEquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GymEquipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GymEquipment"
    objects: {
      BodyParts: Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>[]
      Gyms: Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>[]
      GymEquipmentImage: Prisma.$GymEquipmentImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      name: string
      code: string
    }, ExtArgs["result"]["gymEquipment"]>
    composites: {}
  }


  type GymEquipmentGetPayload<S extends boolean | null | undefined | GymEquipmentDefaultArgs> = $Result.GetResult<Prisma.$GymEquipmentPayload, S>

  type GymEquipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymEquipmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymEquipmentCountAggregateInputType | true
    }

  export interface GymEquipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GymEquipment'], meta: { name: 'GymEquipment' } }
    /**
     * Find zero or one GymEquipment that matches the filter.
     * @param {GymEquipmentFindUniqueArgs} args - Arguments to find a GymEquipment
     * @example
     * // Get one GymEquipment
     * const gymEquipment = await prisma.gymEquipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymEquipmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentFindUniqueArgs<ExtArgs>>
    ): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GymEquipment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymEquipmentFindUniqueOrThrowArgs} args - Arguments to find a GymEquipment
     * @example
     * // Get one GymEquipment
     * const gymEquipment = await prisma.gymEquipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymEquipmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GymEquipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentFindFirstArgs} args - Arguments to find a GymEquipment
     * @example
     * // Get one GymEquipment
     * const gymEquipment = await prisma.gymEquipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymEquipmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentFindFirstArgs<ExtArgs>>
    ): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GymEquipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentFindFirstOrThrowArgs} args - Arguments to find a GymEquipment
     * @example
     * // Get one GymEquipment
     * const gymEquipment = await prisma.gymEquipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymEquipmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GymEquipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GymEquipments
     * const gymEquipments = await prisma.gymEquipment.findMany()
     * 
     * // Get first 10 GymEquipments
     * const gymEquipments = await prisma.gymEquipment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymEquipmentWithIdOnly = await prisma.gymEquipment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymEquipmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GymEquipment.
     * @param {GymEquipmentCreateArgs} args - Arguments to create a GymEquipment.
     * @example
     * // Create one GymEquipment
     * const GymEquipment = await prisma.gymEquipment.create({
     *   data: {
     *     // ... data to create a GymEquipment
     *   }
     * })
     * 
    **/
    create<T extends GymEquipmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentCreateArgs<ExtArgs>>
    ): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GymEquipments.
     *     @param {GymEquipmentCreateManyArgs} args - Arguments to create many GymEquipments.
     *     @example
     *     // Create many GymEquipments
     *     const gymEquipment = await prisma.gymEquipment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymEquipmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GymEquipment.
     * @param {GymEquipmentDeleteArgs} args - Arguments to delete one GymEquipment.
     * @example
     * // Delete one GymEquipment
     * const GymEquipment = await prisma.gymEquipment.delete({
     *   where: {
     *     // ... filter to delete one GymEquipment
     *   }
     * })
     * 
    **/
    delete<T extends GymEquipmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentDeleteArgs<ExtArgs>>
    ): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GymEquipment.
     * @param {GymEquipmentUpdateArgs} args - Arguments to update one GymEquipment.
     * @example
     * // Update one GymEquipment
     * const gymEquipment = await prisma.gymEquipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymEquipmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUpdateArgs<ExtArgs>>
    ): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GymEquipments.
     * @param {GymEquipmentDeleteManyArgs} args - Arguments to filter GymEquipments to delete.
     * @example
     * // Delete a few GymEquipments
     * const { count } = await prisma.gymEquipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymEquipmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GymEquipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GymEquipments
     * const gymEquipment = await prisma.gymEquipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymEquipmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GymEquipment.
     * @param {GymEquipmentUpsertArgs} args - Arguments to update or create a GymEquipment.
     * @example
     * // Update or create a GymEquipment
     * const gymEquipment = await prisma.gymEquipment.upsert({
     *   create: {
     *     // ... data to create a GymEquipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GymEquipment we want to update
     *   }
     * })
    **/
    upsert<T extends GymEquipmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUpsertArgs<ExtArgs>>
    ): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GymEquipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentCountArgs} args - Arguments to filter GymEquipments to count.
     * @example
     * // Count the number of GymEquipments
     * const count = await prisma.gymEquipment.count({
     *   where: {
     *     // ... the filter for the GymEquipments we want to count
     *   }
     * })
    **/
    count<T extends GymEquipmentCountArgs>(
      args?: Subset<T, GymEquipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymEquipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GymEquipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymEquipmentAggregateArgs>(args: Subset<T, GymEquipmentAggregateArgs>): Prisma.PrismaPromise<GetGymEquipmentAggregateType<T>>

    /**
     * Group by GymEquipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymEquipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymEquipmentGroupByArgs['orderBy'] }
        : { orderBy?: GymEquipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymEquipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymEquipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GymEquipment model
   */
  readonly fields: GymEquipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GymEquipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymEquipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    BodyParts<T extends GymEquipment$BodyPartsArgs<ExtArgs> = {}>(args?: Subset<T, GymEquipment$BodyPartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Gyms<T extends GymEquipment$GymsArgs<ExtArgs> = {}>(args?: Subset<T, GymEquipment$GymsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findMany'> | Null>;

    GymEquipmentImage<T extends GymEquipment$GymEquipmentImageArgs<ExtArgs> = {}>(args?: Subset<T, GymEquipment$GymEquipmentImageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GymEquipment model
   */ 
  interface GymEquipmentFieldRefs {
    readonly id: FieldRef<"GymEquipment", 'Int'>
    readonly createdAt: FieldRef<"GymEquipment", 'DateTime'>
    readonly name: FieldRef<"GymEquipment", 'String'>
    readonly code: FieldRef<"GymEquipment", 'String'>
  }
    

  // Custom InputTypes

  /**
   * GymEquipment findUnique
   */
  export type GymEquipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipment to fetch.
     */
    where: GymEquipmentWhereUniqueInput
  }


  /**
   * GymEquipment findUniqueOrThrow
   */
  export type GymEquipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipment to fetch.
     */
    where: GymEquipmentWhereUniqueInput
  }


  /**
   * GymEquipment findFirst
   */
  export type GymEquipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipment to fetch.
     */
    where?: GymEquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipments to fetch.
     */
    orderBy?: GymEquipmentOrderByWithRelationInput | GymEquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymEquipments.
     */
    cursor?: GymEquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymEquipments.
     */
    distinct?: GymEquipmentScalarFieldEnum | GymEquipmentScalarFieldEnum[]
  }


  /**
   * GymEquipment findFirstOrThrow
   */
  export type GymEquipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipment to fetch.
     */
    where?: GymEquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipments to fetch.
     */
    orderBy?: GymEquipmentOrderByWithRelationInput | GymEquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymEquipments.
     */
    cursor?: GymEquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymEquipments.
     */
    distinct?: GymEquipmentScalarFieldEnum | GymEquipmentScalarFieldEnum[]
  }


  /**
   * GymEquipment findMany
   */
  export type GymEquipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipments to fetch.
     */
    where?: GymEquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipments to fetch.
     */
    orderBy?: GymEquipmentOrderByWithRelationInput | GymEquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GymEquipments.
     */
    cursor?: GymEquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipments.
     */
    skip?: number
    distinct?: GymEquipmentScalarFieldEnum | GymEquipmentScalarFieldEnum[]
  }


  /**
   * GymEquipment create
   */
  export type GymEquipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a GymEquipment.
     */
    data: XOR<GymEquipmentCreateInput, GymEquipmentUncheckedCreateInput>
  }


  /**
   * GymEquipment createMany
   */
  export type GymEquipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GymEquipments.
     */
    data: GymEquipmentCreateManyInput | GymEquipmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GymEquipment update
   */
  export type GymEquipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a GymEquipment.
     */
    data: XOR<GymEquipmentUpdateInput, GymEquipmentUncheckedUpdateInput>
    /**
     * Choose, which GymEquipment to update.
     */
    where: GymEquipmentWhereUniqueInput
  }


  /**
   * GymEquipment updateMany
   */
  export type GymEquipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GymEquipments.
     */
    data: XOR<GymEquipmentUpdateManyMutationInput, GymEquipmentUncheckedUpdateManyInput>
    /**
     * Filter which GymEquipments to update
     */
    where?: GymEquipmentWhereInput
  }


  /**
   * GymEquipment upsert
   */
  export type GymEquipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the GymEquipment to update in case it exists.
     */
    where: GymEquipmentWhereUniqueInput
    /**
     * In case the GymEquipment found by the `where` argument doesn't exist, create a new GymEquipment with this data.
     */
    create: XOR<GymEquipmentCreateInput, GymEquipmentUncheckedCreateInput>
    /**
     * In case the GymEquipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymEquipmentUpdateInput, GymEquipmentUncheckedUpdateInput>
  }


  /**
   * GymEquipment delete
   */
  export type GymEquipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
    /**
     * Filter which GymEquipment to delete.
     */
    where: GymEquipmentWhereUniqueInput
  }


  /**
   * GymEquipment deleteMany
   */
  export type GymEquipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymEquipments to delete
     */
    where?: GymEquipmentWhereInput
  }


  /**
   * GymEquipment.BodyParts
   */
  export type GymEquipment$BodyPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    where?: BodyPartsOnGymEquipmentsWhereInput
    orderBy?: BodyPartsOnGymEquipmentsOrderByWithRelationInput | BodyPartsOnGymEquipmentsOrderByWithRelationInput[]
    cursor?: BodyPartsOnGymEquipmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BodyPartsOnGymEquipmentsScalarFieldEnum | BodyPartsOnGymEquipmentsScalarFieldEnum[]
  }


  /**
   * GymEquipment.Gyms
   */
  export type GymEquipment$GymsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    where?: GymEuquipmentsOnGymsWhereInput
    orderBy?: GymEuquipmentsOnGymsOrderByWithRelationInput | GymEuquipmentsOnGymsOrderByWithRelationInput[]
    cursor?: GymEuquipmentsOnGymsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymEuquipmentsOnGymsScalarFieldEnum | GymEuquipmentsOnGymsScalarFieldEnum[]
  }


  /**
   * GymEquipment.GymEquipmentImage
   */
  export type GymEquipment$GymEquipmentImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    where?: GymEquipmentImageWhereInput
    orderBy?: GymEquipmentImageOrderByWithRelationInput | GymEquipmentImageOrderByWithRelationInput[]
    cursor?: GymEquipmentImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymEquipmentImageScalarFieldEnum | GymEquipmentImageScalarFieldEnum[]
  }


  /**
   * GymEquipment without action
   */
  export type GymEquipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipment
     */
    select?: GymEquipmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentInclude<ExtArgs> | null
  }



  /**
   * Model GymEquipmentImage
   */

  export type AggregateGymEquipmentImage = {
    _count: GymEquipmentImageCountAggregateOutputType | null
    _avg: GymEquipmentImageAvgAggregateOutputType | null
    _sum: GymEquipmentImageSumAggregateOutputType | null
    _min: GymEquipmentImageMinAggregateOutputType | null
    _max: GymEquipmentImageMaxAggregateOutputType | null
  }

  export type GymEquipmentImageAvgAggregateOutputType = {
    id: number | null
    width: number | null
    height: number | null
    size: number | null
    gymEquipmentId: number | null
  }

  export type GymEquipmentImageSumAggregateOutputType = {
    id: number | null
    width: number | null
    height: number | null
    size: number | null
    gymEquipmentId: number | null
  }

  export type GymEquipmentImageMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    url: string | null
    width: number | null
    height: number | null
    size: number | null
    isThumb: boolean | null
    gymEquipmentId: number | null
  }

  export type GymEquipmentImageMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    url: string | null
    width: number | null
    height: number | null
    size: number | null
    isThumb: boolean | null
    gymEquipmentId: number | null
  }

  export type GymEquipmentImageCountAggregateOutputType = {
    id: number
    createdAt: number
    url: number
    width: number
    height: number
    size: number
    isThumb: number
    gymEquipmentId: number
    _all: number
  }


  export type GymEquipmentImageAvgAggregateInputType = {
    id?: true
    width?: true
    height?: true
    size?: true
    gymEquipmentId?: true
  }

  export type GymEquipmentImageSumAggregateInputType = {
    id?: true
    width?: true
    height?: true
    size?: true
    gymEquipmentId?: true
  }

  export type GymEquipmentImageMinAggregateInputType = {
    id?: true
    createdAt?: true
    url?: true
    width?: true
    height?: true
    size?: true
    isThumb?: true
    gymEquipmentId?: true
  }

  export type GymEquipmentImageMaxAggregateInputType = {
    id?: true
    createdAt?: true
    url?: true
    width?: true
    height?: true
    size?: true
    isThumb?: true
    gymEquipmentId?: true
  }

  export type GymEquipmentImageCountAggregateInputType = {
    id?: true
    createdAt?: true
    url?: true
    width?: true
    height?: true
    size?: true
    isThumb?: true
    gymEquipmentId?: true
    _all?: true
  }

  export type GymEquipmentImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymEquipmentImage to aggregate.
     */
    where?: GymEquipmentImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipmentImages to fetch.
     */
    orderBy?: GymEquipmentImageOrderByWithRelationInput | GymEquipmentImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymEquipmentImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipmentImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipmentImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GymEquipmentImages
    **/
    _count?: true | GymEquipmentImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymEquipmentImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymEquipmentImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymEquipmentImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymEquipmentImageMaxAggregateInputType
  }

  export type GetGymEquipmentImageAggregateType<T extends GymEquipmentImageAggregateArgs> = {
        [P in keyof T & keyof AggregateGymEquipmentImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGymEquipmentImage[P]>
      : GetScalarType<T[P], AggregateGymEquipmentImage[P]>
  }




  export type GymEquipmentImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEquipmentImageWhereInput
    orderBy?: GymEquipmentImageOrderByWithAggregationInput | GymEquipmentImageOrderByWithAggregationInput[]
    by: GymEquipmentImageScalarFieldEnum[] | GymEquipmentImageScalarFieldEnum
    having?: GymEquipmentImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymEquipmentImageCountAggregateInputType | true
    _avg?: GymEquipmentImageAvgAggregateInputType
    _sum?: GymEquipmentImageSumAggregateInputType
    _min?: GymEquipmentImageMinAggregateInputType
    _max?: GymEquipmentImageMaxAggregateInputType
  }

  export type GymEquipmentImageGroupByOutputType = {
    id: number
    createdAt: Date
    url: string
    width: number
    height: number
    size: number
    isThumb: boolean
    gymEquipmentId: number
    _count: GymEquipmentImageCountAggregateOutputType | null
    _avg: GymEquipmentImageAvgAggregateOutputType | null
    _sum: GymEquipmentImageSumAggregateOutputType | null
    _min: GymEquipmentImageMinAggregateOutputType | null
    _max: GymEquipmentImageMaxAggregateOutputType | null
  }

  type GetGymEquipmentImageGroupByPayload<T extends GymEquipmentImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymEquipmentImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymEquipmentImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymEquipmentImageGroupByOutputType[P]>
            : GetScalarType<T[P], GymEquipmentImageGroupByOutputType[P]>
        }
      >
    >


  export type GymEquipmentImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    url?: boolean
    width?: boolean
    height?: boolean
    size?: boolean
    isThumb?: boolean
    gymEquipmentId?: boolean
    GymEquipment?: boolean | GymEquipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gymEquipmentImage"]>

  export type GymEquipmentImageSelectScalar = {
    id?: boolean
    createdAt?: boolean
    url?: boolean
    width?: boolean
    height?: boolean
    size?: boolean
    isThumb?: boolean
    gymEquipmentId?: boolean
  }

  export type GymEquipmentImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymEquipment?: boolean | GymEquipmentDefaultArgs<ExtArgs>
  }


  export type $GymEquipmentImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GymEquipmentImage"
    objects: {
      GymEquipment: Prisma.$GymEquipmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      url: string
      width: number
      height: number
      size: number
      isThumb: boolean
      gymEquipmentId: number
    }, ExtArgs["result"]["gymEquipmentImage"]>
    composites: {}
  }


  type GymEquipmentImageGetPayload<S extends boolean | null | undefined | GymEquipmentImageDefaultArgs> = $Result.GetResult<Prisma.$GymEquipmentImagePayload, S>

  type GymEquipmentImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymEquipmentImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymEquipmentImageCountAggregateInputType | true
    }

  export interface GymEquipmentImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GymEquipmentImage'], meta: { name: 'GymEquipmentImage' } }
    /**
     * Find zero or one GymEquipmentImage that matches the filter.
     * @param {GymEquipmentImageFindUniqueArgs} args - Arguments to find a GymEquipmentImage
     * @example
     * // Get one GymEquipmentImage
     * const gymEquipmentImage = await prisma.gymEquipmentImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymEquipmentImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentImageFindUniqueArgs<ExtArgs>>
    ): Prisma__GymEquipmentImageClient<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GymEquipmentImage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymEquipmentImageFindUniqueOrThrowArgs} args - Arguments to find a GymEquipmentImage
     * @example
     * // Get one GymEquipmentImage
     * const gymEquipmentImage = await prisma.gymEquipmentImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymEquipmentImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymEquipmentImageClient<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GymEquipmentImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentImageFindFirstArgs} args - Arguments to find a GymEquipmentImage
     * @example
     * // Get one GymEquipmentImage
     * const gymEquipmentImage = await prisma.gymEquipmentImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymEquipmentImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentImageFindFirstArgs<ExtArgs>>
    ): Prisma__GymEquipmentImageClient<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GymEquipmentImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentImageFindFirstOrThrowArgs} args - Arguments to find a GymEquipmentImage
     * @example
     * // Get one GymEquipmentImage
     * const gymEquipmentImage = await prisma.gymEquipmentImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymEquipmentImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymEquipmentImageClient<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GymEquipmentImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GymEquipmentImages
     * const gymEquipmentImages = await prisma.gymEquipmentImage.findMany()
     * 
     * // Get first 10 GymEquipmentImages
     * const gymEquipmentImages = await prisma.gymEquipmentImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymEquipmentImageWithIdOnly = await prisma.gymEquipmentImage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymEquipmentImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GymEquipmentImage.
     * @param {GymEquipmentImageCreateArgs} args - Arguments to create a GymEquipmentImage.
     * @example
     * // Create one GymEquipmentImage
     * const GymEquipmentImage = await prisma.gymEquipmentImage.create({
     *   data: {
     *     // ... data to create a GymEquipmentImage
     *   }
     * })
     * 
    **/
    create<T extends GymEquipmentImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentImageCreateArgs<ExtArgs>>
    ): Prisma__GymEquipmentImageClient<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GymEquipmentImages.
     *     @param {GymEquipmentImageCreateManyArgs} args - Arguments to create many GymEquipmentImages.
     *     @example
     *     // Create many GymEquipmentImages
     *     const gymEquipmentImage = await prisma.gymEquipmentImage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymEquipmentImageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentImageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GymEquipmentImage.
     * @param {GymEquipmentImageDeleteArgs} args - Arguments to delete one GymEquipmentImage.
     * @example
     * // Delete one GymEquipmentImage
     * const GymEquipmentImage = await prisma.gymEquipmentImage.delete({
     *   where: {
     *     // ... filter to delete one GymEquipmentImage
     *   }
     * })
     * 
    **/
    delete<T extends GymEquipmentImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentImageDeleteArgs<ExtArgs>>
    ): Prisma__GymEquipmentImageClient<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GymEquipmentImage.
     * @param {GymEquipmentImageUpdateArgs} args - Arguments to update one GymEquipmentImage.
     * @example
     * // Update one GymEquipmentImage
     * const gymEquipmentImage = await prisma.gymEquipmentImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymEquipmentImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentImageUpdateArgs<ExtArgs>>
    ): Prisma__GymEquipmentImageClient<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GymEquipmentImages.
     * @param {GymEquipmentImageDeleteManyArgs} args - Arguments to filter GymEquipmentImages to delete.
     * @example
     * // Delete a few GymEquipmentImages
     * const { count } = await prisma.gymEquipmentImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymEquipmentImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GymEquipmentImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GymEquipmentImages
     * const gymEquipmentImage = await prisma.gymEquipmentImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymEquipmentImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GymEquipmentImage.
     * @param {GymEquipmentImageUpsertArgs} args - Arguments to update or create a GymEquipmentImage.
     * @example
     * // Update or create a GymEquipmentImage
     * const gymEquipmentImage = await prisma.gymEquipmentImage.upsert({
     *   create: {
     *     // ... data to create a GymEquipmentImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GymEquipmentImage we want to update
     *   }
     * })
    **/
    upsert<T extends GymEquipmentImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentImageUpsertArgs<ExtArgs>>
    ): Prisma__GymEquipmentImageClient<$Result.GetResult<Prisma.$GymEquipmentImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GymEquipmentImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentImageCountArgs} args - Arguments to filter GymEquipmentImages to count.
     * @example
     * // Count the number of GymEquipmentImages
     * const count = await prisma.gymEquipmentImage.count({
     *   where: {
     *     // ... the filter for the GymEquipmentImages we want to count
     *   }
     * })
    **/
    count<T extends GymEquipmentImageCountArgs>(
      args?: Subset<T, GymEquipmentImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymEquipmentImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GymEquipmentImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymEquipmentImageAggregateArgs>(args: Subset<T, GymEquipmentImageAggregateArgs>): Prisma.PrismaPromise<GetGymEquipmentImageAggregateType<T>>

    /**
     * Group by GymEquipmentImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymEquipmentImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymEquipmentImageGroupByArgs['orderBy'] }
        : { orderBy?: GymEquipmentImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymEquipmentImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymEquipmentImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GymEquipmentImage model
   */
  readonly fields: GymEquipmentImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GymEquipmentImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymEquipmentImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    GymEquipment<T extends GymEquipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymEquipmentDefaultArgs<ExtArgs>>): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GymEquipmentImage model
   */ 
  interface GymEquipmentImageFieldRefs {
    readonly id: FieldRef<"GymEquipmentImage", 'Int'>
    readonly createdAt: FieldRef<"GymEquipmentImage", 'DateTime'>
    readonly url: FieldRef<"GymEquipmentImage", 'String'>
    readonly width: FieldRef<"GymEquipmentImage", 'Int'>
    readonly height: FieldRef<"GymEquipmentImage", 'Int'>
    readonly size: FieldRef<"GymEquipmentImage", 'Int'>
    readonly isThumb: FieldRef<"GymEquipmentImage", 'Boolean'>
    readonly gymEquipmentId: FieldRef<"GymEquipmentImage", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * GymEquipmentImage findUnique
   */
  export type GymEquipmentImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentImage to fetch.
     */
    where: GymEquipmentImageWhereUniqueInput
  }


  /**
   * GymEquipmentImage findUniqueOrThrow
   */
  export type GymEquipmentImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentImage to fetch.
     */
    where: GymEquipmentImageWhereUniqueInput
  }


  /**
   * GymEquipmentImage findFirst
   */
  export type GymEquipmentImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentImage to fetch.
     */
    where?: GymEquipmentImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipmentImages to fetch.
     */
    orderBy?: GymEquipmentImageOrderByWithRelationInput | GymEquipmentImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymEquipmentImages.
     */
    cursor?: GymEquipmentImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipmentImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipmentImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymEquipmentImages.
     */
    distinct?: GymEquipmentImageScalarFieldEnum | GymEquipmentImageScalarFieldEnum[]
  }


  /**
   * GymEquipmentImage findFirstOrThrow
   */
  export type GymEquipmentImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentImage to fetch.
     */
    where?: GymEquipmentImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipmentImages to fetch.
     */
    orderBy?: GymEquipmentImageOrderByWithRelationInput | GymEquipmentImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymEquipmentImages.
     */
    cursor?: GymEquipmentImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipmentImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipmentImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymEquipmentImages.
     */
    distinct?: GymEquipmentImageScalarFieldEnum | GymEquipmentImageScalarFieldEnum[]
  }


  /**
   * GymEquipmentImage findMany
   */
  export type GymEquipmentImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentImages to fetch.
     */
    where?: GymEquipmentImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipmentImages to fetch.
     */
    orderBy?: GymEquipmentImageOrderByWithRelationInput | GymEquipmentImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GymEquipmentImages.
     */
    cursor?: GymEquipmentImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipmentImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipmentImages.
     */
    skip?: number
    distinct?: GymEquipmentImageScalarFieldEnum | GymEquipmentImageScalarFieldEnum[]
  }


  /**
   * GymEquipmentImage create
   */
  export type GymEquipmentImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * The data needed to create a GymEquipmentImage.
     */
    data: XOR<GymEquipmentImageCreateInput, GymEquipmentImageUncheckedCreateInput>
  }


  /**
   * GymEquipmentImage createMany
   */
  export type GymEquipmentImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GymEquipmentImages.
     */
    data: GymEquipmentImageCreateManyInput | GymEquipmentImageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GymEquipmentImage update
   */
  export type GymEquipmentImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * The data needed to update a GymEquipmentImage.
     */
    data: XOR<GymEquipmentImageUpdateInput, GymEquipmentImageUncheckedUpdateInput>
    /**
     * Choose, which GymEquipmentImage to update.
     */
    where: GymEquipmentImageWhereUniqueInput
  }


  /**
   * GymEquipmentImage updateMany
   */
  export type GymEquipmentImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GymEquipmentImages.
     */
    data: XOR<GymEquipmentImageUpdateManyMutationInput, GymEquipmentImageUncheckedUpdateManyInput>
    /**
     * Filter which GymEquipmentImages to update
     */
    where?: GymEquipmentImageWhereInput
  }


  /**
   * GymEquipmentImage upsert
   */
  export type GymEquipmentImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * The filter to search for the GymEquipmentImage to update in case it exists.
     */
    where: GymEquipmentImageWhereUniqueInput
    /**
     * In case the GymEquipmentImage found by the `where` argument doesn't exist, create a new GymEquipmentImage with this data.
     */
    create: XOR<GymEquipmentImageCreateInput, GymEquipmentImageUncheckedCreateInput>
    /**
     * In case the GymEquipmentImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymEquipmentImageUpdateInput, GymEquipmentImageUncheckedUpdateInput>
  }


  /**
   * GymEquipmentImage delete
   */
  export type GymEquipmentImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
    /**
     * Filter which GymEquipmentImage to delete.
     */
    where: GymEquipmentImageWhereUniqueInput
  }


  /**
   * GymEquipmentImage deleteMany
   */
  export type GymEquipmentImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymEquipmentImages to delete
     */
    where?: GymEquipmentImageWhereInput
  }


  /**
   * GymEquipmentImage without action
   */
  export type GymEquipmentImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentImage
     */
    select?: GymEquipmentImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentImageInclude<ExtArgs> | null
  }



  /**
   * Model BodyPartsOnGymEquipments
   */

  export type AggregateBodyPartsOnGymEquipments = {
    _count: BodyPartsOnGymEquipmentsCountAggregateOutputType | null
    _avg: BodyPartsOnGymEquipmentsAvgAggregateOutputType | null
    _sum: BodyPartsOnGymEquipmentsSumAggregateOutputType | null
    _min: BodyPartsOnGymEquipmentsMinAggregateOutputType | null
    _max: BodyPartsOnGymEquipmentsMaxAggregateOutputType | null
  }

  export type BodyPartsOnGymEquipmentsAvgAggregateOutputType = {
    gymEquipmentId: number | null
    bodyPartId: number | null
  }

  export type BodyPartsOnGymEquipmentsSumAggregateOutputType = {
    gymEquipmentId: number | null
    bodyPartId: number | null
  }

  export type BodyPartsOnGymEquipmentsMinAggregateOutputType = {
    gymEquipmentId: number | null
    bodyPartId: number | null
    assignedAt: Date | null
  }

  export type BodyPartsOnGymEquipmentsMaxAggregateOutputType = {
    gymEquipmentId: number | null
    bodyPartId: number | null
    assignedAt: Date | null
  }

  export type BodyPartsOnGymEquipmentsCountAggregateOutputType = {
    gymEquipmentId: number
    bodyPartId: number
    assignedAt: number
    _all: number
  }


  export type BodyPartsOnGymEquipmentsAvgAggregateInputType = {
    gymEquipmentId?: true
    bodyPartId?: true
  }

  export type BodyPartsOnGymEquipmentsSumAggregateInputType = {
    gymEquipmentId?: true
    bodyPartId?: true
  }

  export type BodyPartsOnGymEquipmentsMinAggregateInputType = {
    gymEquipmentId?: true
    bodyPartId?: true
    assignedAt?: true
  }

  export type BodyPartsOnGymEquipmentsMaxAggregateInputType = {
    gymEquipmentId?: true
    bodyPartId?: true
    assignedAt?: true
  }

  export type BodyPartsOnGymEquipmentsCountAggregateInputType = {
    gymEquipmentId?: true
    bodyPartId?: true
    assignedAt?: true
    _all?: true
  }

  export type BodyPartsOnGymEquipmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BodyPartsOnGymEquipments to aggregate.
     */
    where?: BodyPartsOnGymEquipmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BodyPartsOnGymEquipments to fetch.
     */
    orderBy?: BodyPartsOnGymEquipmentsOrderByWithRelationInput | BodyPartsOnGymEquipmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BodyPartsOnGymEquipmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BodyPartsOnGymEquipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BodyPartsOnGymEquipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BodyPartsOnGymEquipments
    **/
    _count?: true | BodyPartsOnGymEquipmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BodyPartsOnGymEquipmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BodyPartsOnGymEquipmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BodyPartsOnGymEquipmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BodyPartsOnGymEquipmentsMaxAggregateInputType
  }

  export type GetBodyPartsOnGymEquipmentsAggregateType<T extends BodyPartsOnGymEquipmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateBodyPartsOnGymEquipments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBodyPartsOnGymEquipments[P]>
      : GetScalarType<T[P], AggregateBodyPartsOnGymEquipments[P]>
  }




  export type BodyPartsOnGymEquipmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BodyPartsOnGymEquipmentsWhereInput
    orderBy?: BodyPartsOnGymEquipmentsOrderByWithAggregationInput | BodyPartsOnGymEquipmentsOrderByWithAggregationInput[]
    by: BodyPartsOnGymEquipmentsScalarFieldEnum[] | BodyPartsOnGymEquipmentsScalarFieldEnum
    having?: BodyPartsOnGymEquipmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BodyPartsOnGymEquipmentsCountAggregateInputType | true
    _avg?: BodyPartsOnGymEquipmentsAvgAggregateInputType
    _sum?: BodyPartsOnGymEquipmentsSumAggregateInputType
    _min?: BodyPartsOnGymEquipmentsMinAggregateInputType
    _max?: BodyPartsOnGymEquipmentsMaxAggregateInputType
  }

  export type BodyPartsOnGymEquipmentsGroupByOutputType = {
    gymEquipmentId: number
    bodyPartId: number
    assignedAt: Date
    _count: BodyPartsOnGymEquipmentsCountAggregateOutputType | null
    _avg: BodyPartsOnGymEquipmentsAvgAggregateOutputType | null
    _sum: BodyPartsOnGymEquipmentsSumAggregateOutputType | null
    _min: BodyPartsOnGymEquipmentsMinAggregateOutputType | null
    _max: BodyPartsOnGymEquipmentsMaxAggregateOutputType | null
  }

  type GetBodyPartsOnGymEquipmentsGroupByPayload<T extends BodyPartsOnGymEquipmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BodyPartsOnGymEquipmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BodyPartsOnGymEquipmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BodyPartsOnGymEquipmentsGroupByOutputType[P]>
            : GetScalarType<T[P], BodyPartsOnGymEquipmentsGroupByOutputType[P]>
        }
      >
    >


  export type BodyPartsOnGymEquipmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    gymEquipmentId?: boolean
    bodyPartId?: boolean
    assignedAt?: boolean
    GymEquipment?: boolean | GymEquipmentDefaultArgs<ExtArgs>
    BodyPart?: boolean | BodyPartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bodyPartsOnGymEquipments"]>

  export type BodyPartsOnGymEquipmentsSelectScalar = {
    gymEquipmentId?: boolean
    bodyPartId?: boolean
    assignedAt?: boolean
  }

  export type BodyPartsOnGymEquipmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymEquipment?: boolean | GymEquipmentDefaultArgs<ExtArgs>
    BodyPart?: boolean | BodyPartDefaultArgs<ExtArgs>
  }


  export type $BodyPartsOnGymEquipmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BodyPartsOnGymEquipments"
    objects: {
      GymEquipment: Prisma.$GymEquipmentPayload<ExtArgs>
      BodyPart: Prisma.$BodyPartPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      gymEquipmentId: number
      bodyPartId: number
      assignedAt: Date
    }, ExtArgs["result"]["bodyPartsOnGymEquipments"]>
    composites: {}
  }


  type BodyPartsOnGymEquipmentsGetPayload<S extends boolean | null | undefined | BodyPartsOnGymEquipmentsDefaultArgs> = $Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload, S>

  type BodyPartsOnGymEquipmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BodyPartsOnGymEquipmentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BodyPartsOnGymEquipmentsCountAggregateInputType | true
    }

  export interface BodyPartsOnGymEquipmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BodyPartsOnGymEquipments'], meta: { name: 'BodyPartsOnGymEquipments' } }
    /**
     * Find zero or one BodyPartsOnGymEquipments that matches the filter.
     * @param {BodyPartsOnGymEquipmentsFindUniqueArgs} args - Arguments to find a BodyPartsOnGymEquipments
     * @example
     * // Get one BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BodyPartsOnGymEquipmentsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartsOnGymEquipmentsFindUniqueArgs<ExtArgs>>
    ): Prisma__BodyPartsOnGymEquipmentsClient<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BodyPartsOnGymEquipments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BodyPartsOnGymEquipmentsFindUniqueOrThrowArgs} args - Arguments to find a BodyPartsOnGymEquipments
     * @example
     * // Get one BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BodyPartsOnGymEquipmentsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartsOnGymEquipmentsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BodyPartsOnGymEquipmentsClient<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BodyPartsOnGymEquipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartsOnGymEquipmentsFindFirstArgs} args - Arguments to find a BodyPartsOnGymEquipments
     * @example
     * // Get one BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BodyPartsOnGymEquipmentsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartsOnGymEquipmentsFindFirstArgs<ExtArgs>>
    ): Prisma__BodyPartsOnGymEquipmentsClient<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BodyPartsOnGymEquipments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartsOnGymEquipmentsFindFirstOrThrowArgs} args - Arguments to find a BodyPartsOnGymEquipments
     * @example
     * // Get one BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BodyPartsOnGymEquipmentsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartsOnGymEquipmentsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BodyPartsOnGymEquipmentsClient<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BodyPartsOnGymEquipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartsOnGymEquipmentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.findMany()
     * 
     * // Get first 10 BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.findMany({ take: 10 })
     * 
     * // Only select the `gymEquipmentId`
     * const bodyPartsOnGymEquipmentsWithGymEquipmentIdOnly = await prisma.bodyPartsOnGymEquipments.findMany({ select: { gymEquipmentId: true } })
     * 
    **/
    findMany<T extends BodyPartsOnGymEquipmentsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartsOnGymEquipmentsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BodyPartsOnGymEquipments.
     * @param {BodyPartsOnGymEquipmentsCreateArgs} args - Arguments to create a BodyPartsOnGymEquipments.
     * @example
     * // Create one BodyPartsOnGymEquipments
     * const BodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.create({
     *   data: {
     *     // ... data to create a BodyPartsOnGymEquipments
     *   }
     * })
     * 
    **/
    create<T extends BodyPartsOnGymEquipmentsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartsOnGymEquipmentsCreateArgs<ExtArgs>>
    ): Prisma__BodyPartsOnGymEquipmentsClient<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BodyPartsOnGymEquipments.
     *     @param {BodyPartsOnGymEquipmentsCreateManyArgs} args - Arguments to create many BodyPartsOnGymEquipments.
     *     @example
     *     // Create many BodyPartsOnGymEquipments
     *     const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BodyPartsOnGymEquipmentsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartsOnGymEquipmentsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BodyPartsOnGymEquipments.
     * @param {BodyPartsOnGymEquipmentsDeleteArgs} args - Arguments to delete one BodyPartsOnGymEquipments.
     * @example
     * // Delete one BodyPartsOnGymEquipments
     * const BodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.delete({
     *   where: {
     *     // ... filter to delete one BodyPartsOnGymEquipments
     *   }
     * })
     * 
    **/
    delete<T extends BodyPartsOnGymEquipmentsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartsOnGymEquipmentsDeleteArgs<ExtArgs>>
    ): Prisma__BodyPartsOnGymEquipmentsClient<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BodyPartsOnGymEquipments.
     * @param {BodyPartsOnGymEquipmentsUpdateArgs} args - Arguments to update one BodyPartsOnGymEquipments.
     * @example
     * // Update one BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BodyPartsOnGymEquipmentsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartsOnGymEquipmentsUpdateArgs<ExtArgs>>
    ): Prisma__BodyPartsOnGymEquipmentsClient<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BodyPartsOnGymEquipments.
     * @param {BodyPartsOnGymEquipmentsDeleteManyArgs} args - Arguments to filter BodyPartsOnGymEquipments to delete.
     * @example
     * // Delete a few BodyPartsOnGymEquipments
     * const { count } = await prisma.bodyPartsOnGymEquipments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BodyPartsOnGymEquipmentsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BodyPartsOnGymEquipmentsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BodyPartsOnGymEquipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartsOnGymEquipmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BodyPartsOnGymEquipmentsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartsOnGymEquipmentsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BodyPartsOnGymEquipments.
     * @param {BodyPartsOnGymEquipmentsUpsertArgs} args - Arguments to update or create a BodyPartsOnGymEquipments.
     * @example
     * // Update or create a BodyPartsOnGymEquipments
     * const bodyPartsOnGymEquipments = await prisma.bodyPartsOnGymEquipments.upsert({
     *   create: {
     *     // ... data to create a BodyPartsOnGymEquipments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BodyPartsOnGymEquipments we want to update
     *   }
     * })
    **/
    upsert<T extends BodyPartsOnGymEquipmentsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BodyPartsOnGymEquipmentsUpsertArgs<ExtArgs>>
    ): Prisma__BodyPartsOnGymEquipmentsClient<$Result.GetResult<Prisma.$BodyPartsOnGymEquipmentsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BodyPartsOnGymEquipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartsOnGymEquipmentsCountArgs} args - Arguments to filter BodyPartsOnGymEquipments to count.
     * @example
     * // Count the number of BodyPartsOnGymEquipments
     * const count = await prisma.bodyPartsOnGymEquipments.count({
     *   where: {
     *     // ... the filter for the BodyPartsOnGymEquipments we want to count
     *   }
     * })
    **/
    count<T extends BodyPartsOnGymEquipmentsCountArgs>(
      args?: Subset<T, BodyPartsOnGymEquipmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BodyPartsOnGymEquipmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BodyPartsOnGymEquipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartsOnGymEquipmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BodyPartsOnGymEquipmentsAggregateArgs>(args: Subset<T, BodyPartsOnGymEquipmentsAggregateArgs>): Prisma.PrismaPromise<GetBodyPartsOnGymEquipmentsAggregateType<T>>

    /**
     * Group by BodyPartsOnGymEquipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BodyPartsOnGymEquipmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BodyPartsOnGymEquipmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BodyPartsOnGymEquipmentsGroupByArgs['orderBy'] }
        : { orderBy?: BodyPartsOnGymEquipmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BodyPartsOnGymEquipmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBodyPartsOnGymEquipmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BodyPartsOnGymEquipments model
   */
  readonly fields: BodyPartsOnGymEquipmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BodyPartsOnGymEquipments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BodyPartsOnGymEquipmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    GymEquipment<T extends GymEquipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymEquipmentDefaultArgs<ExtArgs>>): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    BodyPart<T extends BodyPartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BodyPartDefaultArgs<ExtArgs>>): Prisma__BodyPartClient<$Result.GetResult<Prisma.$BodyPartPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BodyPartsOnGymEquipments model
   */ 
  interface BodyPartsOnGymEquipmentsFieldRefs {
    readonly gymEquipmentId: FieldRef<"BodyPartsOnGymEquipments", 'Int'>
    readonly bodyPartId: FieldRef<"BodyPartsOnGymEquipments", 'Int'>
    readonly assignedAt: FieldRef<"BodyPartsOnGymEquipments", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * BodyPartsOnGymEquipments findUnique
   */
  export type BodyPartsOnGymEquipmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * Filter, which BodyPartsOnGymEquipments to fetch.
     */
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
  }


  /**
   * BodyPartsOnGymEquipments findUniqueOrThrow
   */
  export type BodyPartsOnGymEquipmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * Filter, which BodyPartsOnGymEquipments to fetch.
     */
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
  }


  /**
   * BodyPartsOnGymEquipments findFirst
   */
  export type BodyPartsOnGymEquipmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * Filter, which BodyPartsOnGymEquipments to fetch.
     */
    where?: BodyPartsOnGymEquipmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BodyPartsOnGymEquipments to fetch.
     */
    orderBy?: BodyPartsOnGymEquipmentsOrderByWithRelationInput | BodyPartsOnGymEquipmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BodyPartsOnGymEquipments.
     */
    cursor?: BodyPartsOnGymEquipmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BodyPartsOnGymEquipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BodyPartsOnGymEquipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BodyPartsOnGymEquipments.
     */
    distinct?: BodyPartsOnGymEquipmentsScalarFieldEnum | BodyPartsOnGymEquipmentsScalarFieldEnum[]
  }


  /**
   * BodyPartsOnGymEquipments findFirstOrThrow
   */
  export type BodyPartsOnGymEquipmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * Filter, which BodyPartsOnGymEquipments to fetch.
     */
    where?: BodyPartsOnGymEquipmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BodyPartsOnGymEquipments to fetch.
     */
    orderBy?: BodyPartsOnGymEquipmentsOrderByWithRelationInput | BodyPartsOnGymEquipmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BodyPartsOnGymEquipments.
     */
    cursor?: BodyPartsOnGymEquipmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BodyPartsOnGymEquipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BodyPartsOnGymEquipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BodyPartsOnGymEquipments.
     */
    distinct?: BodyPartsOnGymEquipmentsScalarFieldEnum | BodyPartsOnGymEquipmentsScalarFieldEnum[]
  }


  /**
   * BodyPartsOnGymEquipments findMany
   */
  export type BodyPartsOnGymEquipmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * Filter, which BodyPartsOnGymEquipments to fetch.
     */
    where?: BodyPartsOnGymEquipmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BodyPartsOnGymEquipments to fetch.
     */
    orderBy?: BodyPartsOnGymEquipmentsOrderByWithRelationInput | BodyPartsOnGymEquipmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BodyPartsOnGymEquipments.
     */
    cursor?: BodyPartsOnGymEquipmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BodyPartsOnGymEquipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BodyPartsOnGymEquipments.
     */
    skip?: number
    distinct?: BodyPartsOnGymEquipmentsScalarFieldEnum | BodyPartsOnGymEquipmentsScalarFieldEnum[]
  }


  /**
   * BodyPartsOnGymEquipments create
   */
  export type BodyPartsOnGymEquipmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a BodyPartsOnGymEquipments.
     */
    data: XOR<BodyPartsOnGymEquipmentsCreateInput, BodyPartsOnGymEquipmentsUncheckedCreateInput>
  }


  /**
   * BodyPartsOnGymEquipments createMany
   */
  export type BodyPartsOnGymEquipmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BodyPartsOnGymEquipments.
     */
    data: BodyPartsOnGymEquipmentsCreateManyInput | BodyPartsOnGymEquipmentsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BodyPartsOnGymEquipments update
   */
  export type BodyPartsOnGymEquipmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a BodyPartsOnGymEquipments.
     */
    data: XOR<BodyPartsOnGymEquipmentsUpdateInput, BodyPartsOnGymEquipmentsUncheckedUpdateInput>
    /**
     * Choose, which BodyPartsOnGymEquipments to update.
     */
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
  }


  /**
   * BodyPartsOnGymEquipments updateMany
   */
  export type BodyPartsOnGymEquipmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BodyPartsOnGymEquipments.
     */
    data: XOR<BodyPartsOnGymEquipmentsUpdateManyMutationInput, BodyPartsOnGymEquipmentsUncheckedUpdateManyInput>
    /**
     * Filter which BodyPartsOnGymEquipments to update
     */
    where?: BodyPartsOnGymEquipmentsWhereInput
  }


  /**
   * BodyPartsOnGymEquipments upsert
   */
  export type BodyPartsOnGymEquipmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the BodyPartsOnGymEquipments to update in case it exists.
     */
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
    /**
     * In case the BodyPartsOnGymEquipments found by the `where` argument doesn't exist, create a new BodyPartsOnGymEquipments with this data.
     */
    create: XOR<BodyPartsOnGymEquipmentsCreateInput, BodyPartsOnGymEquipmentsUncheckedCreateInput>
    /**
     * In case the BodyPartsOnGymEquipments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BodyPartsOnGymEquipmentsUpdateInput, BodyPartsOnGymEquipmentsUncheckedUpdateInput>
  }


  /**
   * BodyPartsOnGymEquipments delete
   */
  export type BodyPartsOnGymEquipmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
    /**
     * Filter which BodyPartsOnGymEquipments to delete.
     */
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
  }


  /**
   * BodyPartsOnGymEquipments deleteMany
   */
  export type BodyPartsOnGymEquipmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BodyPartsOnGymEquipments to delete
     */
    where?: BodyPartsOnGymEquipmentsWhereInput
  }


  /**
   * BodyPartsOnGymEquipments without action
   */
  export type BodyPartsOnGymEquipmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BodyPartsOnGymEquipments
     */
    select?: BodyPartsOnGymEquipmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BodyPartsOnGymEquipmentsInclude<ExtArgs> | null
  }



  /**
   * Model Gym
   */

  export type AggregateGym = {
    _count: GymCountAggregateOutputType | null
    _avg: GymAvgAggregateOutputType | null
    _sum: GymSumAggregateOutputType | null
    _min: GymMinAggregateOutputType | null
    _max: GymMaxAggregateOutputType | null
  }

  export type GymAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type GymSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type GymMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    ceoName: string | null
    companyName: string | null
    businessNumber: string | null
    postcode: string | null
    mainAddress: string | null
    subAddress: string | null
    phone: string | null
    cellPhone: string | null
    fax: string | null
    email: string | null
    isCertified: boolean | null
    userId: number | null
  }

  export type GymMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    ceoName: string | null
    companyName: string | null
    businessNumber: string | null
    postcode: string | null
    mainAddress: string | null
    subAddress: string | null
    phone: string | null
    cellPhone: string | null
    fax: string | null
    email: string | null
    isCertified: boolean | null
    userId: number | null
  }

  export type GymCountAggregateOutputType = {
    id: number
    createdAt: number
    ceoName: number
    companyName: number
    businessNumber: number
    postcode: number
    mainAddress: number
    subAddress: number
    phone: number
    cellPhone: number
    fax: number
    email: number
    isCertified: number
    userId: number
    _all: number
  }


  export type GymAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type GymSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type GymMinAggregateInputType = {
    id?: true
    createdAt?: true
    ceoName?: true
    companyName?: true
    businessNumber?: true
    postcode?: true
    mainAddress?: true
    subAddress?: true
    phone?: true
    cellPhone?: true
    fax?: true
    email?: true
    isCertified?: true
    userId?: true
  }

  export type GymMaxAggregateInputType = {
    id?: true
    createdAt?: true
    ceoName?: true
    companyName?: true
    businessNumber?: true
    postcode?: true
    mainAddress?: true
    subAddress?: true
    phone?: true
    cellPhone?: true
    fax?: true
    email?: true
    isCertified?: true
    userId?: true
  }

  export type GymCountAggregateInputType = {
    id?: true
    createdAt?: true
    ceoName?: true
    companyName?: true
    businessNumber?: true
    postcode?: true
    mainAddress?: true
    subAddress?: true
    phone?: true
    cellPhone?: true
    fax?: true
    email?: true
    isCertified?: true
    userId?: true
    _all?: true
  }

  export type GymAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gym to aggregate.
     */
    where?: GymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gyms to fetch.
     */
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gyms
    **/
    _count?: true | GymCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymMaxAggregateInputType
  }

  export type GetGymAggregateType<T extends GymAggregateArgs> = {
        [P in keyof T & keyof AggregateGym]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGym[P]>
      : GetScalarType<T[P], AggregateGym[P]>
  }




  export type GymGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymWhereInput
    orderBy?: GymOrderByWithAggregationInput | GymOrderByWithAggregationInput[]
    by: GymScalarFieldEnum[] | GymScalarFieldEnum
    having?: GymScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymCountAggregateInputType | true
    _avg?: GymAvgAggregateInputType
    _sum?: GymSumAggregateInputType
    _min?: GymMinAggregateInputType
    _max?: GymMaxAggregateInputType
  }

  export type GymGroupByOutputType = {
    id: number
    createdAt: Date
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified: boolean
    userId: number
    _count: GymCountAggregateOutputType | null
    _avg: GymAvgAggregateOutputType | null
    _sum: GymSumAggregateOutputType | null
    _min: GymMinAggregateOutputType | null
    _max: GymMaxAggregateOutputType | null
  }

  type GetGymGroupByPayload<T extends GymGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymGroupByOutputType[P]>
            : GetScalarType<T[P], GymGroupByOutputType[P]>
        }
      >
    >


  export type GymSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    ceoName?: boolean
    companyName?: boolean
    businessNumber?: boolean
    postcode?: boolean
    mainAddress?: boolean
    subAddress?: boolean
    phone?: boolean
    cellPhone?: boolean
    fax?: boolean
    email?: boolean
    isCertified?: boolean
    userId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    GymEquipments?: boolean | Gym$GymEquipmentsArgs<ExtArgs>
    FavoriteUsers?: boolean | Gym$FavoriteUsersArgs<ExtArgs>
    GymAccessHistory?: boolean | Gym$GymAccessHistoryArgs<ExtArgs>
    GymMembership?: boolean | Gym$GymMembershipArgs<ExtArgs>
    GymPassHistory?: boolean | Gym$GymPassHistoryArgs<ExtArgs>
    _count?: boolean | GymCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gym"]>

  export type GymSelectScalar = {
    id?: boolean
    createdAt?: boolean
    ceoName?: boolean
    companyName?: boolean
    businessNumber?: boolean
    postcode?: boolean
    mainAddress?: boolean
    subAddress?: boolean
    phone?: boolean
    cellPhone?: boolean
    fax?: boolean
    email?: boolean
    isCertified?: boolean
    userId?: boolean
  }

  export type GymInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    GymEquipments?: boolean | Gym$GymEquipmentsArgs<ExtArgs>
    FavoriteUsers?: boolean | Gym$FavoriteUsersArgs<ExtArgs>
    GymAccessHistory?: boolean | Gym$GymAccessHistoryArgs<ExtArgs>
    GymMembership?: boolean | Gym$GymMembershipArgs<ExtArgs>
    GymPassHistory?: boolean | Gym$GymPassHistoryArgs<ExtArgs>
    _count?: boolean | GymCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GymPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gym"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      GymEquipments: Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>[]
      FavoriteUsers: Prisma.$FavoriteGymPayload<ExtArgs>[]
      GymAccessHistory: Prisma.$GymAccessHistoryPayload<ExtArgs>[]
      GymMembership: Prisma.$GymMembershipPayload<ExtArgs>[]
      GymPassHistory: Prisma.$GymPassHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      ceoName: string
      companyName: string
      businessNumber: string
      postcode: string
      mainAddress: string
      subAddress: string
      phone: string
      cellPhone: string
      fax: string
      email: string
      isCertified: boolean
      userId: number
    }, ExtArgs["result"]["gym"]>
    composites: {}
  }


  type GymGetPayload<S extends boolean | null | undefined | GymDefaultArgs> = $Result.GetResult<Prisma.$GymPayload, S>

  type GymCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymCountAggregateInputType | true
    }

  export interface GymDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gym'], meta: { name: 'Gym' } }
    /**
     * Find zero or one Gym that matches the filter.
     * @param {GymFindUniqueArgs} args - Arguments to find a Gym
     * @example
     * // Get one Gym
     * const gym = await prisma.gym.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymFindUniqueArgs<ExtArgs>>
    ): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Gym that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymFindUniqueOrThrowArgs} args - Arguments to find a Gym
     * @example
     * // Get one Gym
     * const gym = await prisma.gym.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Gym that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymFindFirstArgs} args - Arguments to find a Gym
     * @example
     * // Get one Gym
     * const gym = await prisma.gym.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymFindFirstArgs<ExtArgs>>
    ): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Gym that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymFindFirstOrThrowArgs} args - Arguments to find a Gym
     * @example
     * // Get one Gym
     * const gym = await prisma.gym.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Gyms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gyms
     * const gyms = await prisma.gym.findMany()
     * 
     * // Get first 10 Gyms
     * const gyms = await prisma.gym.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymWithIdOnly = await prisma.gym.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Gym.
     * @param {GymCreateArgs} args - Arguments to create a Gym.
     * @example
     * // Create one Gym
     * const Gym = await prisma.gym.create({
     *   data: {
     *     // ... data to create a Gym
     *   }
     * })
     * 
    **/
    create<T extends GymCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymCreateArgs<ExtArgs>>
    ): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Gyms.
     *     @param {GymCreateManyArgs} args - Arguments to create many Gyms.
     *     @example
     *     // Create many Gyms
     *     const gym = await prisma.gym.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Gym.
     * @param {GymDeleteArgs} args - Arguments to delete one Gym.
     * @example
     * // Delete one Gym
     * const Gym = await prisma.gym.delete({
     *   where: {
     *     // ... filter to delete one Gym
     *   }
     * })
     * 
    **/
    delete<T extends GymDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymDeleteArgs<ExtArgs>>
    ): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Gym.
     * @param {GymUpdateArgs} args - Arguments to update one Gym.
     * @example
     * // Update one Gym
     * const gym = await prisma.gym.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymUpdateArgs<ExtArgs>>
    ): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Gyms.
     * @param {GymDeleteManyArgs} args - Arguments to filter Gyms to delete.
     * @example
     * // Delete a few Gyms
     * const { count } = await prisma.gym.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gyms
     * const gym = await prisma.gym.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gym.
     * @param {GymUpsertArgs} args - Arguments to update or create a Gym.
     * @example
     * // Update or create a Gym
     * const gym = await prisma.gym.upsert({
     *   create: {
     *     // ... data to create a Gym
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gym we want to update
     *   }
     * })
    **/
    upsert<T extends GymUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymUpsertArgs<ExtArgs>>
    ): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Gyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymCountArgs} args - Arguments to filter Gyms to count.
     * @example
     * // Count the number of Gyms
     * const count = await prisma.gym.count({
     *   where: {
     *     // ... the filter for the Gyms we want to count
     *   }
     * })
    **/
    count<T extends GymCountArgs>(
      args?: Subset<T, GymCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gym.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymAggregateArgs>(args: Subset<T, GymAggregateArgs>): Prisma.PrismaPromise<GetGymAggregateType<T>>

    /**
     * Group by Gym.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymGroupByArgs['orderBy'] }
        : { orderBy?: GymGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gym model
   */
  readonly fields: GymFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gym.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    GymEquipments<T extends Gym$GymEquipmentsArgs<ExtArgs> = {}>(args?: Subset<T, Gym$GymEquipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findMany'> | Null>;

    FavoriteUsers<T extends Gym$FavoriteUsersArgs<ExtArgs> = {}>(args?: Subset<T, Gym$FavoriteUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'findMany'> | Null>;

    GymAccessHistory<T extends Gym$GymAccessHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Gym$GymAccessHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    GymMembership<T extends Gym$GymMembershipArgs<ExtArgs> = {}>(args?: Subset<T, Gym$GymMembershipArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findMany'> | Null>;

    GymPassHistory<T extends Gym$GymPassHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Gym$GymPassHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Gym model
   */ 
  interface GymFieldRefs {
    readonly id: FieldRef<"Gym", 'Int'>
    readonly createdAt: FieldRef<"Gym", 'DateTime'>
    readonly ceoName: FieldRef<"Gym", 'String'>
    readonly companyName: FieldRef<"Gym", 'String'>
    readonly businessNumber: FieldRef<"Gym", 'String'>
    readonly postcode: FieldRef<"Gym", 'String'>
    readonly mainAddress: FieldRef<"Gym", 'String'>
    readonly subAddress: FieldRef<"Gym", 'String'>
    readonly phone: FieldRef<"Gym", 'String'>
    readonly cellPhone: FieldRef<"Gym", 'String'>
    readonly fax: FieldRef<"Gym", 'String'>
    readonly email: FieldRef<"Gym", 'String'>
    readonly isCertified: FieldRef<"Gym", 'Boolean'>
    readonly userId: FieldRef<"Gym", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Gym findUnique
   */
  export type GymFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gym to fetch.
     */
    where: GymWhereUniqueInput
  }


  /**
   * Gym findUniqueOrThrow
   */
  export type GymFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gym to fetch.
     */
    where: GymWhereUniqueInput
  }


  /**
   * Gym findFirst
   */
  export type GymFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gym to fetch.
     */
    where?: GymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gyms to fetch.
     */
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gyms.
     */
    cursor?: GymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gyms.
     */
    distinct?: GymScalarFieldEnum | GymScalarFieldEnum[]
  }


  /**
   * Gym findFirstOrThrow
   */
  export type GymFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gym to fetch.
     */
    where?: GymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gyms to fetch.
     */
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gyms.
     */
    cursor?: GymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gyms.
     */
    distinct?: GymScalarFieldEnum | GymScalarFieldEnum[]
  }


  /**
   * Gym findMany
   */
  export type GymFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter, which Gyms to fetch.
     */
    where?: GymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gyms to fetch.
     */
    orderBy?: GymOrderByWithRelationInput | GymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gyms.
     */
    cursor?: GymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gyms.
     */
    skip?: number
    distinct?: GymScalarFieldEnum | GymScalarFieldEnum[]
  }


  /**
   * Gym create
   */
  export type GymCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * The data needed to create a Gym.
     */
    data: XOR<GymCreateInput, GymUncheckedCreateInput>
  }


  /**
   * Gym createMany
   */
  export type GymCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gyms.
     */
    data: GymCreateManyInput | GymCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Gym update
   */
  export type GymUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * The data needed to update a Gym.
     */
    data: XOR<GymUpdateInput, GymUncheckedUpdateInput>
    /**
     * Choose, which Gym to update.
     */
    where: GymWhereUniqueInput
  }


  /**
   * Gym updateMany
   */
  export type GymUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gyms.
     */
    data: XOR<GymUpdateManyMutationInput, GymUncheckedUpdateManyInput>
    /**
     * Filter which Gyms to update
     */
    where?: GymWhereInput
  }


  /**
   * Gym upsert
   */
  export type GymUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * The filter to search for the Gym to update in case it exists.
     */
    where: GymWhereUniqueInput
    /**
     * In case the Gym found by the `where` argument doesn't exist, create a new Gym with this data.
     */
    create: XOR<GymCreateInput, GymUncheckedCreateInput>
    /**
     * In case the Gym was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymUpdateInput, GymUncheckedUpdateInput>
  }


  /**
   * Gym delete
   */
  export type GymDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
    /**
     * Filter which Gym to delete.
     */
    where: GymWhereUniqueInput
  }


  /**
   * Gym deleteMany
   */
  export type GymDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gyms to delete
     */
    where?: GymWhereInput
  }


  /**
   * Gym.GymEquipments
   */
  export type Gym$GymEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    where?: GymEuquipmentsOnGymsWhereInput
    orderBy?: GymEuquipmentsOnGymsOrderByWithRelationInput | GymEuquipmentsOnGymsOrderByWithRelationInput[]
    cursor?: GymEuquipmentsOnGymsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymEuquipmentsOnGymsScalarFieldEnum | GymEuquipmentsOnGymsScalarFieldEnum[]
  }


  /**
   * Gym.FavoriteUsers
   */
  export type Gym$FavoriteUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    where?: FavoriteGymWhereInput
    orderBy?: FavoriteGymOrderByWithRelationInput | FavoriteGymOrderByWithRelationInput[]
    cursor?: FavoriteGymWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteGymScalarFieldEnum | FavoriteGymScalarFieldEnum[]
  }


  /**
   * Gym.GymAccessHistory
   */
  export type Gym$GymAccessHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    where?: GymAccessHistoryWhereInput
    orderBy?: GymAccessHistoryOrderByWithRelationInput | GymAccessHistoryOrderByWithRelationInput[]
    cursor?: GymAccessHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymAccessHistoryScalarFieldEnum | GymAccessHistoryScalarFieldEnum[]
  }


  /**
   * Gym.GymMembership
   */
  export type Gym$GymMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    where?: GymMembershipWhereInput
    orderBy?: GymMembershipOrderByWithRelationInput | GymMembershipOrderByWithRelationInput[]
    cursor?: GymMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymMembershipScalarFieldEnum | GymMembershipScalarFieldEnum[]
  }


  /**
   * Gym.GymPassHistory
   */
  export type Gym$GymPassHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    where?: GymPassHistoryWhereInput
    orderBy?: GymPassHistoryOrderByWithRelationInput | GymPassHistoryOrderByWithRelationInput[]
    cursor?: GymPassHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymPassHistoryScalarFieldEnum | GymPassHistoryScalarFieldEnum[]
  }


  /**
   * Gym without action
   */
  export type GymDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gym
     */
    select?: GymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymInclude<ExtArgs> | null
  }



  /**
   * Model GymEuquipmentsOnGyms
   */

  export type AggregateGymEuquipmentsOnGyms = {
    _count: GymEuquipmentsOnGymsCountAggregateOutputType | null
    _avg: GymEuquipmentsOnGymsAvgAggregateOutputType | null
    _sum: GymEuquipmentsOnGymsSumAggregateOutputType | null
    _min: GymEuquipmentsOnGymsMinAggregateOutputType | null
    _max: GymEuquipmentsOnGymsMaxAggregateOutputType | null
  }

  export type GymEuquipmentsOnGymsAvgAggregateOutputType = {
    id: number | null
    gymId: number | null
    gymEquipmentId: number | null
    assignBy: number | null
  }

  export type GymEuquipmentsOnGymsSumAggregateOutputType = {
    id: number | null
    gymId: number | null
    gymEquipmentId: number | null
    assignBy: number | null
  }

  export type GymEuquipmentsOnGymsMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    gymId: number | null
    gymEquipmentId: number | null
    assignBy: number | null
  }

  export type GymEuquipmentsOnGymsMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    gymId: number | null
    gymEquipmentId: number | null
    assignBy: number | null
  }

  export type GymEuquipmentsOnGymsCountAggregateOutputType = {
    id: number
    createdAt: number
    gymId: number
    gymEquipmentId: number
    assignBy: number
    _all: number
  }


  export type GymEuquipmentsOnGymsAvgAggregateInputType = {
    id?: true
    gymId?: true
    gymEquipmentId?: true
    assignBy?: true
  }

  export type GymEuquipmentsOnGymsSumAggregateInputType = {
    id?: true
    gymId?: true
    gymEquipmentId?: true
    assignBy?: true
  }

  export type GymEuquipmentsOnGymsMinAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    gymEquipmentId?: true
    assignBy?: true
  }

  export type GymEuquipmentsOnGymsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    gymEquipmentId?: true
    assignBy?: true
  }

  export type GymEuquipmentsOnGymsCountAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    gymEquipmentId?: true
    assignBy?: true
    _all?: true
  }

  export type GymEuquipmentsOnGymsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymEuquipmentsOnGyms to aggregate.
     */
    where?: GymEuquipmentsOnGymsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEuquipmentsOnGyms to fetch.
     */
    orderBy?: GymEuquipmentsOnGymsOrderByWithRelationInput | GymEuquipmentsOnGymsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymEuquipmentsOnGymsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEuquipmentsOnGyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEuquipmentsOnGyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GymEuquipmentsOnGyms
    **/
    _count?: true | GymEuquipmentsOnGymsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymEuquipmentsOnGymsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymEuquipmentsOnGymsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymEuquipmentsOnGymsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymEuquipmentsOnGymsMaxAggregateInputType
  }

  export type GetGymEuquipmentsOnGymsAggregateType<T extends GymEuquipmentsOnGymsAggregateArgs> = {
        [P in keyof T & keyof AggregateGymEuquipmentsOnGyms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGymEuquipmentsOnGyms[P]>
      : GetScalarType<T[P], AggregateGymEuquipmentsOnGyms[P]>
  }




  export type GymEuquipmentsOnGymsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEuquipmentsOnGymsWhereInput
    orderBy?: GymEuquipmentsOnGymsOrderByWithAggregationInput | GymEuquipmentsOnGymsOrderByWithAggregationInput[]
    by: GymEuquipmentsOnGymsScalarFieldEnum[] | GymEuquipmentsOnGymsScalarFieldEnum
    having?: GymEuquipmentsOnGymsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymEuquipmentsOnGymsCountAggregateInputType | true
    _avg?: GymEuquipmentsOnGymsAvgAggregateInputType
    _sum?: GymEuquipmentsOnGymsSumAggregateInputType
    _min?: GymEuquipmentsOnGymsMinAggregateInputType
    _max?: GymEuquipmentsOnGymsMaxAggregateInputType
  }

  export type GymEuquipmentsOnGymsGroupByOutputType = {
    id: number
    createdAt: Date
    gymId: number
    gymEquipmentId: number
    assignBy: number
    _count: GymEuquipmentsOnGymsCountAggregateOutputType | null
    _avg: GymEuquipmentsOnGymsAvgAggregateOutputType | null
    _sum: GymEuquipmentsOnGymsSumAggregateOutputType | null
    _min: GymEuquipmentsOnGymsMinAggregateOutputType | null
    _max: GymEuquipmentsOnGymsMaxAggregateOutputType | null
  }

  type GetGymEuquipmentsOnGymsGroupByPayload<T extends GymEuquipmentsOnGymsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymEuquipmentsOnGymsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymEuquipmentsOnGymsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymEuquipmentsOnGymsGroupByOutputType[P]>
            : GetScalarType<T[P], GymEuquipmentsOnGymsGroupByOutputType[P]>
        }
      >
    >


  export type GymEuquipmentsOnGymsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    gymId?: boolean
    gymEquipmentId?: boolean
    assignBy?: boolean
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    GymEquipment?: boolean | GymEquipmentDefaultArgs<ExtArgs>
    assignUser?: boolean | UserDefaultArgs<ExtArgs>
    GymEquipmentUserHistory?: boolean | GymEuquipmentsOnGyms$GymEquipmentUserHistoryArgs<ExtArgs>
    _count?: boolean | GymEuquipmentsOnGymsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gymEuquipmentsOnGyms"]>

  export type GymEuquipmentsOnGymsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    gymId?: boolean
    gymEquipmentId?: boolean
    assignBy?: boolean
  }

  export type GymEuquipmentsOnGymsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    GymEquipment?: boolean | GymEquipmentDefaultArgs<ExtArgs>
    assignUser?: boolean | UserDefaultArgs<ExtArgs>
    GymEquipmentUserHistory?: boolean | GymEuquipmentsOnGyms$GymEquipmentUserHistoryArgs<ExtArgs>
    _count?: boolean | GymEuquipmentsOnGymsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GymEuquipmentsOnGymsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GymEuquipmentsOnGyms"
    objects: {
      Gym: Prisma.$GymPayload<ExtArgs>
      GymEquipment: Prisma.$GymEquipmentPayload<ExtArgs>
      assignUser: Prisma.$UserPayload<ExtArgs>
      GymEquipmentUserHistory: Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      gymId: number
      gymEquipmentId: number
      assignBy: number
    }, ExtArgs["result"]["gymEuquipmentsOnGyms"]>
    composites: {}
  }


  type GymEuquipmentsOnGymsGetPayload<S extends boolean | null | undefined | GymEuquipmentsOnGymsDefaultArgs> = $Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload, S>

  type GymEuquipmentsOnGymsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymEuquipmentsOnGymsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymEuquipmentsOnGymsCountAggregateInputType | true
    }

  export interface GymEuquipmentsOnGymsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GymEuquipmentsOnGyms'], meta: { name: 'GymEuquipmentsOnGyms' } }
    /**
     * Find zero or one GymEuquipmentsOnGyms that matches the filter.
     * @param {GymEuquipmentsOnGymsFindUniqueArgs} args - Arguments to find a GymEuquipmentsOnGyms
     * @example
     * // Get one GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymEuquipmentsOnGymsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymEuquipmentsOnGymsFindUniqueArgs<ExtArgs>>
    ): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GymEuquipmentsOnGyms that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymEuquipmentsOnGymsFindUniqueOrThrowArgs} args - Arguments to find a GymEuquipmentsOnGyms
     * @example
     * // Get one GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymEuquipmentsOnGymsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEuquipmentsOnGymsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GymEuquipmentsOnGyms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEuquipmentsOnGymsFindFirstArgs} args - Arguments to find a GymEuquipmentsOnGyms
     * @example
     * // Get one GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymEuquipmentsOnGymsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEuquipmentsOnGymsFindFirstArgs<ExtArgs>>
    ): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GymEuquipmentsOnGyms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEuquipmentsOnGymsFindFirstOrThrowArgs} args - Arguments to find a GymEuquipmentsOnGyms
     * @example
     * // Get one GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymEuquipmentsOnGymsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEuquipmentsOnGymsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GymEuquipmentsOnGyms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEuquipmentsOnGymsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.findMany()
     * 
     * // Get first 10 GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymEuquipmentsOnGymsWithIdOnly = await prisma.gymEuquipmentsOnGyms.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymEuquipmentsOnGymsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEuquipmentsOnGymsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GymEuquipmentsOnGyms.
     * @param {GymEuquipmentsOnGymsCreateArgs} args - Arguments to create a GymEuquipmentsOnGyms.
     * @example
     * // Create one GymEuquipmentsOnGyms
     * const GymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.create({
     *   data: {
     *     // ... data to create a GymEuquipmentsOnGyms
     *   }
     * })
     * 
    **/
    create<T extends GymEuquipmentsOnGymsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymEuquipmentsOnGymsCreateArgs<ExtArgs>>
    ): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GymEuquipmentsOnGyms.
     *     @param {GymEuquipmentsOnGymsCreateManyArgs} args - Arguments to create many GymEuquipmentsOnGyms.
     *     @example
     *     // Create many GymEuquipmentsOnGyms
     *     const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymEuquipmentsOnGymsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEuquipmentsOnGymsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GymEuquipmentsOnGyms.
     * @param {GymEuquipmentsOnGymsDeleteArgs} args - Arguments to delete one GymEuquipmentsOnGyms.
     * @example
     * // Delete one GymEuquipmentsOnGyms
     * const GymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.delete({
     *   where: {
     *     // ... filter to delete one GymEuquipmentsOnGyms
     *   }
     * })
     * 
    **/
    delete<T extends GymEuquipmentsOnGymsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymEuquipmentsOnGymsDeleteArgs<ExtArgs>>
    ): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GymEuquipmentsOnGyms.
     * @param {GymEuquipmentsOnGymsUpdateArgs} args - Arguments to update one GymEuquipmentsOnGyms.
     * @example
     * // Update one GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymEuquipmentsOnGymsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymEuquipmentsOnGymsUpdateArgs<ExtArgs>>
    ): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GymEuquipmentsOnGyms.
     * @param {GymEuquipmentsOnGymsDeleteManyArgs} args - Arguments to filter GymEuquipmentsOnGyms to delete.
     * @example
     * // Delete a few GymEuquipmentsOnGyms
     * const { count } = await prisma.gymEuquipmentsOnGyms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymEuquipmentsOnGymsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEuquipmentsOnGymsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GymEuquipmentsOnGyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEuquipmentsOnGymsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymEuquipmentsOnGymsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymEuquipmentsOnGymsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GymEuquipmentsOnGyms.
     * @param {GymEuquipmentsOnGymsUpsertArgs} args - Arguments to update or create a GymEuquipmentsOnGyms.
     * @example
     * // Update or create a GymEuquipmentsOnGyms
     * const gymEuquipmentsOnGyms = await prisma.gymEuquipmentsOnGyms.upsert({
     *   create: {
     *     // ... data to create a GymEuquipmentsOnGyms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GymEuquipmentsOnGyms we want to update
     *   }
     * })
    **/
    upsert<T extends GymEuquipmentsOnGymsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymEuquipmentsOnGymsUpsertArgs<ExtArgs>>
    ): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GymEuquipmentsOnGyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEuquipmentsOnGymsCountArgs} args - Arguments to filter GymEuquipmentsOnGyms to count.
     * @example
     * // Count the number of GymEuquipmentsOnGyms
     * const count = await prisma.gymEuquipmentsOnGyms.count({
     *   where: {
     *     // ... the filter for the GymEuquipmentsOnGyms we want to count
     *   }
     * })
    **/
    count<T extends GymEuquipmentsOnGymsCountArgs>(
      args?: Subset<T, GymEuquipmentsOnGymsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymEuquipmentsOnGymsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GymEuquipmentsOnGyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEuquipmentsOnGymsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymEuquipmentsOnGymsAggregateArgs>(args: Subset<T, GymEuquipmentsOnGymsAggregateArgs>): Prisma.PrismaPromise<GetGymEuquipmentsOnGymsAggregateType<T>>

    /**
     * Group by GymEuquipmentsOnGyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEuquipmentsOnGymsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymEuquipmentsOnGymsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymEuquipmentsOnGymsGroupByArgs['orderBy'] }
        : { orderBy?: GymEuquipmentsOnGymsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymEuquipmentsOnGymsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymEuquipmentsOnGymsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GymEuquipmentsOnGyms model
   */
  readonly fields: GymEuquipmentsOnGymsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GymEuquipmentsOnGyms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymEuquipmentsOnGymsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Gym<T extends GymDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymDefaultArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    GymEquipment<T extends GymEquipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymEquipmentDefaultArgs<ExtArgs>>): Prisma__GymEquipmentClient<$Result.GetResult<Prisma.$GymEquipmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    assignUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    GymEquipmentUserHistory<T extends GymEuquipmentsOnGyms$GymEquipmentUserHistoryArgs<ExtArgs> = {}>(args?: Subset<T, GymEuquipmentsOnGyms$GymEquipmentUserHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GymEuquipmentsOnGyms model
   */ 
  interface GymEuquipmentsOnGymsFieldRefs {
    readonly id: FieldRef<"GymEuquipmentsOnGyms", 'Int'>
    readonly createdAt: FieldRef<"GymEuquipmentsOnGyms", 'DateTime'>
    readonly gymId: FieldRef<"GymEuquipmentsOnGyms", 'Int'>
    readonly gymEquipmentId: FieldRef<"GymEuquipmentsOnGyms", 'Int'>
    readonly assignBy: FieldRef<"GymEuquipmentsOnGyms", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * GymEuquipmentsOnGyms findUnique
   */
  export type GymEuquipmentsOnGymsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * Filter, which GymEuquipmentsOnGyms to fetch.
     */
    where: GymEuquipmentsOnGymsWhereUniqueInput
  }


  /**
   * GymEuquipmentsOnGyms findUniqueOrThrow
   */
  export type GymEuquipmentsOnGymsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * Filter, which GymEuquipmentsOnGyms to fetch.
     */
    where: GymEuquipmentsOnGymsWhereUniqueInput
  }


  /**
   * GymEuquipmentsOnGyms findFirst
   */
  export type GymEuquipmentsOnGymsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * Filter, which GymEuquipmentsOnGyms to fetch.
     */
    where?: GymEuquipmentsOnGymsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEuquipmentsOnGyms to fetch.
     */
    orderBy?: GymEuquipmentsOnGymsOrderByWithRelationInput | GymEuquipmentsOnGymsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymEuquipmentsOnGyms.
     */
    cursor?: GymEuquipmentsOnGymsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEuquipmentsOnGyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEuquipmentsOnGyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymEuquipmentsOnGyms.
     */
    distinct?: GymEuquipmentsOnGymsScalarFieldEnum | GymEuquipmentsOnGymsScalarFieldEnum[]
  }


  /**
   * GymEuquipmentsOnGyms findFirstOrThrow
   */
  export type GymEuquipmentsOnGymsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * Filter, which GymEuquipmentsOnGyms to fetch.
     */
    where?: GymEuquipmentsOnGymsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEuquipmentsOnGyms to fetch.
     */
    orderBy?: GymEuquipmentsOnGymsOrderByWithRelationInput | GymEuquipmentsOnGymsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymEuquipmentsOnGyms.
     */
    cursor?: GymEuquipmentsOnGymsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEuquipmentsOnGyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEuquipmentsOnGyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymEuquipmentsOnGyms.
     */
    distinct?: GymEuquipmentsOnGymsScalarFieldEnum | GymEuquipmentsOnGymsScalarFieldEnum[]
  }


  /**
   * GymEuquipmentsOnGyms findMany
   */
  export type GymEuquipmentsOnGymsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * Filter, which GymEuquipmentsOnGyms to fetch.
     */
    where?: GymEuquipmentsOnGymsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEuquipmentsOnGyms to fetch.
     */
    orderBy?: GymEuquipmentsOnGymsOrderByWithRelationInput | GymEuquipmentsOnGymsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GymEuquipmentsOnGyms.
     */
    cursor?: GymEuquipmentsOnGymsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEuquipmentsOnGyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEuquipmentsOnGyms.
     */
    skip?: number
    distinct?: GymEuquipmentsOnGymsScalarFieldEnum | GymEuquipmentsOnGymsScalarFieldEnum[]
  }


  /**
   * GymEuquipmentsOnGyms create
   */
  export type GymEuquipmentsOnGymsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * The data needed to create a GymEuquipmentsOnGyms.
     */
    data: XOR<GymEuquipmentsOnGymsCreateInput, GymEuquipmentsOnGymsUncheckedCreateInput>
  }


  /**
   * GymEuquipmentsOnGyms createMany
   */
  export type GymEuquipmentsOnGymsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GymEuquipmentsOnGyms.
     */
    data: GymEuquipmentsOnGymsCreateManyInput | GymEuquipmentsOnGymsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GymEuquipmentsOnGyms update
   */
  export type GymEuquipmentsOnGymsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * The data needed to update a GymEuquipmentsOnGyms.
     */
    data: XOR<GymEuquipmentsOnGymsUpdateInput, GymEuquipmentsOnGymsUncheckedUpdateInput>
    /**
     * Choose, which GymEuquipmentsOnGyms to update.
     */
    where: GymEuquipmentsOnGymsWhereUniqueInput
  }


  /**
   * GymEuquipmentsOnGyms updateMany
   */
  export type GymEuquipmentsOnGymsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GymEuquipmentsOnGyms.
     */
    data: XOR<GymEuquipmentsOnGymsUpdateManyMutationInput, GymEuquipmentsOnGymsUncheckedUpdateManyInput>
    /**
     * Filter which GymEuquipmentsOnGyms to update
     */
    where?: GymEuquipmentsOnGymsWhereInput
  }


  /**
   * GymEuquipmentsOnGyms upsert
   */
  export type GymEuquipmentsOnGymsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * The filter to search for the GymEuquipmentsOnGyms to update in case it exists.
     */
    where: GymEuquipmentsOnGymsWhereUniqueInput
    /**
     * In case the GymEuquipmentsOnGyms found by the `where` argument doesn't exist, create a new GymEuquipmentsOnGyms with this data.
     */
    create: XOR<GymEuquipmentsOnGymsCreateInput, GymEuquipmentsOnGymsUncheckedCreateInput>
    /**
     * In case the GymEuquipmentsOnGyms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymEuquipmentsOnGymsUpdateInput, GymEuquipmentsOnGymsUncheckedUpdateInput>
  }


  /**
   * GymEuquipmentsOnGyms delete
   */
  export type GymEuquipmentsOnGymsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
    /**
     * Filter which GymEuquipmentsOnGyms to delete.
     */
    where: GymEuquipmentsOnGymsWhereUniqueInput
  }


  /**
   * GymEuquipmentsOnGyms deleteMany
   */
  export type GymEuquipmentsOnGymsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymEuquipmentsOnGyms to delete
     */
    where?: GymEuquipmentsOnGymsWhereInput
  }


  /**
   * GymEuquipmentsOnGyms.GymEquipmentUserHistory
   */
  export type GymEuquipmentsOnGyms$GymEquipmentUserHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    where?: GymEquipmentUserHistoryWhereInput
    orderBy?: GymEquipmentUserHistoryOrderByWithRelationInput | GymEquipmentUserHistoryOrderByWithRelationInput[]
    cursor?: GymEquipmentUserHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymEquipmentUserHistoryScalarFieldEnum | GymEquipmentUserHistoryScalarFieldEnum[]
  }


  /**
   * GymEuquipmentsOnGyms without action
   */
  export type GymEuquipmentsOnGymsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEuquipmentsOnGyms
     */
    select?: GymEuquipmentsOnGymsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEuquipmentsOnGymsInclude<ExtArgs> | null
  }



  /**
   * Model GymEquipmentUserHistory
   */

  export type AggregateGymEquipmentUserHistory = {
    _count: GymEquipmentUserHistoryCountAggregateOutputType | null
    _avg: GymEquipmentUserHistoryAvgAggregateOutputType | null
    _sum: GymEquipmentUserHistorySumAggregateOutputType | null
    _min: GymEquipmentUserHistoryMinAggregateOutputType | null
    _max: GymEquipmentUserHistoryMaxAggregateOutputType | null
  }

  export type GymEquipmentUserHistoryAvgAggregateOutputType = {
    id: number | null
    gymEuquipmentsOnGymsId: number | null
    userId: number | null
  }

  export type GymEquipmentUserHistorySumAggregateOutputType = {
    id: number | null
    gymEuquipmentsOnGymsId: number | null
    userId: number | null
  }

  export type GymEquipmentUserHistoryMinAggregateOutputType = {
    id: number | null
    gymEuquipmentsOnGymsId: number | null
    userId: number | null
    usedAt: Date | null
    endAt: Date | null
  }

  export type GymEquipmentUserHistoryMaxAggregateOutputType = {
    id: number | null
    gymEuquipmentsOnGymsId: number | null
    userId: number | null
    usedAt: Date | null
    endAt: Date | null
  }

  export type GymEquipmentUserHistoryCountAggregateOutputType = {
    id: number
    gymEuquipmentsOnGymsId: number
    userId: number
    usedAt: number
    endAt: number
    _all: number
  }


  export type GymEquipmentUserHistoryAvgAggregateInputType = {
    id?: true
    gymEuquipmentsOnGymsId?: true
    userId?: true
  }

  export type GymEquipmentUserHistorySumAggregateInputType = {
    id?: true
    gymEuquipmentsOnGymsId?: true
    userId?: true
  }

  export type GymEquipmentUserHistoryMinAggregateInputType = {
    id?: true
    gymEuquipmentsOnGymsId?: true
    userId?: true
    usedAt?: true
    endAt?: true
  }

  export type GymEquipmentUserHistoryMaxAggregateInputType = {
    id?: true
    gymEuquipmentsOnGymsId?: true
    userId?: true
    usedAt?: true
    endAt?: true
  }

  export type GymEquipmentUserHistoryCountAggregateInputType = {
    id?: true
    gymEuquipmentsOnGymsId?: true
    userId?: true
    usedAt?: true
    endAt?: true
    _all?: true
  }

  export type GymEquipmentUserHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymEquipmentUserHistory to aggregate.
     */
    where?: GymEquipmentUserHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipmentUserHistories to fetch.
     */
    orderBy?: GymEquipmentUserHistoryOrderByWithRelationInput | GymEquipmentUserHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymEquipmentUserHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipmentUserHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipmentUserHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GymEquipmentUserHistories
    **/
    _count?: true | GymEquipmentUserHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymEquipmentUserHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymEquipmentUserHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymEquipmentUserHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymEquipmentUserHistoryMaxAggregateInputType
  }

  export type GetGymEquipmentUserHistoryAggregateType<T extends GymEquipmentUserHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGymEquipmentUserHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGymEquipmentUserHistory[P]>
      : GetScalarType<T[P], AggregateGymEquipmentUserHistory[P]>
  }




  export type GymEquipmentUserHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymEquipmentUserHistoryWhereInput
    orderBy?: GymEquipmentUserHistoryOrderByWithAggregationInput | GymEquipmentUserHistoryOrderByWithAggregationInput[]
    by: GymEquipmentUserHistoryScalarFieldEnum[] | GymEquipmentUserHistoryScalarFieldEnum
    having?: GymEquipmentUserHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymEquipmentUserHistoryCountAggregateInputType | true
    _avg?: GymEquipmentUserHistoryAvgAggregateInputType
    _sum?: GymEquipmentUserHistorySumAggregateInputType
    _min?: GymEquipmentUserHistoryMinAggregateInputType
    _max?: GymEquipmentUserHistoryMaxAggregateInputType
  }

  export type GymEquipmentUserHistoryGroupByOutputType = {
    id: number
    gymEuquipmentsOnGymsId: number
    userId: number
    usedAt: Date
    endAt: Date | null
    _count: GymEquipmentUserHistoryCountAggregateOutputType | null
    _avg: GymEquipmentUserHistoryAvgAggregateOutputType | null
    _sum: GymEquipmentUserHistorySumAggregateOutputType | null
    _min: GymEquipmentUserHistoryMinAggregateOutputType | null
    _max: GymEquipmentUserHistoryMaxAggregateOutputType | null
  }

  type GetGymEquipmentUserHistoryGroupByPayload<T extends GymEquipmentUserHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymEquipmentUserHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymEquipmentUserHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymEquipmentUserHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], GymEquipmentUserHistoryGroupByOutputType[P]>
        }
      >
    >


  export type GymEquipmentUserHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gymEuquipmentsOnGymsId?: boolean
    userId?: boolean
    usedAt?: boolean
    endAt?: boolean
    GymEuquipmentsOnGyms?: boolean | GymEuquipmentsOnGymsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gymEquipmentUserHistory"]>

  export type GymEquipmentUserHistorySelectScalar = {
    id?: boolean
    gymEuquipmentsOnGymsId?: boolean
    userId?: boolean
    usedAt?: boolean
    endAt?: boolean
  }

  export type GymEquipmentUserHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymEuquipmentsOnGyms?: boolean | GymEuquipmentsOnGymsDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $GymEquipmentUserHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GymEquipmentUserHistory"
    objects: {
      GymEuquipmentsOnGyms: Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gymEuquipmentsOnGymsId: number
      userId: number
      usedAt: Date
      endAt: Date | null
    }, ExtArgs["result"]["gymEquipmentUserHistory"]>
    composites: {}
  }


  type GymEquipmentUserHistoryGetPayload<S extends boolean | null | undefined | GymEquipmentUserHistoryDefaultArgs> = $Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload, S>

  type GymEquipmentUserHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymEquipmentUserHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymEquipmentUserHistoryCountAggregateInputType | true
    }

  export interface GymEquipmentUserHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GymEquipmentUserHistory'], meta: { name: 'GymEquipmentUserHistory' } }
    /**
     * Find zero or one GymEquipmentUserHistory that matches the filter.
     * @param {GymEquipmentUserHistoryFindUniqueArgs} args - Arguments to find a GymEquipmentUserHistory
     * @example
     * // Get one GymEquipmentUserHistory
     * const gymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymEquipmentUserHistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUserHistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__GymEquipmentUserHistoryClient<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GymEquipmentUserHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymEquipmentUserHistoryFindUniqueOrThrowArgs} args - Arguments to find a GymEquipmentUserHistory
     * @example
     * // Get one GymEquipmentUserHistory
     * const gymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymEquipmentUserHistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentUserHistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymEquipmentUserHistoryClient<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GymEquipmentUserHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentUserHistoryFindFirstArgs} args - Arguments to find a GymEquipmentUserHistory
     * @example
     * // Get one GymEquipmentUserHistory
     * const gymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymEquipmentUserHistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentUserHistoryFindFirstArgs<ExtArgs>>
    ): Prisma__GymEquipmentUserHistoryClient<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GymEquipmentUserHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentUserHistoryFindFirstOrThrowArgs} args - Arguments to find a GymEquipmentUserHistory
     * @example
     * // Get one GymEquipmentUserHistory
     * const gymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymEquipmentUserHistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentUserHistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymEquipmentUserHistoryClient<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GymEquipmentUserHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentUserHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GymEquipmentUserHistories
     * const gymEquipmentUserHistories = await prisma.gymEquipmentUserHistory.findMany()
     * 
     * // Get first 10 GymEquipmentUserHistories
     * const gymEquipmentUserHistories = await prisma.gymEquipmentUserHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymEquipmentUserHistoryWithIdOnly = await prisma.gymEquipmentUserHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymEquipmentUserHistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentUserHistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GymEquipmentUserHistory.
     * @param {GymEquipmentUserHistoryCreateArgs} args - Arguments to create a GymEquipmentUserHistory.
     * @example
     * // Create one GymEquipmentUserHistory
     * const GymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.create({
     *   data: {
     *     // ... data to create a GymEquipmentUserHistory
     *   }
     * })
     * 
    **/
    create<T extends GymEquipmentUserHistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUserHistoryCreateArgs<ExtArgs>>
    ): Prisma__GymEquipmentUserHistoryClient<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GymEquipmentUserHistories.
     *     @param {GymEquipmentUserHistoryCreateManyArgs} args - Arguments to create many GymEquipmentUserHistories.
     *     @example
     *     // Create many GymEquipmentUserHistories
     *     const gymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymEquipmentUserHistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentUserHistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GymEquipmentUserHistory.
     * @param {GymEquipmentUserHistoryDeleteArgs} args - Arguments to delete one GymEquipmentUserHistory.
     * @example
     * // Delete one GymEquipmentUserHistory
     * const GymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.delete({
     *   where: {
     *     // ... filter to delete one GymEquipmentUserHistory
     *   }
     * })
     * 
    **/
    delete<T extends GymEquipmentUserHistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUserHistoryDeleteArgs<ExtArgs>>
    ): Prisma__GymEquipmentUserHistoryClient<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GymEquipmentUserHistory.
     * @param {GymEquipmentUserHistoryUpdateArgs} args - Arguments to update one GymEquipmentUserHistory.
     * @example
     * // Update one GymEquipmentUserHistory
     * const gymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymEquipmentUserHistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUserHistoryUpdateArgs<ExtArgs>>
    ): Prisma__GymEquipmentUserHistoryClient<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GymEquipmentUserHistories.
     * @param {GymEquipmentUserHistoryDeleteManyArgs} args - Arguments to filter GymEquipmentUserHistories to delete.
     * @example
     * // Delete a few GymEquipmentUserHistories
     * const { count } = await prisma.gymEquipmentUserHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymEquipmentUserHistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymEquipmentUserHistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GymEquipmentUserHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentUserHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GymEquipmentUserHistories
     * const gymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymEquipmentUserHistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUserHistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GymEquipmentUserHistory.
     * @param {GymEquipmentUserHistoryUpsertArgs} args - Arguments to update or create a GymEquipmentUserHistory.
     * @example
     * // Update or create a GymEquipmentUserHistory
     * const gymEquipmentUserHistory = await prisma.gymEquipmentUserHistory.upsert({
     *   create: {
     *     // ... data to create a GymEquipmentUserHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GymEquipmentUserHistory we want to update
     *   }
     * })
    **/
    upsert<T extends GymEquipmentUserHistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymEquipmentUserHistoryUpsertArgs<ExtArgs>>
    ): Prisma__GymEquipmentUserHistoryClient<$Result.GetResult<Prisma.$GymEquipmentUserHistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GymEquipmentUserHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentUserHistoryCountArgs} args - Arguments to filter GymEquipmentUserHistories to count.
     * @example
     * // Count the number of GymEquipmentUserHistories
     * const count = await prisma.gymEquipmentUserHistory.count({
     *   where: {
     *     // ... the filter for the GymEquipmentUserHistories we want to count
     *   }
     * })
    **/
    count<T extends GymEquipmentUserHistoryCountArgs>(
      args?: Subset<T, GymEquipmentUserHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymEquipmentUserHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GymEquipmentUserHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentUserHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymEquipmentUserHistoryAggregateArgs>(args: Subset<T, GymEquipmentUserHistoryAggregateArgs>): Prisma.PrismaPromise<GetGymEquipmentUserHistoryAggregateType<T>>

    /**
     * Group by GymEquipmentUserHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymEquipmentUserHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymEquipmentUserHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymEquipmentUserHistoryGroupByArgs['orderBy'] }
        : { orderBy?: GymEquipmentUserHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymEquipmentUserHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymEquipmentUserHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GymEquipmentUserHistory model
   */
  readonly fields: GymEquipmentUserHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GymEquipmentUserHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymEquipmentUserHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    GymEuquipmentsOnGyms<T extends GymEuquipmentsOnGymsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymEuquipmentsOnGymsDefaultArgs<ExtArgs>>): Prisma__GymEuquipmentsOnGymsClient<$Result.GetResult<Prisma.$GymEuquipmentsOnGymsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GymEquipmentUserHistory model
   */ 
  interface GymEquipmentUserHistoryFieldRefs {
    readonly id: FieldRef<"GymEquipmentUserHistory", 'Int'>
    readonly gymEuquipmentsOnGymsId: FieldRef<"GymEquipmentUserHistory", 'Int'>
    readonly userId: FieldRef<"GymEquipmentUserHistory", 'Int'>
    readonly usedAt: FieldRef<"GymEquipmentUserHistory", 'DateTime'>
    readonly endAt: FieldRef<"GymEquipmentUserHistory", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * GymEquipmentUserHistory findUnique
   */
  export type GymEquipmentUserHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentUserHistory to fetch.
     */
    where: GymEquipmentUserHistoryWhereUniqueInput
  }


  /**
   * GymEquipmentUserHistory findUniqueOrThrow
   */
  export type GymEquipmentUserHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentUserHistory to fetch.
     */
    where: GymEquipmentUserHistoryWhereUniqueInput
  }


  /**
   * GymEquipmentUserHistory findFirst
   */
  export type GymEquipmentUserHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentUserHistory to fetch.
     */
    where?: GymEquipmentUserHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipmentUserHistories to fetch.
     */
    orderBy?: GymEquipmentUserHistoryOrderByWithRelationInput | GymEquipmentUserHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymEquipmentUserHistories.
     */
    cursor?: GymEquipmentUserHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipmentUserHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipmentUserHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymEquipmentUserHistories.
     */
    distinct?: GymEquipmentUserHistoryScalarFieldEnum | GymEquipmentUserHistoryScalarFieldEnum[]
  }


  /**
   * GymEquipmentUserHistory findFirstOrThrow
   */
  export type GymEquipmentUserHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentUserHistory to fetch.
     */
    where?: GymEquipmentUserHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipmentUserHistories to fetch.
     */
    orderBy?: GymEquipmentUserHistoryOrderByWithRelationInput | GymEquipmentUserHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymEquipmentUserHistories.
     */
    cursor?: GymEquipmentUserHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipmentUserHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipmentUserHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymEquipmentUserHistories.
     */
    distinct?: GymEquipmentUserHistoryScalarFieldEnum | GymEquipmentUserHistoryScalarFieldEnum[]
  }


  /**
   * GymEquipmentUserHistory findMany
   */
  export type GymEquipmentUserHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymEquipmentUserHistories to fetch.
     */
    where?: GymEquipmentUserHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymEquipmentUserHistories to fetch.
     */
    orderBy?: GymEquipmentUserHistoryOrderByWithRelationInput | GymEquipmentUserHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GymEquipmentUserHistories.
     */
    cursor?: GymEquipmentUserHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymEquipmentUserHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymEquipmentUserHistories.
     */
    skip?: number
    distinct?: GymEquipmentUserHistoryScalarFieldEnum | GymEquipmentUserHistoryScalarFieldEnum[]
  }


  /**
   * GymEquipmentUserHistory create
   */
  export type GymEquipmentUserHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a GymEquipmentUserHistory.
     */
    data: XOR<GymEquipmentUserHistoryCreateInput, GymEquipmentUserHistoryUncheckedCreateInput>
  }


  /**
   * GymEquipmentUserHistory createMany
   */
  export type GymEquipmentUserHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GymEquipmentUserHistories.
     */
    data: GymEquipmentUserHistoryCreateManyInput | GymEquipmentUserHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GymEquipmentUserHistory update
   */
  export type GymEquipmentUserHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a GymEquipmentUserHistory.
     */
    data: XOR<GymEquipmentUserHistoryUpdateInput, GymEquipmentUserHistoryUncheckedUpdateInput>
    /**
     * Choose, which GymEquipmentUserHistory to update.
     */
    where: GymEquipmentUserHistoryWhereUniqueInput
  }


  /**
   * GymEquipmentUserHistory updateMany
   */
  export type GymEquipmentUserHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GymEquipmentUserHistories.
     */
    data: XOR<GymEquipmentUserHistoryUpdateManyMutationInput, GymEquipmentUserHistoryUncheckedUpdateManyInput>
    /**
     * Filter which GymEquipmentUserHistories to update
     */
    where?: GymEquipmentUserHistoryWhereInput
  }


  /**
   * GymEquipmentUserHistory upsert
   */
  export type GymEquipmentUserHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the GymEquipmentUserHistory to update in case it exists.
     */
    where: GymEquipmentUserHistoryWhereUniqueInput
    /**
     * In case the GymEquipmentUserHistory found by the `where` argument doesn't exist, create a new GymEquipmentUserHistory with this data.
     */
    create: XOR<GymEquipmentUserHistoryCreateInput, GymEquipmentUserHistoryUncheckedCreateInput>
    /**
     * In case the GymEquipmentUserHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymEquipmentUserHistoryUpdateInput, GymEquipmentUserHistoryUncheckedUpdateInput>
  }


  /**
   * GymEquipmentUserHistory delete
   */
  export type GymEquipmentUserHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
    /**
     * Filter which GymEquipmentUserHistory to delete.
     */
    where: GymEquipmentUserHistoryWhereUniqueInput
  }


  /**
   * GymEquipmentUserHistory deleteMany
   */
  export type GymEquipmentUserHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymEquipmentUserHistories to delete
     */
    where?: GymEquipmentUserHistoryWhereInput
  }


  /**
   * GymEquipmentUserHistory without action
   */
  export type GymEquipmentUserHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymEquipmentUserHistory
     */
    select?: GymEquipmentUserHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymEquipmentUserHistoryInclude<ExtArgs> | null
  }



  /**
   * Model GymMembership
   */

  export type AggregateGymMembership = {
    _count: GymMembershipCountAggregateOutputType | null
    _avg: GymMembershipAvgAggregateOutputType | null
    _sum: GymMembershipSumAggregateOutputType | null
    _min: GymMembershipMinAggregateOutputType | null
    _max: GymMembershipMaxAggregateOutputType | null
  }

  export type GymMembershipAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    gymId: number | null
    assignBy: number | null
    gymMembershipCancellationId: number | null
  }

  export type GymMembershipSumAggregateOutputType = {
    id: number | null
    userId: number | null
    gymId: number | null
    assignBy: number | null
    gymMembershipCancellationId: number | null
  }

  export type GymMembershipMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: number | null
    gymId: number | null
    assignBy: number | null
    startDay: Date | null
    endDay: Date | null
    gymMembershipCancellationId: number | null
  }

  export type GymMembershipMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: number | null
    gymId: number | null
    assignBy: number | null
    startDay: Date | null
    endDay: Date | null
    gymMembershipCancellationId: number | null
  }

  export type GymMembershipCountAggregateOutputType = {
    id: number
    createdAt: number
    userId: number
    gymId: number
    assignBy: number
    startDay: number
    endDay: number
    gymMembershipCancellationId: number
    _all: number
  }


  export type GymMembershipAvgAggregateInputType = {
    id?: true
    userId?: true
    gymId?: true
    assignBy?: true
    gymMembershipCancellationId?: true
  }

  export type GymMembershipSumAggregateInputType = {
    id?: true
    userId?: true
    gymId?: true
    assignBy?: true
    gymMembershipCancellationId?: true
  }

  export type GymMembershipMinAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    gymId?: true
    assignBy?: true
    startDay?: true
    endDay?: true
    gymMembershipCancellationId?: true
  }

  export type GymMembershipMaxAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    gymId?: true
    assignBy?: true
    startDay?: true
    endDay?: true
    gymMembershipCancellationId?: true
  }

  export type GymMembershipCountAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    gymId?: true
    assignBy?: true
    startDay?: true
    endDay?: true
    gymMembershipCancellationId?: true
    _all?: true
  }

  export type GymMembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymMembership to aggregate.
     */
    where?: GymMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymMemberships to fetch.
     */
    orderBy?: GymMembershipOrderByWithRelationInput | GymMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GymMemberships
    **/
    _count?: true | GymMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymMembershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymMembershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymMembershipMaxAggregateInputType
  }

  export type GetGymMembershipAggregateType<T extends GymMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateGymMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGymMembership[P]>
      : GetScalarType<T[P], AggregateGymMembership[P]>
  }




  export type GymMembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymMembershipWhereInput
    orderBy?: GymMembershipOrderByWithAggregationInput | GymMembershipOrderByWithAggregationInput[]
    by: GymMembershipScalarFieldEnum[] | GymMembershipScalarFieldEnum
    having?: GymMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymMembershipCountAggregateInputType | true
    _avg?: GymMembershipAvgAggregateInputType
    _sum?: GymMembershipSumAggregateInputType
    _min?: GymMembershipMinAggregateInputType
    _max?: GymMembershipMaxAggregateInputType
  }

  export type GymMembershipGroupByOutputType = {
    id: number
    createdAt: Date
    userId: number
    gymId: number
    assignBy: number
    startDay: Date
    endDay: Date
    gymMembershipCancellationId: number | null
    _count: GymMembershipCountAggregateOutputType | null
    _avg: GymMembershipAvgAggregateOutputType | null
    _sum: GymMembershipSumAggregateOutputType | null
    _min: GymMembershipMinAggregateOutputType | null
    _max: GymMembershipMaxAggregateOutputType | null
  }

  type GetGymMembershipGroupByPayload<T extends GymMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], GymMembershipGroupByOutputType[P]>
        }
      >
    >


  export type GymMembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    gymId?: boolean
    assignBy?: boolean
    startDay?: boolean
    endDay?: boolean
    gymMembershipCancellationId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    assignUser?: boolean | UserDefaultArgs<ExtArgs>
    GymMembershipCancellation?: boolean | GymMembership$GymMembershipCancellationArgs<ExtArgs>
  }, ExtArgs["result"]["gymMembership"]>

  export type GymMembershipSelectScalar = {
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    gymId?: boolean
    assignBy?: boolean
    startDay?: boolean
    endDay?: boolean
    gymMembershipCancellationId?: boolean
  }

  export type GymMembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    assignUser?: boolean | UserDefaultArgs<ExtArgs>
    GymMembershipCancellation?: boolean | GymMembership$GymMembershipCancellationArgs<ExtArgs>
  }


  export type $GymMembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GymMembership"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Gym: Prisma.$GymPayload<ExtArgs>
      assignUser: Prisma.$UserPayload<ExtArgs>
      GymMembershipCancellation: Prisma.$GymMembershipCancellationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      userId: number
      gymId: number
      assignBy: number
      startDay: Date
      endDay: Date
      gymMembershipCancellationId: number | null
    }, ExtArgs["result"]["gymMembership"]>
    composites: {}
  }


  type GymMembershipGetPayload<S extends boolean | null | undefined | GymMembershipDefaultArgs> = $Result.GetResult<Prisma.$GymMembershipPayload, S>

  type GymMembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymMembershipFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymMembershipCountAggregateInputType | true
    }

  export interface GymMembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GymMembership'], meta: { name: 'GymMembership' } }
    /**
     * Find zero or one GymMembership that matches the filter.
     * @param {GymMembershipFindUniqueArgs} args - Arguments to find a GymMembership
     * @example
     * // Get one GymMembership
     * const gymMembership = await prisma.gymMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymMembershipFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipFindUniqueArgs<ExtArgs>>
    ): Prisma__GymMembershipClient<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GymMembership that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymMembershipFindUniqueOrThrowArgs} args - Arguments to find a GymMembership
     * @example
     * // Get one GymMembership
     * const gymMembership = await prisma.gymMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymMembershipFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymMembershipClient<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GymMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipFindFirstArgs} args - Arguments to find a GymMembership
     * @example
     * // Get one GymMembership
     * const gymMembership = await prisma.gymMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymMembershipFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipFindFirstArgs<ExtArgs>>
    ): Prisma__GymMembershipClient<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GymMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipFindFirstOrThrowArgs} args - Arguments to find a GymMembership
     * @example
     * // Get one GymMembership
     * const gymMembership = await prisma.gymMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymMembershipFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymMembershipClient<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GymMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GymMemberships
     * const gymMemberships = await prisma.gymMembership.findMany()
     * 
     * // Get first 10 GymMemberships
     * const gymMemberships = await prisma.gymMembership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymMembershipWithIdOnly = await prisma.gymMembership.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymMembershipFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GymMembership.
     * @param {GymMembershipCreateArgs} args - Arguments to create a GymMembership.
     * @example
     * // Create one GymMembership
     * const GymMembership = await prisma.gymMembership.create({
     *   data: {
     *     // ... data to create a GymMembership
     *   }
     * })
     * 
    **/
    create<T extends GymMembershipCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipCreateArgs<ExtArgs>>
    ): Prisma__GymMembershipClient<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GymMemberships.
     *     @param {GymMembershipCreateManyArgs} args - Arguments to create many GymMemberships.
     *     @example
     *     // Create many GymMemberships
     *     const gymMembership = await prisma.gymMembership.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymMembershipCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GymMembership.
     * @param {GymMembershipDeleteArgs} args - Arguments to delete one GymMembership.
     * @example
     * // Delete one GymMembership
     * const GymMembership = await prisma.gymMembership.delete({
     *   where: {
     *     // ... filter to delete one GymMembership
     *   }
     * })
     * 
    **/
    delete<T extends GymMembershipDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipDeleteArgs<ExtArgs>>
    ): Prisma__GymMembershipClient<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GymMembership.
     * @param {GymMembershipUpdateArgs} args - Arguments to update one GymMembership.
     * @example
     * // Update one GymMembership
     * const gymMembership = await prisma.gymMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymMembershipUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipUpdateArgs<ExtArgs>>
    ): Prisma__GymMembershipClient<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GymMemberships.
     * @param {GymMembershipDeleteManyArgs} args - Arguments to filter GymMemberships to delete.
     * @example
     * // Delete a few GymMemberships
     * const { count } = await prisma.gymMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymMembershipDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GymMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GymMemberships
     * const gymMembership = await prisma.gymMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymMembershipUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GymMembership.
     * @param {GymMembershipUpsertArgs} args - Arguments to update or create a GymMembership.
     * @example
     * // Update or create a GymMembership
     * const gymMembership = await prisma.gymMembership.upsert({
     *   create: {
     *     // ... data to create a GymMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GymMembership we want to update
     *   }
     * })
    **/
    upsert<T extends GymMembershipUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipUpsertArgs<ExtArgs>>
    ): Prisma__GymMembershipClient<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GymMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipCountArgs} args - Arguments to filter GymMemberships to count.
     * @example
     * // Count the number of GymMemberships
     * const count = await prisma.gymMembership.count({
     *   where: {
     *     // ... the filter for the GymMemberships we want to count
     *   }
     * })
    **/
    count<T extends GymMembershipCountArgs>(
      args?: Subset<T, GymMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GymMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymMembershipAggregateArgs>(args: Subset<T, GymMembershipAggregateArgs>): Prisma.PrismaPromise<GetGymMembershipAggregateType<T>>

    /**
     * Group by GymMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymMembershipGroupByArgs['orderBy'] }
        : { orderBy?: GymMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GymMembership model
   */
  readonly fields: GymMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GymMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymMembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Gym<T extends GymDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymDefaultArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    assignUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    GymMembershipCancellation<T extends GymMembership$GymMembershipCancellationArgs<ExtArgs> = {}>(args?: Subset<T, GymMembership$GymMembershipCancellationArgs<ExtArgs>>): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GymMembership model
   */ 
  interface GymMembershipFieldRefs {
    readonly id: FieldRef<"GymMembership", 'Int'>
    readonly createdAt: FieldRef<"GymMembership", 'DateTime'>
    readonly userId: FieldRef<"GymMembership", 'Int'>
    readonly gymId: FieldRef<"GymMembership", 'Int'>
    readonly assignBy: FieldRef<"GymMembership", 'Int'>
    readonly startDay: FieldRef<"GymMembership", 'DateTime'>
    readonly endDay: FieldRef<"GymMembership", 'DateTime'>
    readonly gymMembershipCancellationId: FieldRef<"GymMembership", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * GymMembership findUnique
   */
  export type GymMembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * Filter, which GymMembership to fetch.
     */
    where: GymMembershipWhereUniqueInput
  }


  /**
   * GymMembership findUniqueOrThrow
   */
  export type GymMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * Filter, which GymMembership to fetch.
     */
    where: GymMembershipWhereUniqueInput
  }


  /**
   * GymMembership findFirst
   */
  export type GymMembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * Filter, which GymMembership to fetch.
     */
    where?: GymMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymMemberships to fetch.
     */
    orderBy?: GymMembershipOrderByWithRelationInput | GymMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymMemberships.
     */
    cursor?: GymMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymMemberships.
     */
    distinct?: GymMembershipScalarFieldEnum | GymMembershipScalarFieldEnum[]
  }


  /**
   * GymMembership findFirstOrThrow
   */
  export type GymMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * Filter, which GymMembership to fetch.
     */
    where?: GymMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymMemberships to fetch.
     */
    orderBy?: GymMembershipOrderByWithRelationInput | GymMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymMemberships.
     */
    cursor?: GymMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymMemberships.
     */
    distinct?: GymMembershipScalarFieldEnum | GymMembershipScalarFieldEnum[]
  }


  /**
   * GymMembership findMany
   */
  export type GymMembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * Filter, which GymMemberships to fetch.
     */
    where?: GymMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymMemberships to fetch.
     */
    orderBy?: GymMembershipOrderByWithRelationInput | GymMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GymMemberships.
     */
    cursor?: GymMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymMemberships.
     */
    skip?: number
    distinct?: GymMembershipScalarFieldEnum | GymMembershipScalarFieldEnum[]
  }


  /**
   * GymMembership create
   */
  export type GymMembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a GymMembership.
     */
    data: XOR<GymMembershipCreateInput, GymMembershipUncheckedCreateInput>
  }


  /**
   * GymMembership createMany
   */
  export type GymMembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GymMemberships.
     */
    data: GymMembershipCreateManyInput | GymMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GymMembership update
   */
  export type GymMembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a GymMembership.
     */
    data: XOR<GymMembershipUpdateInput, GymMembershipUncheckedUpdateInput>
    /**
     * Choose, which GymMembership to update.
     */
    where: GymMembershipWhereUniqueInput
  }


  /**
   * GymMembership updateMany
   */
  export type GymMembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GymMemberships.
     */
    data: XOR<GymMembershipUpdateManyMutationInput, GymMembershipUncheckedUpdateManyInput>
    /**
     * Filter which GymMemberships to update
     */
    where?: GymMembershipWhereInput
  }


  /**
   * GymMembership upsert
   */
  export type GymMembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the GymMembership to update in case it exists.
     */
    where: GymMembershipWhereUniqueInput
    /**
     * In case the GymMembership found by the `where` argument doesn't exist, create a new GymMembership with this data.
     */
    create: XOR<GymMembershipCreateInput, GymMembershipUncheckedCreateInput>
    /**
     * In case the GymMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymMembershipUpdateInput, GymMembershipUncheckedUpdateInput>
  }


  /**
   * GymMembership delete
   */
  export type GymMembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    /**
     * Filter which GymMembership to delete.
     */
    where: GymMembershipWhereUniqueInput
  }


  /**
   * GymMembership deleteMany
   */
  export type GymMembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymMemberships to delete
     */
    where?: GymMembershipWhereInput
  }


  /**
   * GymMembership.GymMembershipCancellation
   */
  export type GymMembership$GymMembershipCancellationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    where?: GymMembershipCancellationWhereInput
  }


  /**
   * GymMembership without action
   */
  export type GymMembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
  }



  /**
   * Model GymMembershipCancellation
   */

  export type AggregateGymMembershipCancellation = {
    _count: GymMembershipCancellationCountAggregateOutputType | null
    _avg: GymMembershipCancellationAvgAggregateOutputType | null
    _sum: GymMembershipCancellationSumAggregateOutputType | null
    _min: GymMembershipCancellationMinAggregateOutputType | null
    _max: GymMembershipCancellationMaxAggregateOutputType | null
  }

  export type GymMembershipCancellationAvgAggregateOutputType = {
    id: number | null
  }

  export type GymMembershipCancellationSumAggregateOutputType = {
    id: number | null
  }

  export type GymMembershipCancellationMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    reason: string | null
  }

  export type GymMembershipCancellationMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    reason: string | null
  }

  export type GymMembershipCancellationCountAggregateOutputType = {
    id: number
    createdAt: number
    reason: number
    _all: number
  }


  export type GymMembershipCancellationAvgAggregateInputType = {
    id?: true
  }

  export type GymMembershipCancellationSumAggregateInputType = {
    id?: true
  }

  export type GymMembershipCancellationMinAggregateInputType = {
    id?: true
    createdAt?: true
    reason?: true
  }

  export type GymMembershipCancellationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    reason?: true
  }

  export type GymMembershipCancellationCountAggregateInputType = {
    id?: true
    createdAt?: true
    reason?: true
    _all?: true
  }

  export type GymMembershipCancellationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymMembershipCancellation to aggregate.
     */
    where?: GymMembershipCancellationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymMembershipCancellations to fetch.
     */
    orderBy?: GymMembershipCancellationOrderByWithRelationInput | GymMembershipCancellationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymMembershipCancellationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymMembershipCancellations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymMembershipCancellations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GymMembershipCancellations
    **/
    _count?: true | GymMembershipCancellationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymMembershipCancellationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymMembershipCancellationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymMembershipCancellationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymMembershipCancellationMaxAggregateInputType
  }

  export type GetGymMembershipCancellationAggregateType<T extends GymMembershipCancellationAggregateArgs> = {
        [P in keyof T & keyof AggregateGymMembershipCancellation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGymMembershipCancellation[P]>
      : GetScalarType<T[P], AggregateGymMembershipCancellation[P]>
  }




  export type GymMembershipCancellationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymMembershipCancellationWhereInput
    orderBy?: GymMembershipCancellationOrderByWithAggregationInput | GymMembershipCancellationOrderByWithAggregationInput[]
    by: GymMembershipCancellationScalarFieldEnum[] | GymMembershipCancellationScalarFieldEnum
    having?: GymMembershipCancellationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymMembershipCancellationCountAggregateInputType | true
    _avg?: GymMembershipCancellationAvgAggregateInputType
    _sum?: GymMembershipCancellationSumAggregateInputType
    _min?: GymMembershipCancellationMinAggregateInputType
    _max?: GymMembershipCancellationMaxAggregateInputType
  }

  export type GymMembershipCancellationGroupByOutputType = {
    id: number
    createdAt: Date
    reason: string | null
    _count: GymMembershipCancellationCountAggregateOutputType | null
    _avg: GymMembershipCancellationAvgAggregateOutputType | null
    _sum: GymMembershipCancellationSumAggregateOutputType | null
    _min: GymMembershipCancellationMinAggregateOutputType | null
    _max: GymMembershipCancellationMaxAggregateOutputType | null
  }

  type GetGymMembershipCancellationGroupByPayload<T extends GymMembershipCancellationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymMembershipCancellationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymMembershipCancellationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymMembershipCancellationGroupByOutputType[P]>
            : GetScalarType<T[P], GymMembershipCancellationGroupByOutputType[P]>
        }
      >
    >


  export type GymMembershipCancellationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    reason?: boolean
    GymMembership?: boolean | GymMembershipCancellation$GymMembershipArgs<ExtArgs>
    _count?: boolean | GymMembershipCancellationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gymMembershipCancellation"]>

  export type GymMembershipCancellationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    reason?: boolean
  }

  export type GymMembershipCancellationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GymMembership?: boolean | GymMembershipCancellation$GymMembershipArgs<ExtArgs>
    _count?: boolean | GymMembershipCancellationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GymMembershipCancellationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GymMembershipCancellation"
    objects: {
      GymMembership: Prisma.$GymMembershipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      reason: string | null
    }, ExtArgs["result"]["gymMembershipCancellation"]>
    composites: {}
  }


  type GymMembershipCancellationGetPayload<S extends boolean | null | undefined | GymMembershipCancellationDefaultArgs> = $Result.GetResult<Prisma.$GymMembershipCancellationPayload, S>

  type GymMembershipCancellationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymMembershipCancellationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymMembershipCancellationCountAggregateInputType | true
    }

  export interface GymMembershipCancellationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GymMembershipCancellation'], meta: { name: 'GymMembershipCancellation' } }
    /**
     * Find zero or one GymMembershipCancellation that matches the filter.
     * @param {GymMembershipCancellationFindUniqueArgs} args - Arguments to find a GymMembershipCancellation
     * @example
     * // Get one GymMembershipCancellation
     * const gymMembershipCancellation = await prisma.gymMembershipCancellation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymMembershipCancellationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipCancellationFindUniqueArgs<ExtArgs>>
    ): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GymMembershipCancellation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymMembershipCancellationFindUniqueOrThrowArgs} args - Arguments to find a GymMembershipCancellation
     * @example
     * // Get one GymMembershipCancellation
     * const gymMembershipCancellation = await prisma.gymMembershipCancellation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymMembershipCancellationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipCancellationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GymMembershipCancellation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipCancellationFindFirstArgs} args - Arguments to find a GymMembershipCancellation
     * @example
     * // Get one GymMembershipCancellation
     * const gymMembershipCancellation = await prisma.gymMembershipCancellation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymMembershipCancellationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipCancellationFindFirstArgs<ExtArgs>>
    ): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GymMembershipCancellation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipCancellationFindFirstOrThrowArgs} args - Arguments to find a GymMembershipCancellation
     * @example
     * // Get one GymMembershipCancellation
     * const gymMembershipCancellation = await prisma.gymMembershipCancellation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymMembershipCancellationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipCancellationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GymMembershipCancellations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipCancellationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GymMembershipCancellations
     * const gymMembershipCancellations = await prisma.gymMembershipCancellation.findMany()
     * 
     * // Get first 10 GymMembershipCancellations
     * const gymMembershipCancellations = await prisma.gymMembershipCancellation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymMembershipCancellationWithIdOnly = await prisma.gymMembershipCancellation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymMembershipCancellationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipCancellationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GymMembershipCancellation.
     * @param {GymMembershipCancellationCreateArgs} args - Arguments to create a GymMembershipCancellation.
     * @example
     * // Create one GymMembershipCancellation
     * const GymMembershipCancellation = await prisma.gymMembershipCancellation.create({
     *   data: {
     *     // ... data to create a GymMembershipCancellation
     *   }
     * })
     * 
    **/
    create<T extends GymMembershipCancellationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipCancellationCreateArgs<ExtArgs>>
    ): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GymMembershipCancellations.
     *     @param {GymMembershipCancellationCreateManyArgs} args - Arguments to create many GymMembershipCancellations.
     *     @example
     *     // Create many GymMembershipCancellations
     *     const gymMembershipCancellation = await prisma.gymMembershipCancellation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymMembershipCancellationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipCancellationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GymMembershipCancellation.
     * @param {GymMembershipCancellationDeleteArgs} args - Arguments to delete one GymMembershipCancellation.
     * @example
     * // Delete one GymMembershipCancellation
     * const GymMembershipCancellation = await prisma.gymMembershipCancellation.delete({
     *   where: {
     *     // ... filter to delete one GymMembershipCancellation
     *   }
     * })
     * 
    **/
    delete<T extends GymMembershipCancellationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipCancellationDeleteArgs<ExtArgs>>
    ): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GymMembershipCancellation.
     * @param {GymMembershipCancellationUpdateArgs} args - Arguments to update one GymMembershipCancellation.
     * @example
     * // Update one GymMembershipCancellation
     * const gymMembershipCancellation = await prisma.gymMembershipCancellation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymMembershipCancellationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipCancellationUpdateArgs<ExtArgs>>
    ): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GymMembershipCancellations.
     * @param {GymMembershipCancellationDeleteManyArgs} args - Arguments to filter GymMembershipCancellations to delete.
     * @example
     * // Delete a few GymMembershipCancellations
     * const { count } = await prisma.gymMembershipCancellation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymMembershipCancellationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymMembershipCancellationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GymMembershipCancellations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipCancellationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GymMembershipCancellations
     * const gymMembershipCancellation = await prisma.gymMembershipCancellation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymMembershipCancellationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipCancellationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GymMembershipCancellation.
     * @param {GymMembershipCancellationUpsertArgs} args - Arguments to update or create a GymMembershipCancellation.
     * @example
     * // Update or create a GymMembershipCancellation
     * const gymMembershipCancellation = await prisma.gymMembershipCancellation.upsert({
     *   create: {
     *     // ... data to create a GymMembershipCancellation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GymMembershipCancellation we want to update
     *   }
     * })
    **/
    upsert<T extends GymMembershipCancellationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymMembershipCancellationUpsertArgs<ExtArgs>>
    ): Prisma__GymMembershipCancellationClient<$Result.GetResult<Prisma.$GymMembershipCancellationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GymMembershipCancellations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipCancellationCountArgs} args - Arguments to filter GymMembershipCancellations to count.
     * @example
     * // Count the number of GymMembershipCancellations
     * const count = await prisma.gymMembershipCancellation.count({
     *   where: {
     *     // ... the filter for the GymMembershipCancellations we want to count
     *   }
     * })
    **/
    count<T extends GymMembershipCancellationCountArgs>(
      args?: Subset<T, GymMembershipCancellationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymMembershipCancellationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GymMembershipCancellation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipCancellationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymMembershipCancellationAggregateArgs>(args: Subset<T, GymMembershipCancellationAggregateArgs>): Prisma.PrismaPromise<GetGymMembershipCancellationAggregateType<T>>

    /**
     * Group by GymMembershipCancellation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymMembershipCancellationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymMembershipCancellationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymMembershipCancellationGroupByArgs['orderBy'] }
        : { orderBy?: GymMembershipCancellationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymMembershipCancellationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymMembershipCancellationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GymMembershipCancellation model
   */
  readonly fields: GymMembershipCancellationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GymMembershipCancellation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymMembershipCancellationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    GymMembership<T extends GymMembershipCancellation$GymMembershipArgs<ExtArgs> = {}>(args?: Subset<T, GymMembershipCancellation$GymMembershipArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymMembershipPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GymMembershipCancellation model
   */ 
  interface GymMembershipCancellationFieldRefs {
    readonly id: FieldRef<"GymMembershipCancellation", 'Int'>
    readonly createdAt: FieldRef<"GymMembershipCancellation", 'DateTime'>
    readonly reason: FieldRef<"GymMembershipCancellation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * GymMembershipCancellation findUnique
   */
  export type GymMembershipCancellationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * Filter, which GymMembershipCancellation to fetch.
     */
    where: GymMembershipCancellationWhereUniqueInput
  }


  /**
   * GymMembershipCancellation findUniqueOrThrow
   */
  export type GymMembershipCancellationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * Filter, which GymMembershipCancellation to fetch.
     */
    where: GymMembershipCancellationWhereUniqueInput
  }


  /**
   * GymMembershipCancellation findFirst
   */
  export type GymMembershipCancellationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * Filter, which GymMembershipCancellation to fetch.
     */
    where?: GymMembershipCancellationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymMembershipCancellations to fetch.
     */
    orderBy?: GymMembershipCancellationOrderByWithRelationInput | GymMembershipCancellationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymMembershipCancellations.
     */
    cursor?: GymMembershipCancellationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymMembershipCancellations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymMembershipCancellations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymMembershipCancellations.
     */
    distinct?: GymMembershipCancellationScalarFieldEnum | GymMembershipCancellationScalarFieldEnum[]
  }


  /**
   * GymMembershipCancellation findFirstOrThrow
   */
  export type GymMembershipCancellationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * Filter, which GymMembershipCancellation to fetch.
     */
    where?: GymMembershipCancellationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymMembershipCancellations to fetch.
     */
    orderBy?: GymMembershipCancellationOrderByWithRelationInput | GymMembershipCancellationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymMembershipCancellations.
     */
    cursor?: GymMembershipCancellationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymMembershipCancellations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymMembershipCancellations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymMembershipCancellations.
     */
    distinct?: GymMembershipCancellationScalarFieldEnum | GymMembershipCancellationScalarFieldEnum[]
  }


  /**
   * GymMembershipCancellation findMany
   */
  export type GymMembershipCancellationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * Filter, which GymMembershipCancellations to fetch.
     */
    where?: GymMembershipCancellationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymMembershipCancellations to fetch.
     */
    orderBy?: GymMembershipCancellationOrderByWithRelationInput | GymMembershipCancellationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GymMembershipCancellations.
     */
    cursor?: GymMembershipCancellationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymMembershipCancellations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymMembershipCancellations.
     */
    skip?: number
    distinct?: GymMembershipCancellationScalarFieldEnum | GymMembershipCancellationScalarFieldEnum[]
  }


  /**
   * GymMembershipCancellation create
   */
  export type GymMembershipCancellationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * The data needed to create a GymMembershipCancellation.
     */
    data?: XOR<GymMembershipCancellationCreateInput, GymMembershipCancellationUncheckedCreateInput>
  }


  /**
   * GymMembershipCancellation createMany
   */
  export type GymMembershipCancellationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GymMembershipCancellations.
     */
    data: GymMembershipCancellationCreateManyInput | GymMembershipCancellationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GymMembershipCancellation update
   */
  export type GymMembershipCancellationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * The data needed to update a GymMembershipCancellation.
     */
    data: XOR<GymMembershipCancellationUpdateInput, GymMembershipCancellationUncheckedUpdateInput>
    /**
     * Choose, which GymMembershipCancellation to update.
     */
    where: GymMembershipCancellationWhereUniqueInput
  }


  /**
   * GymMembershipCancellation updateMany
   */
  export type GymMembershipCancellationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GymMembershipCancellations.
     */
    data: XOR<GymMembershipCancellationUpdateManyMutationInput, GymMembershipCancellationUncheckedUpdateManyInput>
    /**
     * Filter which GymMembershipCancellations to update
     */
    where?: GymMembershipCancellationWhereInput
  }


  /**
   * GymMembershipCancellation upsert
   */
  export type GymMembershipCancellationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * The filter to search for the GymMembershipCancellation to update in case it exists.
     */
    where: GymMembershipCancellationWhereUniqueInput
    /**
     * In case the GymMembershipCancellation found by the `where` argument doesn't exist, create a new GymMembershipCancellation with this data.
     */
    create: XOR<GymMembershipCancellationCreateInput, GymMembershipCancellationUncheckedCreateInput>
    /**
     * In case the GymMembershipCancellation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymMembershipCancellationUpdateInput, GymMembershipCancellationUncheckedUpdateInput>
  }


  /**
   * GymMembershipCancellation delete
   */
  export type GymMembershipCancellationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
    /**
     * Filter which GymMembershipCancellation to delete.
     */
    where: GymMembershipCancellationWhereUniqueInput
  }


  /**
   * GymMembershipCancellation deleteMany
   */
  export type GymMembershipCancellationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymMembershipCancellations to delete
     */
    where?: GymMembershipCancellationWhereInput
  }


  /**
   * GymMembershipCancellation.GymMembership
   */
  export type GymMembershipCancellation$GymMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembership
     */
    select?: GymMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipInclude<ExtArgs> | null
    where?: GymMembershipWhereInput
    orderBy?: GymMembershipOrderByWithRelationInput | GymMembershipOrderByWithRelationInput[]
    cursor?: GymMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GymMembershipScalarFieldEnum | GymMembershipScalarFieldEnum[]
  }


  /**
   * GymMembershipCancellation without action
   */
  export type GymMembershipCancellationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymMembershipCancellation
     */
    select?: GymMembershipCancellationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymMembershipCancellationInclude<ExtArgs> | null
  }



  /**
   * Model FavoriteGym
   */

  export type AggregateFavoriteGym = {
    _count: FavoriteGymCountAggregateOutputType | null
    _avg: FavoriteGymAvgAggregateOutputType | null
    _sum: FavoriteGymSumAggregateOutputType | null
    _min: FavoriteGymMinAggregateOutputType | null
    _max: FavoriteGymMaxAggregateOutputType | null
  }

  export type FavoriteGymAvgAggregateOutputType = {
    gymId: number | null
    userId: number | null
  }

  export type FavoriteGymSumAggregateOutputType = {
    gymId: number | null
    userId: number | null
  }

  export type FavoriteGymMinAggregateOutputType = {
    gymId: number | null
    userId: number | null
    assignedAt: Date | null
  }

  export type FavoriteGymMaxAggregateOutputType = {
    gymId: number | null
    userId: number | null
    assignedAt: Date | null
  }

  export type FavoriteGymCountAggregateOutputType = {
    gymId: number
    userId: number
    assignedAt: number
    _all: number
  }


  export type FavoriteGymAvgAggregateInputType = {
    gymId?: true
    userId?: true
  }

  export type FavoriteGymSumAggregateInputType = {
    gymId?: true
    userId?: true
  }

  export type FavoriteGymMinAggregateInputType = {
    gymId?: true
    userId?: true
    assignedAt?: true
  }

  export type FavoriteGymMaxAggregateInputType = {
    gymId?: true
    userId?: true
    assignedAt?: true
  }

  export type FavoriteGymCountAggregateInputType = {
    gymId?: true
    userId?: true
    assignedAt?: true
    _all?: true
  }

  export type FavoriteGymAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteGym to aggregate.
     */
    where?: FavoriteGymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteGyms to fetch.
     */
    orderBy?: FavoriteGymOrderByWithRelationInput | FavoriteGymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteGymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteGyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteGyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteGyms
    **/
    _count?: true | FavoriteGymCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteGymAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteGymSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteGymMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteGymMaxAggregateInputType
  }

  export type GetFavoriteGymAggregateType<T extends FavoriteGymAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteGym]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteGym[P]>
      : GetScalarType<T[P], AggregateFavoriteGym[P]>
  }




  export type FavoriteGymGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteGymWhereInput
    orderBy?: FavoriteGymOrderByWithAggregationInput | FavoriteGymOrderByWithAggregationInput[]
    by: FavoriteGymScalarFieldEnum[] | FavoriteGymScalarFieldEnum
    having?: FavoriteGymScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteGymCountAggregateInputType | true
    _avg?: FavoriteGymAvgAggregateInputType
    _sum?: FavoriteGymSumAggregateInputType
    _min?: FavoriteGymMinAggregateInputType
    _max?: FavoriteGymMaxAggregateInputType
  }

  export type FavoriteGymGroupByOutputType = {
    gymId: number
    userId: number
    assignedAt: Date
    _count: FavoriteGymCountAggregateOutputType | null
    _avg: FavoriteGymAvgAggregateOutputType | null
    _sum: FavoriteGymSumAggregateOutputType | null
    _min: FavoriteGymMinAggregateOutputType | null
    _max: FavoriteGymMaxAggregateOutputType | null
  }

  type GetFavoriteGymGroupByPayload<T extends FavoriteGymGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGymGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGymGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGymGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGymGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteGymSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    gymId?: boolean
    userId?: boolean
    assignedAt?: boolean
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteGym"]>

  export type FavoriteGymSelectScalar = {
    gymId?: boolean
    userId?: boolean
    assignedAt?: boolean
  }

  export type FavoriteGymInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $FavoriteGymPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteGym"
    objects: {
      Gym: Prisma.$GymPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      gymId: number
      userId: number
      assignedAt: Date
    }, ExtArgs["result"]["favoriteGym"]>
    composites: {}
  }


  type FavoriteGymGetPayload<S extends boolean | null | undefined | FavoriteGymDefaultArgs> = $Result.GetResult<Prisma.$FavoriteGymPayload, S>

  type FavoriteGymCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteGymFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteGymCountAggregateInputType | true
    }

  export interface FavoriteGymDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteGym'], meta: { name: 'FavoriteGym' } }
    /**
     * Find zero or one FavoriteGym that matches the filter.
     * @param {FavoriteGymFindUniqueArgs} args - Arguments to find a FavoriteGym
     * @example
     * // Get one FavoriteGym
     * const favoriteGym = await prisma.favoriteGym.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavoriteGymFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteGymFindUniqueArgs<ExtArgs>>
    ): Prisma__FavoriteGymClient<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FavoriteGym that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavoriteGymFindUniqueOrThrowArgs} args - Arguments to find a FavoriteGym
     * @example
     * // Get one FavoriteGym
     * const favoriteGym = await prisma.favoriteGym.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavoriteGymFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteGymFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FavoriteGymClient<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FavoriteGym that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGymFindFirstArgs} args - Arguments to find a FavoriteGym
     * @example
     * // Get one FavoriteGym
     * const favoriteGym = await prisma.favoriteGym.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavoriteGymFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteGymFindFirstArgs<ExtArgs>>
    ): Prisma__FavoriteGymClient<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FavoriteGym that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGymFindFirstOrThrowArgs} args - Arguments to find a FavoriteGym
     * @example
     * // Get one FavoriteGym
     * const favoriteGym = await prisma.favoriteGym.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavoriteGymFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteGymFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FavoriteGymClient<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FavoriteGyms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGymFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteGyms
     * const favoriteGyms = await prisma.favoriteGym.findMany()
     * 
     * // Get first 10 FavoriteGyms
     * const favoriteGyms = await prisma.favoriteGym.findMany({ take: 10 })
     * 
     * // Only select the `gymId`
     * const favoriteGymWithGymIdOnly = await prisma.favoriteGym.findMany({ select: { gymId: true } })
     * 
    **/
    findMany<T extends FavoriteGymFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteGymFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FavoriteGym.
     * @param {FavoriteGymCreateArgs} args - Arguments to create a FavoriteGym.
     * @example
     * // Create one FavoriteGym
     * const FavoriteGym = await prisma.favoriteGym.create({
     *   data: {
     *     // ... data to create a FavoriteGym
     *   }
     * })
     * 
    **/
    create<T extends FavoriteGymCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteGymCreateArgs<ExtArgs>>
    ): Prisma__FavoriteGymClient<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FavoriteGyms.
     *     @param {FavoriteGymCreateManyArgs} args - Arguments to create many FavoriteGyms.
     *     @example
     *     // Create many FavoriteGyms
     *     const favoriteGym = await prisma.favoriteGym.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavoriteGymCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteGymCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FavoriteGym.
     * @param {FavoriteGymDeleteArgs} args - Arguments to delete one FavoriteGym.
     * @example
     * // Delete one FavoriteGym
     * const FavoriteGym = await prisma.favoriteGym.delete({
     *   where: {
     *     // ... filter to delete one FavoriteGym
     *   }
     * })
     * 
    **/
    delete<T extends FavoriteGymDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteGymDeleteArgs<ExtArgs>>
    ): Prisma__FavoriteGymClient<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FavoriteGym.
     * @param {FavoriteGymUpdateArgs} args - Arguments to update one FavoriteGym.
     * @example
     * // Update one FavoriteGym
     * const favoriteGym = await prisma.favoriteGym.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavoriteGymUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteGymUpdateArgs<ExtArgs>>
    ): Prisma__FavoriteGymClient<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FavoriteGyms.
     * @param {FavoriteGymDeleteManyArgs} args - Arguments to filter FavoriteGyms to delete.
     * @example
     * // Delete a few FavoriteGyms
     * const { count } = await prisma.favoriteGym.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavoriteGymDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteGymDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteGyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGymUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteGyms
     * const favoriteGym = await prisma.favoriteGym.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavoriteGymUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteGymUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoriteGym.
     * @param {FavoriteGymUpsertArgs} args - Arguments to update or create a FavoriteGym.
     * @example
     * // Update or create a FavoriteGym
     * const favoriteGym = await prisma.favoriteGym.upsert({
     *   create: {
     *     // ... data to create a FavoriteGym
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteGym we want to update
     *   }
     * })
    **/
    upsert<T extends FavoriteGymUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteGymUpsertArgs<ExtArgs>>
    ): Prisma__FavoriteGymClient<$Result.GetResult<Prisma.$FavoriteGymPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FavoriteGyms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGymCountArgs} args - Arguments to filter FavoriteGyms to count.
     * @example
     * // Count the number of FavoriteGyms
     * const count = await prisma.favoriteGym.count({
     *   where: {
     *     // ... the filter for the FavoriteGyms we want to count
     *   }
     * })
    **/
    count<T extends FavoriteGymCountArgs>(
      args?: Subset<T, FavoriteGymCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteGymCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteGym.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGymAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteGymAggregateArgs>(args: Subset<T, FavoriteGymAggregateArgs>): Prisma.PrismaPromise<GetFavoriteGymAggregateType<T>>

    /**
     * Group by FavoriteGym.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGymGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteGymGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteGymGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteGymGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteGymGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGymGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteGym model
   */
  readonly fields: FavoriteGymFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteGym.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteGymClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Gym<T extends GymDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymDefaultArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FavoriteGym model
   */ 
  interface FavoriteGymFieldRefs {
    readonly gymId: FieldRef<"FavoriteGym", 'Int'>
    readonly userId: FieldRef<"FavoriteGym", 'Int'>
    readonly assignedAt: FieldRef<"FavoriteGym", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FavoriteGym findUnique
   */
  export type FavoriteGymFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGym to fetch.
     */
    where: FavoriteGymWhereUniqueInput
  }


  /**
   * FavoriteGym findUniqueOrThrow
   */
  export type FavoriteGymFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGym to fetch.
     */
    where: FavoriteGymWhereUniqueInput
  }


  /**
   * FavoriteGym findFirst
   */
  export type FavoriteGymFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGym to fetch.
     */
    where?: FavoriteGymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteGyms to fetch.
     */
    orderBy?: FavoriteGymOrderByWithRelationInput | FavoriteGymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteGyms.
     */
    cursor?: FavoriteGymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteGyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteGyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteGyms.
     */
    distinct?: FavoriteGymScalarFieldEnum | FavoriteGymScalarFieldEnum[]
  }


  /**
   * FavoriteGym findFirstOrThrow
   */
  export type FavoriteGymFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGym to fetch.
     */
    where?: FavoriteGymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteGyms to fetch.
     */
    orderBy?: FavoriteGymOrderByWithRelationInput | FavoriteGymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteGyms.
     */
    cursor?: FavoriteGymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteGyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteGyms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteGyms.
     */
    distinct?: FavoriteGymScalarFieldEnum | FavoriteGymScalarFieldEnum[]
  }


  /**
   * FavoriteGym findMany
   */
  export type FavoriteGymFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGyms to fetch.
     */
    where?: FavoriteGymWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteGyms to fetch.
     */
    orderBy?: FavoriteGymOrderByWithRelationInput | FavoriteGymOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteGyms.
     */
    cursor?: FavoriteGymWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteGyms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteGyms.
     */
    skip?: number
    distinct?: FavoriteGymScalarFieldEnum | FavoriteGymScalarFieldEnum[]
  }


  /**
   * FavoriteGym create
   */
  export type FavoriteGymCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteGym.
     */
    data: XOR<FavoriteGymCreateInput, FavoriteGymUncheckedCreateInput>
  }


  /**
   * FavoriteGym createMany
   */
  export type FavoriteGymCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteGyms.
     */
    data: FavoriteGymCreateManyInput | FavoriteGymCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FavoriteGym update
   */
  export type FavoriteGymUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteGym.
     */
    data: XOR<FavoriteGymUpdateInput, FavoriteGymUncheckedUpdateInput>
    /**
     * Choose, which FavoriteGym to update.
     */
    where: FavoriteGymWhereUniqueInput
  }


  /**
   * FavoriteGym updateMany
   */
  export type FavoriteGymUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteGyms.
     */
    data: XOR<FavoriteGymUpdateManyMutationInput, FavoriteGymUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteGyms to update
     */
    where?: FavoriteGymWhereInput
  }


  /**
   * FavoriteGym upsert
   */
  export type FavoriteGymUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteGym to update in case it exists.
     */
    where: FavoriteGymWhereUniqueInput
    /**
     * In case the FavoriteGym found by the `where` argument doesn't exist, create a new FavoriteGym with this data.
     */
    create: XOR<FavoriteGymCreateInput, FavoriteGymUncheckedCreateInput>
    /**
     * In case the FavoriteGym was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteGymUpdateInput, FavoriteGymUncheckedUpdateInput>
  }


  /**
   * FavoriteGym delete
   */
  export type FavoriteGymDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
    /**
     * Filter which FavoriteGym to delete.
     */
    where: FavoriteGymWhereUniqueInput
  }


  /**
   * FavoriteGym deleteMany
   */
  export type FavoriteGymDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteGyms to delete
     */
    where?: FavoriteGymWhereInput
  }


  /**
   * FavoriteGym without action
   */
  export type FavoriteGymDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGym
     */
    select?: FavoriteGymSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteGymInclude<ExtArgs> | null
  }



  /**
   * Model GymAccessHistory
   */

  export type AggregateGymAccessHistory = {
    _count: GymAccessHistoryCountAggregateOutputType | null
    _avg: GymAccessHistoryAvgAggregateOutputType | null
    _sum: GymAccessHistorySumAggregateOutputType | null
    _min: GymAccessHistoryMinAggregateOutputType | null
    _max: GymAccessHistoryMaxAggregateOutputType | null
  }

  export type GymAccessHistoryAvgAggregateOutputType = {
    id: number | null
    gymId: number | null
    userId: number | null
  }

  export type GymAccessHistorySumAggregateOutputType = {
    id: number | null
    gymId: number | null
    userId: number | null
  }

  export type GymAccessHistoryMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    gymId: number | null
    userId: number | null
    entryAt: Date | null
    exitAt: Date | null
  }

  export type GymAccessHistoryMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    gymId: number | null
    userId: number | null
    entryAt: Date | null
    exitAt: Date | null
  }

  export type GymAccessHistoryCountAggregateOutputType = {
    id: number
    createdAt: number
    gymId: number
    userId: number
    entryAt: number
    exitAt: number
    _all: number
  }


  export type GymAccessHistoryAvgAggregateInputType = {
    id?: true
    gymId?: true
    userId?: true
  }

  export type GymAccessHistorySumAggregateInputType = {
    id?: true
    gymId?: true
    userId?: true
  }

  export type GymAccessHistoryMinAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    userId?: true
    entryAt?: true
    exitAt?: true
  }

  export type GymAccessHistoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    userId?: true
    entryAt?: true
    exitAt?: true
  }

  export type GymAccessHistoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    userId?: true
    entryAt?: true
    exitAt?: true
    _all?: true
  }

  export type GymAccessHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymAccessHistory to aggregate.
     */
    where?: GymAccessHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymAccessHistories to fetch.
     */
    orderBy?: GymAccessHistoryOrderByWithRelationInput | GymAccessHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymAccessHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymAccessHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymAccessHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GymAccessHistories
    **/
    _count?: true | GymAccessHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymAccessHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymAccessHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymAccessHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymAccessHistoryMaxAggregateInputType
  }

  export type GetGymAccessHistoryAggregateType<T extends GymAccessHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGymAccessHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGymAccessHistory[P]>
      : GetScalarType<T[P], AggregateGymAccessHistory[P]>
  }




  export type GymAccessHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymAccessHistoryWhereInput
    orderBy?: GymAccessHistoryOrderByWithAggregationInput | GymAccessHistoryOrderByWithAggregationInput[]
    by: GymAccessHistoryScalarFieldEnum[] | GymAccessHistoryScalarFieldEnum
    having?: GymAccessHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymAccessHistoryCountAggregateInputType | true
    _avg?: GymAccessHistoryAvgAggregateInputType
    _sum?: GymAccessHistorySumAggregateInputType
    _min?: GymAccessHistoryMinAggregateInputType
    _max?: GymAccessHistoryMaxAggregateInputType
  }

  export type GymAccessHistoryGroupByOutputType = {
    id: number
    createdAt: Date
    gymId: number
    userId: number
    entryAt: Date
    exitAt: Date | null
    _count: GymAccessHistoryCountAggregateOutputType | null
    _avg: GymAccessHistoryAvgAggregateOutputType | null
    _sum: GymAccessHistorySumAggregateOutputType | null
    _min: GymAccessHistoryMinAggregateOutputType | null
    _max: GymAccessHistoryMaxAggregateOutputType | null
  }

  type GetGymAccessHistoryGroupByPayload<T extends GymAccessHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymAccessHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymAccessHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymAccessHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], GymAccessHistoryGroupByOutputType[P]>
        }
      >
    >


  export type GymAccessHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    gymId?: boolean
    userId?: boolean
    entryAt?: boolean
    exitAt?: boolean
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gymAccessHistory"]>

  export type GymAccessHistorySelectScalar = {
    id?: boolean
    createdAt?: boolean
    gymId?: boolean
    userId?: boolean
    entryAt?: boolean
    exitAt?: boolean
  }

  export type GymAccessHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $GymAccessHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GymAccessHistory"
    objects: {
      Gym: Prisma.$GymPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      gymId: number
      userId: number
      entryAt: Date
      exitAt: Date | null
    }, ExtArgs["result"]["gymAccessHistory"]>
    composites: {}
  }


  type GymAccessHistoryGetPayload<S extends boolean | null | undefined | GymAccessHistoryDefaultArgs> = $Result.GetResult<Prisma.$GymAccessHistoryPayload, S>

  type GymAccessHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymAccessHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymAccessHistoryCountAggregateInputType | true
    }

  export interface GymAccessHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GymAccessHistory'], meta: { name: 'GymAccessHistory' } }
    /**
     * Find zero or one GymAccessHistory that matches the filter.
     * @param {GymAccessHistoryFindUniqueArgs} args - Arguments to find a GymAccessHistory
     * @example
     * // Get one GymAccessHistory
     * const gymAccessHistory = await prisma.gymAccessHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymAccessHistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymAccessHistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__GymAccessHistoryClient<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GymAccessHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymAccessHistoryFindUniqueOrThrowArgs} args - Arguments to find a GymAccessHistory
     * @example
     * // Get one GymAccessHistory
     * const gymAccessHistory = await prisma.gymAccessHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymAccessHistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymAccessHistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymAccessHistoryClient<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GymAccessHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAccessHistoryFindFirstArgs} args - Arguments to find a GymAccessHistory
     * @example
     * // Get one GymAccessHistory
     * const gymAccessHistory = await prisma.gymAccessHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymAccessHistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymAccessHistoryFindFirstArgs<ExtArgs>>
    ): Prisma__GymAccessHistoryClient<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GymAccessHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAccessHistoryFindFirstOrThrowArgs} args - Arguments to find a GymAccessHistory
     * @example
     * // Get one GymAccessHistory
     * const gymAccessHistory = await prisma.gymAccessHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymAccessHistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymAccessHistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymAccessHistoryClient<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GymAccessHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAccessHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GymAccessHistories
     * const gymAccessHistories = await prisma.gymAccessHistory.findMany()
     * 
     * // Get first 10 GymAccessHistories
     * const gymAccessHistories = await prisma.gymAccessHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymAccessHistoryWithIdOnly = await prisma.gymAccessHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymAccessHistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymAccessHistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GymAccessHistory.
     * @param {GymAccessHistoryCreateArgs} args - Arguments to create a GymAccessHistory.
     * @example
     * // Create one GymAccessHistory
     * const GymAccessHistory = await prisma.gymAccessHistory.create({
     *   data: {
     *     // ... data to create a GymAccessHistory
     *   }
     * })
     * 
    **/
    create<T extends GymAccessHistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymAccessHistoryCreateArgs<ExtArgs>>
    ): Prisma__GymAccessHistoryClient<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GymAccessHistories.
     *     @param {GymAccessHistoryCreateManyArgs} args - Arguments to create many GymAccessHistories.
     *     @example
     *     // Create many GymAccessHistories
     *     const gymAccessHistory = await prisma.gymAccessHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymAccessHistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymAccessHistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GymAccessHistory.
     * @param {GymAccessHistoryDeleteArgs} args - Arguments to delete one GymAccessHistory.
     * @example
     * // Delete one GymAccessHistory
     * const GymAccessHistory = await prisma.gymAccessHistory.delete({
     *   where: {
     *     // ... filter to delete one GymAccessHistory
     *   }
     * })
     * 
    **/
    delete<T extends GymAccessHistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymAccessHistoryDeleteArgs<ExtArgs>>
    ): Prisma__GymAccessHistoryClient<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GymAccessHistory.
     * @param {GymAccessHistoryUpdateArgs} args - Arguments to update one GymAccessHistory.
     * @example
     * // Update one GymAccessHistory
     * const gymAccessHistory = await prisma.gymAccessHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymAccessHistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymAccessHistoryUpdateArgs<ExtArgs>>
    ): Prisma__GymAccessHistoryClient<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GymAccessHistories.
     * @param {GymAccessHistoryDeleteManyArgs} args - Arguments to filter GymAccessHistories to delete.
     * @example
     * // Delete a few GymAccessHistories
     * const { count } = await prisma.gymAccessHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymAccessHistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymAccessHistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GymAccessHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAccessHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GymAccessHistories
     * const gymAccessHistory = await prisma.gymAccessHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymAccessHistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymAccessHistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GymAccessHistory.
     * @param {GymAccessHistoryUpsertArgs} args - Arguments to update or create a GymAccessHistory.
     * @example
     * // Update or create a GymAccessHistory
     * const gymAccessHistory = await prisma.gymAccessHistory.upsert({
     *   create: {
     *     // ... data to create a GymAccessHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GymAccessHistory we want to update
     *   }
     * })
    **/
    upsert<T extends GymAccessHistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymAccessHistoryUpsertArgs<ExtArgs>>
    ): Prisma__GymAccessHistoryClient<$Result.GetResult<Prisma.$GymAccessHistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GymAccessHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAccessHistoryCountArgs} args - Arguments to filter GymAccessHistories to count.
     * @example
     * // Count the number of GymAccessHistories
     * const count = await prisma.gymAccessHistory.count({
     *   where: {
     *     // ... the filter for the GymAccessHistories we want to count
     *   }
     * })
    **/
    count<T extends GymAccessHistoryCountArgs>(
      args?: Subset<T, GymAccessHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymAccessHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GymAccessHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAccessHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymAccessHistoryAggregateArgs>(args: Subset<T, GymAccessHistoryAggregateArgs>): Prisma.PrismaPromise<GetGymAccessHistoryAggregateType<T>>

    /**
     * Group by GymAccessHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymAccessHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymAccessHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymAccessHistoryGroupByArgs['orderBy'] }
        : { orderBy?: GymAccessHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymAccessHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymAccessHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GymAccessHistory model
   */
  readonly fields: GymAccessHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GymAccessHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymAccessHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Gym<T extends GymDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymDefaultArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GymAccessHistory model
   */ 
  interface GymAccessHistoryFieldRefs {
    readonly id: FieldRef<"GymAccessHistory", 'Int'>
    readonly createdAt: FieldRef<"GymAccessHistory", 'DateTime'>
    readonly gymId: FieldRef<"GymAccessHistory", 'Int'>
    readonly userId: FieldRef<"GymAccessHistory", 'Int'>
    readonly entryAt: FieldRef<"GymAccessHistory", 'DateTime'>
    readonly exitAt: FieldRef<"GymAccessHistory", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * GymAccessHistory findUnique
   */
  export type GymAccessHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymAccessHistory to fetch.
     */
    where: GymAccessHistoryWhereUniqueInput
  }


  /**
   * GymAccessHistory findUniqueOrThrow
   */
  export type GymAccessHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymAccessHistory to fetch.
     */
    where: GymAccessHistoryWhereUniqueInput
  }


  /**
   * GymAccessHistory findFirst
   */
  export type GymAccessHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymAccessHistory to fetch.
     */
    where?: GymAccessHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymAccessHistories to fetch.
     */
    orderBy?: GymAccessHistoryOrderByWithRelationInput | GymAccessHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymAccessHistories.
     */
    cursor?: GymAccessHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymAccessHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymAccessHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymAccessHistories.
     */
    distinct?: GymAccessHistoryScalarFieldEnum | GymAccessHistoryScalarFieldEnum[]
  }


  /**
   * GymAccessHistory findFirstOrThrow
   */
  export type GymAccessHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymAccessHistory to fetch.
     */
    where?: GymAccessHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymAccessHistories to fetch.
     */
    orderBy?: GymAccessHistoryOrderByWithRelationInput | GymAccessHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymAccessHistories.
     */
    cursor?: GymAccessHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymAccessHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymAccessHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymAccessHistories.
     */
    distinct?: GymAccessHistoryScalarFieldEnum | GymAccessHistoryScalarFieldEnum[]
  }


  /**
   * GymAccessHistory findMany
   */
  export type GymAccessHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymAccessHistories to fetch.
     */
    where?: GymAccessHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymAccessHistories to fetch.
     */
    orderBy?: GymAccessHistoryOrderByWithRelationInput | GymAccessHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GymAccessHistories.
     */
    cursor?: GymAccessHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymAccessHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymAccessHistories.
     */
    skip?: number
    distinct?: GymAccessHistoryScalarFieldEnum | GymAccessHistoryScalarFieldEnum[]
  }


  /**
   * GymAccessHistory create
   */
  export type GymAccessHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a GymAccessHistory.
     */
    data: XOR<GymAccessHistoryCreateInput, GymAccessHistoryUncheckedCreateInput>
  }


  /**
   * GymAccessHistory createMany
   */
  export type GymAccessHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GymAccessHistories.
     */
    data: GymAccessHistoryCreateManyInput | GymAccessHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GymAccessHistory update
   */
  export type GymAccessHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a GymAccessHistory.
     */
    data: XOR<GymAccessHistoryUpdateInput, GymAccessHistoryUncheckedUpdateInput>
    /**
     * Choose, which GymAccessHistory to update.
     */
    where: GymAccessHistoryWhereUniqueInput
  }


  /**
   * GymAccessHistory updateMany
   */
  export type GymAccessHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GymAccessHistories.
     */
    data: XOR<GymAccessHistoryUpdateManyMutationInput, GymAccessHistoryUncheckedUpdateManyInput>
    /**
     * Filter which GymAccessHistories to update
     */
    where?: GymAccessHistoryWhereInput
  }


  /**
   * GymAccessHistory upsert
   */
  export type GymAccessHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the GymAccessHistory to update in case it exists.
     */
    where: GymAccessHistoryWhereUniqueInput
    /**
     * In case the GymAccessHistory found by the `where` argument doesn't exist, create a new GymAccessHistory with this data.
     */
    create: XOR<GymAccessHistoryCreateInput, GymAccessHistoryUncheckedCreateInput>
    /**
     * In case the GymAccessHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymAccessHistoryUpdateInput, GymAccessHistoryUncheckedUpdateInput>
  }


  /**
   * GymAccessHistory delete
   */
  export type GymAccessHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
    /**
     * Filter which GymAccessHistory to delete.
     */
    where: GymAccessHistoryWhereUniqueInput
  }


  /**
   * GymAccessHistory deleteMany
   */
  export type GymAccessHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymAccessHistories to delete
     */
    where?: GymAccessHistoryWhereInput
  }


  /**
   * GymAccessHistory without action
   */
  export type GymAccessHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymAccessHistory
     */
    select?: GymAccessHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymAccessHistoryInclude<ExtArgs> | null
  }



  /**
   * Model GymPassHistory
   */

  export type AggregateGymPassHistory = {
    _count: GymPassHistoryCountAggregateOutputType | null
    _avg: GymPassHistoryAvgAggregateOutputType | null
    _sum: GymPassHistorySumAggregateOutputType | null
    _min: GymPassHistoryMinAggregateOutputType | null
    _max: GymPassHistoryMaxAggregateOutputType | null
  }

  export type GymPassHistoryAvgAggregateOutputType = {
    id: number | null
    gymId: number | null
    userId: number | null
  }

  export type GymPassHistorySumAggregateOutputType = {
    id: number | null
    gymId: number | null
    userId: number | null
  }

  export type GymPassHistoryMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    gymId: number | null
    userId: number | null
    hash: string | null
  }

  export type GymPassHistoryMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    gymId: number | null
    userId: number | null
    hash: string | null
  }

  export type GymPassHistoryCountAggregateOutputType = {
    id: number
    createdAt: number
    gymId: number
    userId: number
    hash: number
    _all: number
  }


  export type GymPassHistoryAvgAggregateInputType = {
    id?: true
    gymId?: true
    userId?: true
  }

  export type GymPassHistorySumAggregateInputType = {
    id?: true
    gymId?: true
    userId?: true
  }

  export type GymPassHistoryMinAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    userId?: true
    hash?: true
  }

  export type GymPassHistoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    userId?: true
    hash?: true
  }

  export type GymPassHistoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    gymId?: true
    userId?: true
    hash?: true
    _all?: true
  }

  export type GymPassHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymPassHistory to aggregate.
     */
    where?: GymPassHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymPassHistories to fetch.
     */
    orderBy?: GymPassHistoryOrderByWithRelationInput | GymPassHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GymPassHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymPassHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymPassHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GymPassHistories
    **/
    _count?: true | GymPassHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GymPassHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GymPassHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GymPassHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GymPassHistoryMaxAggregateInputType
  }

  export type GetGymPassHistoryAggregateType<T extends GymPassHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGymPassHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGymPassHistory[P]>
      : GetScalarType<T[P], AggregateGymPassHistory[P]>
  }




  export type GymPassHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GymPassHistoryWhereInput
    orderBy?: GymPassHistoryOrderByWithAggregationInput | GymPassHistoryOrderByWithAggregationInput[]
    by: GymPassHistoryScalarFieldEnum[] | GymPassHistoryScalarFieldEnum
    having?: GymPassHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GymPassHistoryCountAggregateInputType | true
    _avg?: GymPassHistoryAvgAggregateInputType
    _sum?: GymPassHistorySumAggregateInputType
    _min?: GymPassHistoryMinAggregateInputType
    _max?: GymPassHistoryMaxAggregateInputType
  }

  export type GymPassHistoryGroupByOutputType = {
    id: number
    createdAt: Date
    gymId: number
    userId: number
    hash: string
    _count: GymPassHistoryCountAggregateOutputType | null
    _avg: GymPassHistoryAvgAggregateOutputType | null
    _sum: GymPassHistorySumAggregateOutputType | null
    _min: GymPassHistoryMinAggregateOutputType | null
    _max: GymPassHistoryMaxAggregateOutputType | null
  }

  type GetGymPassHistoryGroupByPayload<T extends GymPassHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GymPassHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GymPassHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GymPassHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], GymPassHistoryGroupByOutputType[P]>
        }
      >
    >


  export type GymPassHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    gymId?: boolean
    userId?: boolean
    hash?: boolean
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gymPassHistory"]>

  export type GymPassHistorySelectScalar = {
    id?: boolean
    createdAt?: boolean
    gymId?: boolean
    userId?: boolean
    hash?: boolean
  }

  export type GymPassHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Gym?: boolean | GymDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $GymPassHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GymPassHistory"
    objects: {
      Gym: Prisma.$GymPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      gymId: number
      userId: number
      hash: string
    }, ExtArgs["result"]["gymPassHistory"]>
    composites: {}
  }


  type GymPassHistoryGetPayload<S extends boolean | null | undefined | GymPassHistoryDefaultArgs> = $Result.GetResult<Prisma.$GymPassHistoryPayload, S>

  type GymPassHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GymPassHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GymPassHistoryCountAggregateInputType | true
    }

  export interface GymPassHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GymPassHistory'], meta: { name: 'GymPassHistory' } }
    /**
     * Find zero or one GymPassHistory that matches the filter.
     * @param {GymPassHistoryFindUniqueArgs} args - Arguments to find a GymPassHistory
     * @example
     * // Get one GymPassHistory
     * const gymPassHistory = await prisma.gymPassHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GymPassHistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GymPassHistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__GymPassHistoryClient<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GymPassHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GymPassHistoryFindUniqueOrThrowArgs} args - Arguments to find a GymPassHistory
     * @example
     * // Get one GymPassHistory
     * const gymPassHistory = await prisma.gymPassHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GymPassHistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymPassHistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GymPassHistoryClient<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GymPassHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymPassHistoryFindFirstArgs} args - Arguments to find a GymPassHistory
     * @example
     * // Get one GymPassHistory
     * const gymPassHistory = await prisma.gymPassHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GymPassHistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GymPassHistoryFindFirstArgs<ExtArgs>>
    ): Prisma__GymPassHistoryClient<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GymPassHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymPassHistoryFindFirstOrThrowArgs} args - Arguments to find a GymPassHistory
     * @example
     * // Get one GymPassHistory
     * const gymPassHistory = await prisma.gymPassHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GymPassHistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GymPassHistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GymPassHistoryClient<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GymPassHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymPassHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GymPassHistories
     * const gymPassHistories = await prisma.gymPassHistory.findMany()
     * 
     * // Get first 10 GymPassHistories
     * const gymPassHistories = await prisma.gymPassHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gymPassHistoryWithIdOnly = await prisma.gymPassHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GymPassHistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymPassHistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GymPassHistory.
     * @param {GymPassHistoryCreateArgs} args - Arguments to create a GymPassHistory.
     * @example
     * // Create one GymPassHistory
     * const GymPassHistory = await prisma.gymPassHistory.create({
     *   data: {
     *     // ... data to create a GymPassHistory
     *   }
     * })
     * 
    **/
    create<T extends GymPassHistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GymPassHistoryCreateArgs<ExtArgs>>
    ): Prisma__GymPassHistoryClient<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GymPassHistories.
     *     @param {GymPassHistoryCreateManyArgs} args - Arguments to create many GymPassHistories.
     *     @example
     *     // Create many GymPassHistories
     *     const gymPassHistory = await prisma.gymPassHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GymPassHistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymPassHistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GymPassHistory.
     * @param {GymPassHistoryDeleteArgs} args - Arguments to delete one GymPassHistory.
     * @example
     * // Delete one GymPassHistory
     * const GymPassHistory = await prisma.gymPassHistory.delete({
     *   where: {
     *     // ... filter to delete one GymPassHistory
     *   }
     * })
     * 
    **/
    delete<T extends GymPassHistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GymPassHistoryDeleteArgs<ExtArgs>>
    ): Prisma__GymPassHistoryClient<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GymPassHistory.
     * @param {GymPassHistoryUpdateArgs} args - Arguments to update one GymPassHistory.
     * @example
     * // Update one GymPassHistory
     * const gymPassHistory = await prisma.gymPassHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GymPassHistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GymPassHistoryUpdateArgs<ExtArgs>>
    ): Prisma__GymPassHistoryClient<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GymPassHistories.
     * @param {GymPassHistoryDeleteManyArgs} args - Arguments to filter GymPassHistories to delete.
     * @example
     * // Delete a few GymPassHistories
     * const { count } = await prisma.gymPassHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GymPassHistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GymPassHistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GymPassHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymPassHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GymPassHistories
     * const gymPassHistory = await prisma.gymPassHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GymPassHistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GymPassHistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GymPassHistory.
     * @param {GymPassHistoryUpsertArgs} args - Arguments to update or create a GymPassHistory.
     * @example
     * // Update or create a GymPassHistory
     * const gymPassHistory = await prisma.gymPassHistory.upsert({
     *   create: {
     *     // ... data to create a GymPassHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GymPassHistory we want to update
     *   }
     * })
    **/
    upsert<T extends GymPassHistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GymPassHistoryUpsertArgs<ExtArgs>>
    ): Prisma__GymPassHistoryClient<$Result.GetResult<Prisma.$GymPassHistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GymPassHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymPassHistoryCountArgs} args - Arguments to filter GymPassHistories to count.
     * @example
     * // Count the number of GymPassHistories
     * const count = await prisma.gymPassHistory.count({
     *   where: {
     *     // ... the filter for the GymPassHistories we want to count
     *   }
     * })
    **/
    count<T extends GymPassHistoryCountArgs>(
      args?: Subset<T, GymPassHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GymPassHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GymPassHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymPassHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GymPassHistoryAggregateArgs>(args: Subset<T, GymPassHistoryAggregateArgs>): Prisma.PrismaPromise<GetGymPassHistoryAggregateType<T>>

    /**
     * Group by GymPassHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GymPassHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GymPassHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GymPassHistoryGroupByArgs['orderBy'] }
        : { orderBy?: GymPassHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GymPassHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGymPassHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GymPassHistory model
   */
  readonly fields: GymPassHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GymPassHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GymPassHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Gym<T extends GymDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GymDefaultArgs<ExtArgs>>): Prisma__GymClient<$Result.GetResult<Prisma.$GymPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GymPassHistory model
   */ 
  interface GymPassHistoryFieldRefs {
    readonly id: FieldRef<"GymPassHistory", 'Int'>
    readonly createdAt: FieldRef<"GymPassHistory", 'DateTime'>
    readonly gymId: FieldRef<"GymPassHistory", 'Int'>
    readonly userId: FieldRef<"GymPassHistory", 'Int'>
    readonly hash: FieldRef<"GymPassHistory", 'String'>
  }
    

  // Custom InputTypes

  /**
   * GymPassHistory findUnique
   */
  export type GymPassHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymPassHistory to fetch.
     */
    where: GymPassHistoryWhereUniqueInput
  }


  /**
   * GymPassHistory findUniqueOrThrow
   */
  export type GymPassHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymPassHistory to fetch.
     */
    where: GymPassHistoryWhereUniqueInput
  }


  /**
   * GymPassHistory findFirst
   */
  export type GymPassHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymPassHistory to fetch.
     */
    where?: GymPassHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymPassHistories to fetch.
     */
    orderBy?: GymPassHistoryOrderByWithRelationInput | GymPassHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymPassHistories.
     */
    cursor?: GymPassHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymPassHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymPassHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymPassHistories.
     */
    distinct?: GymPassHistoryScalarFieldEnum | GymPassHistoryScalarFieldEnum[]
  }


  /**
   * GymPassHistory findFirstOrThrow
   */
  export type GymPassHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymPassHistory to fetch.
     */
    where?: GymPassHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymPassHistories to fetch.
     */
    orderBy?: GymPassHistoryOrderByWithRelationInput | GymPassHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GymPassHistories.
     */
    cursor?: GymPassHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymPassHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymPassHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GymPassHistories.
     */
    distinct?: GymPassHistoryScalarFieldEnum | GymPassHistoryScalarFieldEnum[]
  }


  /**
   * GymPassHistory findMany
   */
  export type GymPassHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GymPassHistories to fetch.
     */
    where?: GymPassHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GymPassHistories to fetch.
     */
    orderBy?: GymPassHistoryOrderByWithRelationInput | GymPassHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GymPassHistories.
     */
    cursor?: GymPassHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GymPassHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GymPassHistories.
     */
    skip?: number
    distinct?: GymPassHistoryScalarFieldEnum | GymPassHistoryScalarFieldEnum[]
  }


  /**
   * GymPassHistory create
   */
  export type GymPassHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a GymPassHistory.
     */
    data: XOR<GymPassHistoryCreateInput, GymPassHistoryUncheckedCreateInput>
  }


  /**
   * GymPassHistory createMany
   */
  export type GymPassHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GymPassHistories.
     */
    data: GymPassHistoryCreateManyInput | GymPassHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GymPassHistory update
   */
  export type GymPassHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a GymPassHistory.
     */
    data: XOR<GymPassHistoryUpdateInput, GymPassHistoryUncheckedUpdateInput>
    /**
     * Choose, which GymPassHistory to update.
     */
    where: GymPassHistoryWhereUniqueInput
  }


  /**
   * GymPassHistory updateMany
   */
  export type GymPassHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GymPassHistories.
     */
    data: XOR<GymPassHistoryUpdateManyMutationInput, GymPassHistoryUncheckedUpdateManyInput>
    /**
     * Filter which GymPassHistories to update
     */
    where?: GymPassHistoryWhereInput
  }


  /**
   * GymPassHistory upsert
   */
  export type GymPassHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the GymPassHistory to update in case it exists.
     */
    where: GymPassHistoryWhereUniqueInput
    /**
     * In case the GymPassHistory found by the `where` argument doesn't exist, create a new GymPassHistory with this data.
     */
    create: XOR<GymPassHistoryCreateInput, GymPassHistoryUncheckedCreateInput>
    /**
     * In case the GymPassHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GymPassHistoryUpdateInput, GymPassHistoryUncheckedUpdateInput>
  }


  /**
   * GymPassHistory delete
   */
  export type GymPassHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
    /**
     * Filter which GymPassHistory to delete.
     */
    where: GymPassHistoryWhereUniqueInput
  }


  /**
   * GymPassHistory deleteMany
   */
  export type GymPassHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GymPassHistories to delete
     */
    where?: GymPassHistoryWhereInput
  }


  /**
   * GymPassHistory without action
   */
  export type GymPassHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GymPassHistory
     */
    select?: GymPassHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GymPassHistoryInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    loginId: 'loginId',
    loginPw: 'loginPw',
    username: 'username',
    loginType: 'loginType',
    userType: 'userType',
    nickname: 'nickname',
    phone: 'phone',
    isDisable: 'isDisable'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const NoticeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    content: 'content',
    link: 'link',
    userId: 'userId'
  };

  export type NoticeScalarFieldEnum = (typeof NoticeScalarFieldEnum)[keyof typeof NoticeScalarFieldEnum]


  export const BoardScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    content: 'content',
    link: 'link',
    startDay: 'startDay',
    endDay: 'endDay',
    isDisable: 'isDisable',
    userId: 'userId',
    boardType: 'boardType'
  };

  export type BoardScalarFieldEnum = (typeof BoardScalarFieldEnum)[keyof typeof BoardScalarFieldEnum]


  export const BoardImageScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    url: 'url',
    width: 'width',
    height: 'height',
    size: 'size',
    isThumb: 'isThumb',
    boardId: 'boardId'
  };

  export type BoardImageScalarFieldEnum = (typeof BoardImageScalarFieldEnum)[keyof typeof BoardImageScalarFieldEnum]


  export const BoardReplyScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    content: 'content',
    isDisable: 'isDisable',
    userId: 'userId',
    boardId: 'boardId',
    boardReplyId: 'boardReplyId',
    boardType: 'boardType'
  };

  export type BoardReplyScalarFieldEnum = (typeof BoardReplyScalarFieldEnum)[keyof typeof BoardReplyScalarFieldEnum]


  export const BodyPartScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    code: 'code'
  };

  export type BodyPartScalarFieldEnum = (typeof BodyPartScalarFieldEnum)[keyof typeof BodyPartScalarFieldEnum]


  export const GymEquipmentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    code: 'code'
  };

  export type GymEquipmentScalarFieldEnum = (typeof GymEquipmentScalarFieldEnum)[keyof typeof GymEquipmentScalarFieldEnum]


  export const GymEquipmentImageScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    url: 'url',
    width: 'width',
    height: 'height',
    size: 'size',
    isThumb: 'isThumb',
    gymEquipmentId: 'gymEquipmentId'
  };

  export type GymEquipmentImageScalarFieldEnum = (typeof GymEquipmentImageScalarFieldEnum)[keyof typeof GymEquipmentImageScalarFieldEnum]


  export const BodyPartsOnGymEquipmentsScalarFieldEnum: {
    gymEquipmentId: 'gymEquipmentId',
    bodyPartId: 'bodyPartId',
    assignedAt: 'assignedAt'
  };

  export type BodyPartsOnGymEquipmentsScalarFieldEnum = (typeof BodyPartsOnGymEquipmentsScalarFieldEnum)[keyof typeof BodyPartsOnGymEquipmentsScalarFieldEnum]


  export const GymScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    ceoName: 'ceoName',
    companyName: 'companyName',
    businessNumber: 'businessNumber',
    postcode: 'postcode',
    mainAddress: 'mainAddress',
    subAddress: 'subAddress',
    phone: 'phone',
    cellPhone: 'cellPhone',
    fax: 'fax',
    email: 'email',
    isCertified: 'isCertified',
    userId: 'userId'
  };

  export type GymScalarFieldEnum = (typeof GymScalarFieldEnum)[keyof typeof GymScalarFieldEnum]


  export const GymEuquipmentsOnGymsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    gymId: 'gymId',
    gymEquipmentId: 'gymEquipmentId',
    assignBy: 'assignBy'
  };

  export type GymEuquipmentsOnGymsScalarFieldEnum = (typeof GymEuquipmentsOnGymsScalarFieldEnum)[keyof typeof GymEuquipmentsOnGymsScalarFieldEnum]


  export const GymEquipmentUserHistoryScalarFieldEnum: {
    id: 'id',
    gymEuquipmentsOnGymsId: 'gymEuquipmentsOnGymsId',
    userId: 'userId',
    usedAt: 'usedAt',
    endAt: 'endAt'
  };

  export type GymEquipmentUserHistoryScalarFieldEnum = (typeof GymEquipmentUserHistoryScalarFieldEnum)[keyof typeof GymEquipmentUserHistoryScalarFieldEnum]


  export const GymMembershipScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    userId: 'userId',
    gymId: 'gymId',
    assignBy: 'assignBy',
    startDay: 'startDay',
    endDay: 'endDay',
    gymMembershipCancellationId: 'gymMembershipCancellationId'
  };

  export type GymMembershipScalarFieldEnum = (typeof GymMembershipScalarFieldEnum)[keyof typeof GymMembershipScalarFieldEnum]


  export const GymMembershipCancellationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    reason: 'reason'
  };

  export type GymMembershipCancellationScalarFieldEnum = (typeof GymMembershipCancellationScalarFieldEnum)[keyof typeof GymMembershipCancellationScalarFieldEnum]


  export const FavoriteGymScalarFieldEnum: {
    gymId: 'gymId',
    userId: 'userId',
    assignedAt: 'assignedAt'
  };

  export type FavoriteGymScalarFieldEnum = (typeof FavoriteGymScalarFieldEnum)[keyof typeof FavoriteGymScalarFieldEnum]


  export const GymAccessHistoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    gymId: 'gymId',
    userId: 'userId',
    entryAt: 'entryAt',
    exitAt: 'exitAt'
  };

  export type GymAccessHistoryScalarFieldEnum = (typeof GymAccessHistoryScalarFieldEnum)[keyof typeof GymAccessHistoryScalarFieldEnum]


  export const GymPassHistoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    gymId: 'gymId',
    userId: 'userId',
    hash: 'hash'
  };

  export type GymPassHistoryScalarFieldEnum = (typeof GymPassHistoryScalarFieldEnum)[keyof typeof GymPassHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'LoginType'
   */
  export type EnumLoginTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LoginType'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BoardType'
   */
  export type EnumBoardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    loginId?: StringFilter<"User"> | string
    loginPw?: StringNullableFilter<"User"> | string | null
    username?: StringFilter<"User"> | string
    loginType?: EnumLoginTypeFilter<"User"> | $Enums.LoginType
    userType?: EnumUserTypeFilter<"User"> | $Enums.UserType
    nickname?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    isDisable?: BoolFilter<"User"> | boolean
    Board?: BoardListRelationFilter
    BoardReply?: BoardReplyListRelationFilter
    Notice?: NoticeListRelationFilter
    Gym?: GymListRelationFilter
    assignedGymEquipments?: GymEuquipmentsOnGymsListRelationFilter
    GymMembership?: GymMembershipListRelationFilter
    assignedGymMemberships?: GymMembershipListRelationFilter
    FavoriteGyms?: FavoriteGymListRelationFilter
    GymEquipmentUserHistory?: GymEquipmentUserHistoryListRelationFilter
    GymAccessHistory?: GymAccessHistoryListRelationFilter
    GymPassHistory?: GymPassHistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    loginId?: SortOrder
    loginPw?: SortOrderInput | SortOrder
    username?: SortOrder
    loginType?: SortOrder
    userType?: SortOrder
    nickname?: SortOrder
    phone?: SortOrder
    isDisable?: SortOrder
    Board?: BoardOrderByRelationAggregateInput
    BoardReply?: BoardReplyOrderByRelationAggregateInput
    Notice?: NoticeOrderByRelationAggregateInput
    Gym?: GymOrderByRelationAggregateInput
    assignedGymEquipments?: GymEuquipmentsOnGymsOrderByRelationAggregateInput
    GymMembership?: GymMembershipOrderByRelationAggregateInput
    assignedGymMemberships?: GymMembershipOrderByRelationAggregateInput
    FavoriteGyms?: FavoriteGymOrderByRelationAggregateInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryOrderByRelationAggregateInput
    GymAccessHistory?: GymAccessHistoryOrderByRelationAggregateInput
    GymPassHistory?: GymPassHistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    loginUnique?: UserLoginUniqueCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    loginId?: StringFilter<"User"> | string
    loginPw?: StringNullableFilter<"User"> | string | null
    username?: StringFilter<"User"> | string
    loginType?: EnumLoginTypeFilter<"User"> | $Enums.LoginType
    userType?: EnumUserTypeFilter<"User"> | $Enums.UserType
    nickname?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    isDisable?: BoolFilter<"User"> | boolean
    Board?: BoardListRelationFilter
    BoardReply?: BoardReplyListRelationFilter
    Notice?: NoticeListRelationFilter
    Gym?: GymListRelationFilter
    assignedGymEquipments?: GymEuquipmentsOnGymsListRelationFilter
    GymMembership?: GymMembershipListRelationFilter
    assignedGymMemberships?: GymMembershipListRelationFilter
    FavoriteGyms?: FavoriteGymListRelationFilter
    GymEquipmentUserHistory?: GymEquipmentUserHistoryListRelationFilter
    GymAccessHistory?: GymAccessHistoryListRelationFilter
    GymPassHistory?: GymPassHistoryListRelationFilter
  }, "id" | "loginUnique">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    loginId?: SortOrder
    loginPw?: SortOrderInput | SortOrder
    username?: SortOrder
    loginType?: SortOrder
    userType?: SortOrder
    nickname?: SortOrder
    phone?: SortOrder
    isDisable?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    loginId?: StringWithAggregatesFilter<"User"> | string
    loginPw?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringWithAggregatesFilter<"User"> | string
    loginType?: EnumLoginTypeWithAggregatesFilter<"User"> | $Enums.LoginType
    userType?: EnumUserTypeWithAggregatesFilter<"User"> | $Enums.UserType
    nickname?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    isDisable?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type NoticeWhereInput = {
    AND?: NoticeWhereInput | NoticeWhereInput[]
    OR?: NoticeWhereInput[]
    NOT?: NoticeWhereInput | NoticeWhereInput[]
    id?: IntFilter<"Notice"> | number
    createdAt?: DateTimeFilter<"Notice"> | Date | string
    title?: StringFilter<"Notice"> | string
    content?: StringNullableFilter<"Notice"> | string | null
    link?: StringNullableFilter<"Notice"> | string | null
    userId?: IntFilter<"Notice"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NoticeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type NoticeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NoticeWhereInput | NoticeWhereInput[]
    OR?: NoticeWhereInput[]
    NOT?: NoticeWhereInput | NoticeWhereInput[]
    createdAt?: DateTimeFilter<"Notice"> | Date | string
    title?: StringFilter<"Notice"> | string
    content?: StringNullableFilter<"Notice"> | string | null
    link?: StringNullableFilter<"Notice"> | string | null
    userId?: IntFilter<"Notice"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NoticeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: NoticeCountOrderByAggregateInput
    _avg?: NoticeAvgOrderByAggregateInput
    _max?: NoticeMaxOrderByAggregateInput
    _min?: NoticeMinOrderByAggregateInput
    _sum?: NoticeSumOrderByAggregateInput
  }

  export type NoticeScalarWhereWithAggregatesInput = {
    AND?: NoticeScalarWhereWithAggregatesInput | NoticeScalarWhereWithAggregatesInput[]
    OR?: NoticeScalarWhereWithAggregatesInput[]
    NOT?: NoticeScalarWhereWithAggregatesInput | NoticeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notice"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Notice"> | Date | string
    title?: StringWithAggregatesFilter<"Notice"> | string
    content?: StringNullableWithAggregatesFilter<"Notice"> | string | null
    link?: StringNullableWithAggregatesFilter<"Notice"> | string | null
    userId?: IntWithAggregatesFilter<"Notice"> | number
  }

  export type BoardWhereInput = {
    AND?: BoardWhereInput | BoardWhereInput[]
    OR?: BoardWhereInput[]
    NOT?: BoardWhereInput | BoardWhereInput[]
    id?: IntFilter<"Board"> | number
    createdAt?: DateTimeFilter<"Board"> | Date | string
    title?: StringFilter<"Board"> | string
    content?: StringNullableFilter<"Board"> | string | null
    link?: StringNullableFilter<"Board"> | string | null
    startDay?: DateTimeFilter<"Board"> | Date | string
    endDay?: DateTimeFilter<"Board"> | Date | string
    isDisable?: BoolFilter<"Board"> | boolean
    userId?: IntFilter<"Board"> | number
    boardType?: EnumBoardTypeFilter<"Board"> | $Enums.BoardType
    BoardImage?: BoardImageListRelationFilter
    BoardReply?: BoardReplyListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BoardOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardType?: SortOrder
    BoardImage?: BoardImageOrderByRelationAggregateInput
    BoardReply?: BoardReplyOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
  }

  export type BoardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BoardWhereInput | BoardWhereInput[]
    OR?: BoardWhereInput[]
    NOT?: BoardWhereInput | BoardWhereInput[]
    createdAt?: DateTimeFilter<"Board"> | Date | string
    title?: StringFilter<"Board"> | string
    content?: StringNullableFilter<"Board"> | string | null
    link?: StringNullableFilter<"Board"> | string | null
    startDay?: DateTimeFilter<"Board"> | Date | string
    endDay?: DateTimeFilter<"Board"> | Date | string
    isDisable?: BoolFilter<"Board"> | boolean
    userId?: IntFilter<"Board"> | number
    boardType?: EnumBoardTypeFilter<"Board"> | $Enums.BoardType
    BoardImage?: BoardImageListRelationFilter
    BoardReply?: BoardReplyListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type BoardOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardType?: SortOrder
    _count?: BoardCountOrderByAggregateInput
    _avg?: BoardAvgOrderByAggregateInput
    _max?: BoardMaxOrderByAggregateInput
    _min?: BoardMinOrderByAggregateInput
    _sum?: BoardSumOrderByAggregateInput
  }

  export type BoardScalarWhereWithAggregatesInput = {
    AND?: BoardScalarWhereWithAggregatesInput | BoardScalarWhereWithAggregatesInput[]
    OR?: BoardScalarWhereWithAggregatesInput[]
    NOT?: BoardScalarWhereWithAggregatesInput | BoardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Board"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Board"> | Date | string
    title?: StringWithAggregatesFilter<"Board"> | string
    content?: StringNullableWithAggregatesFilter<"Board"> | string | null
    link?: StringNullableWithAggregatesFilter<"Board"> | string | null
    startDay?: DateTimeWithAggregatesFilter<"Board"> | Date | string
    endDay?: DateTimeWithAggregatesFilter<"Board"> | Date | string
    isDisable?: BoolWithAggregatesFilter<"Board"> | boolean
    userId?: IntWithAggregatesFilter<"Board"> | number
    boardType?: EnumBoardTypeWithAggregatesFilter<"Board"> | $Enums.BoardType
  }

  export type BoardImageWhereInput = {
    AND?: BoardImageWhereInput | BoardImageWhereInput[]
    OR?: BoardImageWhereInput[]
    NOT?: BoardImageWhereInput | BoardImageWhereInput[]
    id?: IntFilter<"BoardImage"> | number
    createdAt?: DateTimeFilter<"BoardImage"> | Date | string
    url?: StringFilter<"BoardImage"> | string
    width?: IntFilter<"BoardImage"> | number
    height?: IntFilter<"BoardImage"> | number
    size?: IntFilter<"BoardImage"> | number
    isThumb?: BoolFilter<"BoardImage"> | boolean
    boardId?: IntFilter<"BoardImage"> | number
    Board?: XOR<BoardRelationFilter, BoardWhereInput>
  }

  export type BoardImageOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    boardId?: SortOrder
    Board?: BoardOrderByWithRelationInput
  }

  export type BoardImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BoardImageWhereInput | BoardImageWhereInput[]
    OR?: BoardImageWhereInput[]
    NOT?: BoardImageWhereInput | BoardImageWhereInput[]
    createdAt?: DateTimeFilter<"BoardImage"> | Date | string
    url?: StringFilter<"BoardImage"> | string
    width?: IntFilter<"BoardImage"> | number
    height?: IntFilter<"BoardImage"> | number
    size?: IntFilter<"BoardImage"> | number
    isThumb?: BoolFilter<"BoardImage"> | boolean
    boardId?: IntFilter<"BoardImage"> | number
    Board?: XOR<BoardRelationFilter, BoardWhereInput>
  }, "id">

  export type BoardImageOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    boardId?: SortOrder
    _count?: BoardImageCountOrderByAggregateInput
    _avg?: BoardImageAvgOrderByAggregateInput
    _max?: BoardImageMaxOrderByAggregateInput
    _min?: BoardImageMinOrderByAggregateInput
    _sum?: BoardImageSumOrderByAggregateInput
  }

  export type BoardImageScalarWhereWithAggregatesInput = {
    AND?: BoardImageScalarWhereWithAggregatesInput | BoardImageScalarWhereWithAggregatesInput[]
    OR?: BoardImageScalarWhereWithAggregatesInput[]
    NOT?: BoardImageScalarWhereWithAggregatesInput | BoardImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BoardImage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BoardImage"> | Date | string
    url?: StringWithAggregatesFilter<"BoardImage"> | string
    width?: IntWithAggregatesFilter<"BoardImage"> | number
    height?: IntWithAggregatesFilter<"BoardImage"> | number
    size?: IntWithAggregatesFilter<"BoardImage"> | number
    isThumb?: BoolWithAggregatesFilter<"BoardImage"> | boolean
    boardId?: IntWithAggregatesFilter<"BoardImage"> | number
  }

  export type BoardReplyWhereInput = {
    AND?: BoardReplyWhereInput | BoardReplyWhereInput[]
    OR?: BoardReplyWhereInput[]
    NOT?: BoardReplyWhereInput | BoardReplyWhereInput[]
    id?: IntFilter<"BoardReply"> | number
    createdAt?: DateTimeFilter<"BoardReply"> | Date | string
    updatedAt?: DateTimeNullableFilter<"BoardReply"> | Date | string | null
    content?: StringFilter<"BoardReply"> | string
    isDisable?: BoolFilter<"BoardReply"> | boolean
    userId?: IntFilter<"BoardReply"> | number
    boardId?: IntFilter<"BoardReply"> | number
    boardReplyId?: IntNullableFilter<"BoardReply"> | number | null
    boardType?: EnumBoardTypeFilter<"BoardReply"> | $Enums.BoardType
    User?: XOR<UserRelationFilter, UserWhereInput>
    Board?: XOR<BoardRelationFilter, BoardWhereInput>
    BoardReply?: XOR<BoardReplyNullableRelationFilter, BoardReplyWhereInput> | null
    BoardNestedReply?: BoardReplyListRelationFilter
  }

  export type BoardReplyOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    content?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    boardReplyId?: SortOrderInput | SortOrder
    boardType?: SortOrder
    User?: UserOrderByWithRelationInput
    Board?: BoardOrderByWithRelationInput
    BoardReply?: BoardReplyOrderByWithRelationInput
    BoardNestedReply?: BoardReplyOrderByRelationAggregateInput
  }

  export type BoardReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BoardReplyWhereInput | BoardReplyWhereInput[]
    OR?: BoardReplyWhereInput[]
    NOT?: BoardReplyWhereInput | BoardReplyWhereInput[]
    createdAt?: DateTimeFilter<"BoardReply"> | Date | string
    updatedAt?: DateTimeNullableFilter<"BoardReply"> | Date | string | null
    content?: StringFilter<"BoardReply"> | string
    isDisable?: BoolFilter<"BoardReply"> | boolean
    userId?: IntFilter<"BoardReply"> | number
    boardId?: IntFilter<"BoardReply"> | number
    boardReplyId?: IntNullableFilter<"BoardReply"> | number | null
    boardType?: EnumBoardTypeFilter<"BoardReply"> | $Enums.BoardType
    User?: XOR<UserRelationFilter, UserWhereInput>
    Board?: XOR<BoardRelationFilter, BoardWhereInput>
    BoardReply?: XOR<BoardReplyNullableRelationFilter, BoardReplyWhereInput> | null
    BoardNestedReply?: BoardReplyListRelationFilter
  }, "id">

  export type BoardReplyOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    content?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    boardReplyId?: SortOrderInput | SortOrder
    boardType?: SortOrder
    _count?: BoardReplyCountOrderByAggregateInput
    _avg?: BoardReplyAvgOrderByAggregateInput
    _max?: BoardReplyMaxOrderByAggregateInput
    _min?: BoardReplyMinOrderByAggregateInput
    _sum?: BoardReplySumOrderByAggregateInput
  }

  export type BoardReplyScalarWhereWithAggregatesInput = {
    AND?: BoardReplyScalarWhereWithAggregatesInput | BoardReplyScalarWhereWithAggregatesInput[]
    OR?: BoardReplyScalarWhereWithAggregatesInput[]
    NOT?: BoardReplyScalarWhereWithAggregatesInput | BoardReplyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BoardReply"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BoardReply"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"BoardReply"> | Date | string | null
    content?: StringWithAggregatesFilter<"BoardReply"> | string
    isDisable?: BoolWithAggregatesFilter<"BoardReply"> | boolean
    userId?: IntWithAggregatesFilter<"BoardReply"> | number
    boardId?: IntWithAggregatesFilter<"BoardReply"> | number
    boardReplyId?: IntNullableWithAggregatesFilter<"BoardReply"> | number | null
    boardType?: EnumBoardTypeWithAggregatesFilter<"BoardReply"> | $Enums.BoardType
  }

  export type BodyPartWhereInput = {
    AND?: BodyPartWhereInput | BodyPartWhereInput[]
    OR?: BodyPartWhereInput[]
    NOT?: BodyPartWhereInput | BodyPartWhereInput[]
    id?: IntFilter<"BodyPart"> | number
    createdAt?: DateTimeFilter<"BodyPart"> | Date | string
    name?: StringFilter<"BodyPart"> | string
    code?: StringFilter<"BodyPart"> | string
    GymEquipments?: BodyPartsOnGymEquipmentsListRelationFilter
  }

  export type BodyPartOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    GymEquipments?: BodyPartsOnGymEquipmentsOrderByRelationAggregateInput
  }

  export type BodyPartWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: BodyPartWhereInput | BodyPartWhereInput[]
    OR?: BodyPartWhereInput[]
    NOT?: BodyPartWhereInput | BodyPartWhereInput[]
    createdAt?: DateTimeFilter<"BodyPart"> | Date | string
    name?: StringFilter<"BodyPart"> | string
    GymEquipments?: BodyPartsOnGymEquipmentsListRelationFilter
  }, "id" | "code">

  export type BodyPartOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    _count?: BodyPartCountOrderByAggregateInput
    _avg?: BodyPartAvgOrderByAggregateInput
    _max?: BodyPartMaxOrderByAggregateInput
    _min?: BodyPartMinOrderByAggregateInput
    _sum?: BodyPartSumOrderByAggregateInput
  }

  export type BodyPartScalarWhereWithAggregatesInput = {
    AND?: BodyPartScalarWhereWithAggregatesInput | BodyPartScalarWhereWithAggregatesInput[]
    OR?: BodyPartScalarWhereWithAggregatesInput[]
    NOT?: BodyPartScalarWhereWithAggregatesInput | BodyPartScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BodyPart"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BodyPart"> | Date | string
    name?: StringWithAggregatesFilter<"BodyPart"> | string
    code?: StringWithAggregatesFilter<"BodyPart"> | string
  }

  export type GymEquipmentWhereInput = {
    AND?: GymEquipmentWhereInput | GymEquipmentWhereInput[]
    OR?: GymEquipmentWhereInput[]
    NOT?: GymEquipmentWhereInput | GymEquipmentWhereInput[]
    id?: IntFilter<"GymEquipment"> | number
    createdAt?: DateTimeFilter<"GymEquipment"> | Date | string
    name?: StringFilter<"GymEquipment"> | string
    code?: StringFilter<"GymEquipment"> | string
    BodyParts?: BodyPartsOnGymEquipmentsListRelationFilter
    Gyms?: GymEuquipmentsOnGymsListRelationFilter
    GymEquipmentImage?: GymEquipmentImageListRelationFilter
  }

  export type GymEquipmentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    BodyParts?: BodyPartsOnGymEquipmentsOrderByRelationAggregateInput
    Gyms?: GymEuquipmentsOnGymsOrderByRelationAggregateInput
    GymEquipmentImage?: GymEquipmentImageOrderByRelationAggregateInput
  }

  export type GymEquipmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: GymEquipmentWhereInput | GymEquipmentWhereInput[]
    OR?: GymEquipmentWhereInput[]
    NOT?: GymEquipmentWhereInput | GymEquipmentWhereInput[]
    createdAt?: DateTimeFilter<"GymEquipment"> | Date | string
    name?: StringFilter<"GymEquipment"> | string
    BodyParts?: BodyPartsOnGymEquipmentsListRelationFilter
    Gyms?: GymEuquipmentsOnGymsListRelationFilter
    GymEquipmentImage?: GymEquipmentImageListRelationFilter
  }, "id" | "code">

  export type GymEquipmentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    _count?: GymEquipmentCountOrderByAggregateInput
    _avg?: GymEquipmentAvgOrderByAggregateInput
    _max?: GymEquipmentMaxOrderByAggregateInput
    _min?: GymEquipmentMinOrderByAggregateInput
    _sum?: GymEquipmentSumOrderByAggregateInput
  }

  export type GymEquipmentScalarWhereWithAggregatesInput = {
    AND?: GymEquipmentScalarWhereWithAggregatesInput | GymEquipmentScalarWhereWithAggregatesInput[]
    OR?: GymEquipmentScalarWhereWithAggregatesInput[]
    NOT?: GymEquipmentScalarWhereWithAggregatesInput | GymEquipmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GymEquipment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GymEquipment"> | Date | string
    name?: StringWithAggregatesFilter<"GymEquipment"> | string
    code?: StringWithAggregatesFilter<"GymEquipment"> | string
  }

  export type GymEquipmentImageWhereInput = {
    AND?: GymEquipmentImageWhereInput | GymEquipmentImageWhereInput[]
    OR?: GymEquipmentImageWhereInput[]
    NOT?: GymEquipmentImageWhereInput | GymEquipmentImageWhereInput[]
    id?: IntFilter<"GymEquipmentImage"> | number
    createdAt?: DateTimeFilter<"GymEquipmentImage"> | Date | string
    url?: StringFilter<"GymEquipmentImage"> | string
    width?: IntFilter<"GymEquipmentImage"> | number
    height?: IntFilter<"GymEquipmentImage"> | number
    size?: IntFilter<"GymEquipmentImage"> | number
    isThumb?: BoolFilter<"GymEquipmentImage"> | boolean
    gymEquipmentId?: IntFilter<"GymEquipmentImage"> | number
    GymEquipment?: XOR<GymEquipmentRelationFilter, GymEquipmentWhereInput>
  }

  export type GymEquipmentImageOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    gymEquipmentId?: SortOrder
    GymEquipment?: GymEquipmentOrderByWithRelationInput
  }

  export type GymEquipmentImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymEquipmentImageWhereInput | GymEquipmentImageWhereInput[]
    OR?: GymEquipmentImageWhereInput[]
    NOT?: GymEquipmentImageWhereInput | GymEquipmentImageWhereInput[]
    createdAt?: DateTimeFilter<"GymEquipmentImage"> | Date | string
    url?: StringFilter<"GymEquipmentImage"> | string
    width?: IntFilter<"GymEquipmentImage"> | number
    height?: IntFilter<"GymEquipmentImage"> | number
    size?: IntFilter<"GymEquipmentImage"> | number
    isThumb?: BoolFilter<"GymEquipmentImage"> | boolean
    gymEquipmentId?: IntFilter<"GymEquipmentImage"> | number
    GymEquipment?: XOR<GymEquipmentRelationFilter, GymEquipmentWhereInput>
  }, "id">

  export type GymEquipmentImageOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    gymEquipmentId?: SortOrder
    _count?: GymEquipmentImageCountOrderByAggregateInput
    _avg?: GymEquipmentImageAvgOrderByAggregateInput
    _max?: GymEquipmentImageMaxOrderByAggregateInput
    _min?: GymEquipmentImageMinOrderByAggregateInput
    _sum?: GymEquipmentImageSumOrderByAggregateInput
  }

  export type GymEquipmentImageScalarWhereWithAggregatesInput = {
    AND?: GymEquipmentImageScalarWhereWithAggregatesInput | GymEquipmentImageScalarWhereWithAggregatesInput[]
    OR?: GymEquipmentImageScalarWhereWithAggregatesInput[]
    NOT?: GymEquipmentImageScalarWhereWithAggregatesInput | GymEquipmentImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GymEquipmentImage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GymEquipmentImage"> | Date | string
    url?: StringWithAggregatesFilter<"GymEquipmentImage"> | string
    width?: IntWithAggregatesFilter<"GymEquipmentImage"> | number
    height?: IntWithAggregatesFilter<"GymEquipmentImage"> | number
    size?: IntWithAggregatesFilter<"GymEquipmentImage"> | number
    isThumb?: BoolWithAggregatesFilter<"GymEquipmentImage"> | boolean
    gymEquipmentId?: IntWithAggregatesFilter<"GymEquipmentImage"> | number
  }

  export type BodyPartsOnGymEquipmentsWhereInput = {
    AND?: BodyPartsOnGymEquipmentsWhereInput | BodyPartsOnGymEquipmentsWhereInput[]
    OR?: BodyPartsOnGymEquipmentsWhereInput[]
    NOT?: BodyPartsOnGymEquipmentsWhereInput | BodyPartsOnGymEquipmentsWhereInput[]
    gymEquipmentId?: IntFilter<"BodyPartsOnGymEquipments"> | number
    bodyPartId?: IntFilter<"BodyPartsOnGymEquipments"> | number
    assignedAt?: DateTimeFilter<"BodyPartsOnGymEquipments"> | Date | string
    GymEquipment?: XOR<GymEquipmentRelationFilter, GymEquipmentWhereInput>
    BodyPart?: XOR<BodyPartRelationFilter, BodyPartWhereInput>
  }

  export type BodyPartsOnGymEquipmentsOrderByWithRelationInput = {
    gymEquipmentId?: SortOrder
    bodyPartId?: SortOrder
    assignedAt?: SortOrder
    GymEquipment?: GymEquipmentOrderByWithRelationInput
    BodyPart?: BodyPartOrderByWithRelationInput
  }

  export type BodyPartsOnGymEquipmentsWhereUniqueInput = Prisma.AtLeast<{
    gymEquipmentId_bodyPartId?: BodyPartsOnGymEquipmentsGymEquipmentIdBodyPartIdCompoundUniqueInput
    AND?: BodyPartsOnGymEquipmentsWhereInput | BodyPartsOnGymEquipmentsWhereInput[]
    OR?: BodyPartsOnGymEquipmentsWhereInput[]
    NOT?: BodyPartsOnGymEquipmentsWhereInput | BodyPartsOnGymEquipmentsWhereInput[]
    gymEquipmentId?: IntFilter<"BodyPartsOnGymEquipments"> | number
    bodyPartId?: IntFilter<"BodyPartsOnGymEquipments"> | number
    assignedAt?: DateTimeFilter<"BodyPartsOnGymEquipments"> | Date | string
    GymEquipment?: XOR<GymEquipmentRelationFilter, GymEquipmentWhereInput>
    BodyPart?: XOR<BodyPartRelationFilter, BodyPartWhereInput>
  }, "gymEquipmentId_bodyPartId">

  export type BodyPartsOnGymEquipmentsOrderByWithAggregationInput = {
    gymEquipmentId?: SortOrder
    bodyPartId?: SortOrder
    assignedAt?: SortOrder
    _count?: BodyPartsOnGymEquipmentsCountOrderByAggregateInput
    _avg?: BodyPartsOnGymEquipmentsAvgOrderByAggregateInput
    _max?: BodyPartsOnGymEquipmentsMaxOrderByAggregateInput
    _min?: BodyPartsOnGymEquipmentsMinOrderByAggregateInput
    _sum?: BodyPartsOnGymEquipmentsSumOrderByAggregateInput
  }

  export type BodyPartsOnGymEquipmentsScalarWhereWithAggregatesInput = {
    AND?: BodyPartsOnGymEquipmentsScalarWhereWithAggregatesInput | BodyPartsOnGymEquipmentsScalarWhereWithAggregatesInput[]
    OR?: BodyPartsOnGymEquipmentsScalarWhereWithAggregatesInput[]
    NOT?: BodyPartsOnGymEquipmentsScalarWhereWithAggregatesInput | BodyPartsOnGymEquipmentsScalarWhereWithAggregatesInput[]
    gymEquipmentId?: IntWithAggregatesFilter<"BodyPartsOnGymEquipments"> | number
    bodyPartId?: IntWithAggregatesFilter<"BodyPartsOnGymEquipments"> | number
    assignedAt?: DateTimeWithAggregatesFilter<"BodyPartsOnGymEquipments"> | Date | string
  }

  export type GymWhereInput = {
    AND?: GymWhereInput | GymWhereInput[]
    OR?: GymWhereInput[]
    NOT?: GymWhereInput | GymWhereInput[]
    id?: IntFilter<"Gym"> | number
    createdAt?: DateTimeFilter<"Gym"> | Date | string
    ceoName?: StringFilter<"Gym"> | string
    companyName?: StringFilter<"Gym"> | string
    businessNumber?: StringFilter<"Gym"> | string
    postcode?: StringFilter<"Gym"> | string
    mainAddress?: StringFilter<"Gym"> | string
    subAddress?: StringFilter<"Gym"> | string
    phone?: StringFilter<"Gym"> | string
    cellPhone?: StringFilter<"Gym"> | string
    fax?: StringFilter<"Gym"> | string
    email?: StringFilter<"Gym"> | string
    isCertified?: BoolFilter<"Gym"> | boolean
    userId?: IntFilter<"Gym"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    GymEquipments?: GymEuquipmentsOnGymsListRelationFilter
    FavoriteUsers?: FavoriteGymListRelationFilter
    GymAccessHistory?: GymAccessHistoryListRelationFilter
    GymMembership?: GymMembershipListRelationFilter
    GymPassHistory?: GymPassHistoryListRelationFilter
  }

  export type GymOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    ceoName?: SortOrder
    companyName?: SortOrder
    businessNumber?: SortOrder
    postcode?: SortOrder
    mainAddress?: SortOrder
    subAddress?: SortOrder
    phone?: SortOrder
    cellPhone?: SortOrder
    fax?: SortOrder
    email?: SortOrder
    isCertified?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
    GymEquipments?: GymEuquipmentsOnGymsOrderByRelationAggregateInput
    FavoriteUsers?: FavoriteGymOrderByRelationAggregateInput
    GymAccessHistory?: GymAccessHistoryOrderByRelationAggregateInput
    GymMembership?: GymMembershipOrderByRelationAggregateInput
    GymPassHistory?: GymPassHistoryOrderByRelationAggregateInput
  }

  export type GymWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymWhereInput | GymWhereInput[]
    OR?: GymWhereInput[]
    NOT?: GymWhereInput | GymWhereInput[]
    createdAt?: DateTimeFilter<"Gym"> | Date | string
    ceoName?: StringFilter<"Gym"> | string
    companyName?: StringFilter<"Gym"> | string
    businessNumber?: StringFilter<"Gym"> | string
    postcode?: StringFilter<"Gym"> | string
    mainAddress?: StringFilter<"Gym"> | string
    subAddress?: StringFilter<"Gym"> | string
    phone?: StringFilter<"Gym"> | string
    cellPhone?: StringFilter<"Gym"> | string
    fax?: StringFilter<"Gym"> | string
    email?: StringFilter<"Gym"> | string
    isCertified?: BoolFilter<"Gym"> | boolean
    userId?: IntFilter<"Gym"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    GymEquipments?: GymEuquipmentsOnGymsListRelationFilter
    FavoriteUsers?: FavoriteGymListRelationFilter
    GymAccessHistory?: GymAccessHistoryListRelationFilter
    GymMembership?: GymMembershipListRelationFilter
    GymPassHistory?: GymPassHistoryListRelationFilter
  }, "id">

  export type GymOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    ceoName?: SortOrder
    companyName?: SortOrder
    businessNumber?: SortOrder
    postcode?: SortOrder
    mainAddress?: SortOrder
    subAddress?: SortOrder
    phone?: SortOrder
    cellPhone?: SortOrder
    fax?: SortOrder
    email?: SortOrder
    isCertified?: SortOrder
    userId?: SortOrder
    _count?: GymCountOrderByAggregateInput
    _avg?: GymAvgOrderByAggregateInput
    _max?: GymMaxOrderByAggregateInput
    _min?: GymMinOrderByAggregateInput
    _sum?: GymSumOrderByAggregateInput
  }

  export type GymScalarWhereWithAggregatesInput = {
    AND?: GymScalarWhereWithAggregatesInput | GymScalarWhereWithAggregatesInput[]
    OR?: GymScalarWhereWithAggregatesInput[]
    NOT?: GymScalarWhereWithAggregatesInput | GymScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Gym"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Gym"> | Date | string
    ceoName?: StringWithAggregatesFilter<"Gym"> | string
    companyName?: StringWithAggregatesFilter<"Gym"> | string
    businessNumber?: StringWithAggregatesFilter<"Gym"> | string
    postcode?: StringWithAggregatesFilter<"Gym"> | string
    mainAddress?: StringWithAggregatesFilter<"Gym"> | string
    subAddress?: StringWithAggregatesFilter<"Gym"> | string
    phone?: StringWithAggregatesFilter<"Gym"> | string
    cellPhone?: StringWithAggregatesFilter<"Gym"> | string
    fax?: StringWithAggregatesFilter<"Gym"> | string
    email?: StringWithAggregatesFilter<"Gym"> | string
    isCertified?: BoolWithAggregatesFilter<"Gym"> | boolean
    userId?: IntWithAggregatesFilter<"Gym"> | number
  }

  export type GymEuquipmentsOnGymsWhereInput = {
    AND?: GymEuquipmentsOnGymsWhereInput | GymEuquipmentsOnGymsWhereInput[]
    OR?: GymEuquipmentsOnGymsWhereInput[]
    NOT?: GymEuquipmentsOnGymsWhereInput | GymEuquipmentsOnGymsWhereInput[]
    id?: IntFilter<"GymEuquipmentsOnGyms"> | number
    createdAt?: DateTimeFilter<"GymEuquipmentsOnGyms"> | Date | string
    gymId?: IntFilter<"GymEuquipmentsOnGyms"> | number
    gymEquipmentId?: IntFilter<"GymEuquipmentsOnGyms"> | number
    assignBy?: IntFilter<"GymEuquipmentsOnGyms"> | number
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    GymEquipment?: XOR<GymEquipmentRelationFilter, GymEquipmentWhereInput>
    assignUser?: XOR<UserRelationFilter, UserWhereInput>
    GymEquipmentUserHistory?: GymEquipmentUserHistoryListRelationFilter
  }

  export type GymEuquipmentsOnGymsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    gymEquipmentId?: SortOrder
    assignBy?: SortOrder
    Gym?: GymOrderByWithRelationInput
    GymEquipment?: GymEquipmentOrderByWithRelationInput
    assignUser?: UserOrderByWithRelationInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryOrderByRelationAggregateInput
  }

  export type GymEuquipmentsOnGymsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymEuquipmentsOnGymsWhereInput | GymEuquipmentsOnGymsWhereInput[]
    OR?: GymEuquipmentsOnGymsWhereInput[]
    NOT?: GymEuquipmentsOnGymsWhereInput | GymEuquipmentsOnGymsWhereInput[]
    createdAt?: DateTimeFilter<"GymEuquipmentsOnGyms"> | Date | string
    gymId?: IntFilter<"GymEuquipmentsOnGyms"> | number
    gymEquipmentId?: IntFilter<"GymEuquipmentsOnGyms"> | number
    assignBy?: IntFilter<"GymEuquipmentsOnGyms"> | number
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    GymEquipment?: XOR<GymEquipmentRelationFilter, GymEquipmentWhereInput>
    assignUser?: XOR<UserRelationFilter, UserWhereInput>
    GymEquipmentUserHistory?: GymEquipmentUserHistoryListRelationFilter
  }, "id">

  export type GymEuquipmentsOnGymsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    gymEquipmentId?: SortOrder
    assignBy?: SortOrder
    _count?: GymEuquipmentsOnGymsCountOrderByAggregateInput
    _avg?: GymEuquipmentsOnGymsAvgOrderByAggregateInput
    _max?: GymEuquipmentsOnGymsMaxOrderByAggregateInput
    _min?: GymEuquipmentsOnGymsMinOrderByAggregateInput
    _sum?: GymEuquipmentsOnGymsSumOrderByAggregateInput
  }

  export type GymEuquipmentsOnGymsScalarWhereWithAggregatesInput = {
    AND?: GymEuquipmentsOnGymsScalarWhereWithAggregatesInput | GymEuquipmentsOnGymsScalarWhereWithAggregatesInput[]
    OR?: GymEuquipmentsOnGymsScalarWhereWithAggregatesInput[]
    NOT?: GymEuquipmentsOnGymsScalarWhereWithAggregatesInput | GymEuquipmentsOnGymsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GymEuquipmentsOnGyms"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GymEuquipmentsOnGyms"> | Date | string
    gymId?: IntWithAggregatesFilter<"GymEuquipmentsOnGyms"> | number
    gymEquipmentId?: IntWithAggregatesFilter<"GymEuquipmentsOnGyms"> | number
    assignBy?: IntWithAggregatesFilter<"GymEuquipmentsOnGyms"> | number
  }

  export type GymEquipmentUserHistoryWhereInput = {
    AND?: GymEquipmentUserHistoryWhereInput | GymEquipmentUserHistoryWhereInput[]
    OR?: GymEquipmentUserHistoryWhereInput[]
    NOT?: GymEquipmentUserHistoryWhereInput | GymEquipmentUserHistoryWhereInput[]
    id?: IntFilter<"GymEquipmentUserHistory"> | number
    gymEuquipmentsOnGymsId?: IntFilter<"GymEquipmentUserHistory"> | number
    userId?: IntFilter<"GymEquipmentUserHistory"> | number
    usedAt?: DateTimeFilter<"GymEquipmentUserHistory"> | Date | string
    endAt?: DateTimeNullableFilter<"GymEquipmentUserHistory"> | Date | string | null
    GymEuquipmentsOnGyms?: XOR<GymEuquipmentsOnGymsRelationFilter, GymEuquipmentsOnGymsWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GymEquipmentUserHistoryOrderByWithRelationInput = {
    id?: SortOrder
    gymEuquipmentsOnGymsId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
    endAt?: SortOrderInput | SortOrder
    GymEuquipmentsOnGyms?: GymEuquipmentsOnGymsOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type GymEquipmentUserHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymEquipmentUserHistoryWhereInput | GymEquipmentUserHistoryWhereInput[]
    OR?: GymEquipmentUserHistoryWhereInput[]
    NOT?: GymEquipmentUserHistoryWhereInput | GymEquipmentUserHistoryWhereInput[]
    gymEuquipmentsOnGymsId?: IntFilter<"GymEquipmentUserHistory"> | number
    userId?: IntFilter<"GymEquipmentUserHistory"> | number
    usedAt?: DateTimeFilter<"GymEquipmentUserHistory"> | Date | string
    endAt?: DateTimeNullableFilter<"GymEquipmentUserHistory"> | Date | string | null
    GymEuquipmentsOnGyms?: XOR<GymEuquipmentsOnGymsRelationFilter, GymEuquipmentsOnGymsWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type GymEquipmentUserHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    gymEuquipmentsOnGymsId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
    endAt?: SortOrderInput | SortOrder
    _count?: GymEquipmentUserHistoryCountOrderByAggregateInput
    _avg?: GymEquipmentUserHistoryAvgOrderByAggregateInput
    _max?: GymEquipmentUserHistoryMaxOrderByAggregateInput
    _min?: GymEquipmentUserHistoryMinOrderByAggregateInput
    _sum?: GymEquipmentUserHistorySumOrderByAggregateInput
  }

  export type GymEquipmentUserHistoryScalarWhereWithAggregatesInput = {
    AND?: GymEquipmentUserHistoryScalarWhereWithAggregatesInput | GymEquipmentUserHistoryScalarWhereWithAggregatesInput[]
    OR?: GymEquipmentUserHistoryScalarWhereWithAggregatesInput[]
    NOT?: GymEquipmentUserHistoryScalarWhereWithAggregatesInput | GymEquipmentUserHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GymEquipmentUserHistory"> | number
    gymEuquipmentsOnGymsId?: IntWithAggregatesFilter<"GymEquipmentUserHistory"> | number
    userId?: IntWithAggregatesFilter<"GymEquipmentUserHistory"> | number
    usedAt?: DateTimeWithAggregatesFilter<"GymEquipmentUserHistory"> | Date | string
    endAt?: DateTimeNullableWithAggregatesFilter<"GymEquipmentUserHistory"> | Date | string | null
  }

  export type GymMembershipWhereInput = {
    AND?: GymMembershipWhereInput | GymMembershipWhereInput[]
    OR?: GymMembershipWhereInput[]
    NOT?: GymMembershipWhereInput | GymMembershipWhereInput[]
    id?: IntFilter<"GymMembership"> | number
    createdAt?: DateTimeFilter<"GymMembership"> | Date | string
    userId?: IntFilter<"GymMembership"> | number
    gymId?: IntFilter<"GymMembership"> | number
    assignBy?: IntFilter<"GymMembership"> | number
    startDay?: DateTimeFilter<"GymMembership"> | Date | string
    endDay?: DateTimeFilter<"GymMembership"> | Date | string
    gymMembershipCancellationId?: IntNullableFilter<"GymMembership"> | number | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    assignUser?: XOR<UserRelationFilter, UserWhereInput>
    GymMembershipCancellation?: XOR<GymMembershipCancellationNullableRelationFilter, GymMembershipCancellationWhereInput> | null
  }

  export type GymMembershipOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gymId?: SortOrder
    assignBy?: SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    gymMembershipCancellationId?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
    Gym?: GymOrderByWithRelationInput
    assignUser?: UserOrderByWithRelationInput
    GymMembershipCancellation?: GymMembershipCancellationOrderByWithRelationInput
  }

  export type GymMembershipWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymMembershipWhereInput | GymMembershipWhereInput[]
    OR?: GymMembershipWhereInput[]
    NOT?: GymMembershipWhereInput | GymMembershipWhereInput[]
    createdAt?: DateTimeFilter<"GymMembership"> | Date | string
    userId?: IntFilter<"GymMembership"> | number
    gymId?: IntFilter<"GymMembership"> | number
    assignBy?: IntFilter<"GymMembership"> | number
    startDay?: DateTimeFilter<"GymMembership"> | Date | string
    endDay?: DateTimeFilter<"GymMembership"> | Date | string
    gymMembershipCancellationId?: IntNullableFilter<"GymMembership"> | number | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    assignUser?: XOR<UserRelationFilter, UserWhereInput>
    GymMembershipCancellation?: XOR<GymMembershipCancellationNullableRelationFilter, GymMembershipCancellationWhereInput> | null
  }, "id">

  export type GymMembershipOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gymId?: SortOrder
    assignBy?: SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    gymMembershipCancellationId?: SortOrderInput | SortOrder
    _count?: GymMembershipCountOrderByAggregateInput
    _avg?: GymMembershipAvgOrderByAggregateInput
    _max?: GymMembershipMaxOrderByAggregateInput
    _min?: GymMembershipMinOrderByAggregateInput
    _sum?: GymMembershipSumOrderByAggregateInput
  }

  export type GymMembershipScalarWhereWithAggregatesInput = {
    AND?: GymMembershipScalarWhereWithAggregatesInput | GymMembershipScalarWhereWithAggregatesInput[]
    OR?: GymMembershipScalarWhereWithAggregatesInput[]
    NOT?: GymMembershipScalarWhereWithAggregatesInput | GymMembershipScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GymMembership"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GymMembership"> | Date | string
    userId?: IntWithAggregatesFilter<"GymMembership"> | number
    gymId?: IntWithAggregatesFilter<"GymMembership"> | number
    assignBy?: IntWithAggregatesFilter<"GymMembership"> | number
    startDay?: DateTimeWithAggregatesFilter<"GymMembership"> | Date | string
    endDay?: DateTimeWithAggregatesFilter<"GymMembership"> | Date | string
    gymMembershipCancellationId?: IntNullableWithAggregatesFilter<"GymMembership"> | number | null
  }

  export type GymMembershipCancellationWhereInput = {
    AND?: GymMembershipCancellationWhereInput | GymMembershipCancellationWhereInput[]
    OR?: GymMembershipCancellationWhereInput[]
    NOT?: GymMembershipCancellationWhereInput | GymMembershipCancellationWhereInput[]
    id?: IntFilter<"GymMembershipCancellation"> | number
    createdAt?: DateTimeFilter<"GymMembershipCancellation"> | Date | string
    reason?: StringNullableFilter<"GymMembershipCancellation"> | string | null
    GymMembership?: GymMembershipListRelationFilter
  }

  export type GymMembershipCancellationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    reason?: SortOrderInput | SortOrder
    GymMembership?: GymMembershipOrderByRelationAggregateInput
  }

  export type GymMembershipCancellationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymMembershipCancellationWhereInput | GymMembershipCancellationWhereInput[]
    OR?: GymMembershipCancellationWhereInput[]
    NOT?: GymMembershipCancellationWhereInput | GymMembershipCancellationWhereInput[]
    createdAt?: DateTimeFilter<"GymMembershipCancellation"> | Date | string
    reason?: StringNullableFilter<"GymMembershipCancellation"> | string | null
    GymMembership?: GymMembershipListRelationFilter
  }, "id">

  export type GymMembershipCancellationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    reason?: SortOrderInput | SortOrder
    _count?: GymMembershipCancellationCountOrderByAggregateInput
    _avg?: GymMembershipCancellationAvgOrderByAggregateInput
    _max?: GymMembershipCancellationMaxOrderByAggregateInput
    _min?: GymMembershipCancellationMinOrderByAggregateInput
    _sum?: GymMembershipCancellationSumOrderByAggregateInput
  }

  export type GymMembershipCancellationScalarWhereWithAggregatesInput = {
    AND?: GymMembershipCancellationScalarWhereWithAggregatesInput | GymMembershipCancellationScalarWhereWithAggregatesInput[]
    OR?: GymMembershipCancellationScalarWhereWithAggregatesInput[]
    NOT?: GymMembershipCancellationScalarWhereWithAggregatesInput | GymMembershipCancellationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GymMembershipCancellation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GymMembershipCancellation"> | Date | string
    reason?: StringNullableWithAggregatesFilter<"GymMembershipCancellation"> | string | null
  }

  export type FavoriteGymWhereInput = {
    AND?: FavoriteGymWhereInput | FavoriteGymWhereInput[]
    OR?: FavoriteGymWhereInput[]
    NOT?: FavoriteGymWhereInput | FavoriteGymWhereInput[]
    gymId?: IntFilter<"FavoriteGym"> | number
    userId?: IntFilter<"FavoriteGym"> | number
    assignedAt?: DateTimeFilter<"FavoriteGym"> | Date | string
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FavoriteGymOrderByWithRelationInput = {
    gymId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    Gym?: GymOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type FavoriteGymWhereUniqueInput = Prisma.AtLeast<{
    gymId_userId?: FavoriteGymGymIdUserIdCompoundUniqueInput
    AND?: FavoriteGymWhereInput | FavoriteGymWhereInput[]
    OR?: FavoriteGymWhereInput[]
    NOT?: FavoriteGymWhereInput | FavoriteGymWhereInput[]
    gymId?: IntFilter<"FavoriteGym"> | number
    userId?: IntFilter<"FavoriteGym"> | number
    assignedAt?: DateTimeFilter<"FavoriteGym"> | Date | string
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "gymId_userId">

  export type FavoriteGymOrderByWithAggregationInput = {
    gymId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
    _count?: FavoriteGymCountOrderByAggregateInput
    _avg?: FavoriteGymAvgOrderByAggregateInput
    _max?: FavoriteGymMaxOrderByAggregateInput
    _min?: FavoriteGymMinOrderByAggregateInput
    _sum?: FavoriteGymSumOrderByAggregateInput
  }

  export type FavoriteGymScalarWhereWithAggregatesInput = {
    AND?: FavoriteGymScalarWhereWithAggregatesInput | FavoriteGymScalarWhereWithAggregatesInput[]
    OR?: FavoriteGymScalarWhereWithAggregatesInput[]
    NOT?: FavoriteGymScalarWhereWithAggregatesInput | FavoriteGymScalarWhereWithAggregatesInput[]
    gymId?: IntWithAggregatesFilter<"FavoriteGym"> | number
    userId?: IntWithAggregatesFilter<"FavoriteGym"> | number
    assignedAt?: DateTimeWithAggregatesFilter<"FavoriteGym"> | Date | string
  }

  export type GymAccessHistoryWhereInput = {
    AND?: GymAccessHistoryWhereInput | GymAccessHistoryWhereInput[]
    OR?: GymAccessHistoryWhereInput[]
    NOT?: GymAccessHistoryWhereInput | GymAccessHistoryWhereInput[]
    id?: IntFilter<"GymAccessHistory"> | number
    createdAt?: DateTimeFilter<"GymAccessHistory"> | Date | string
    gymId?: IntFilter<"GymAccessHistory"> | number
    userId?: IntFilter<"GymAccessHistory"> | number
    entryAt?: DateTimeFilter<"GymAccessHistory"> | Date | string
    exitAt?: DateTimeNullableFilter<"GymAccessHistory"> | Date | string | null
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GymAccessHistoryOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    entryAt?: SortOrder
    exitAt?: SortOrderInput | SortOrder
    Gym?: GymOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type GymAccessHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymAccessHistoryWhereInput | GymAccessHistoryWhereInput[]
    OR?: GymAccessHistoryWhereInput[]
    NOT?: GymAccessHistoryWhereInput | GymAccessHistoryWhereInput[]
    createdAt?: DateTimeFilter<"GymAccessHistory"> | Date | string
    gymId?: IntFilter<"GymAccessHistory"> | number
    userId?: IntFilter<"GymAccessHistory"> | number
    entryAt?: DateTimeFilter<"GymAccessHistory"> | Date | string
    exitAt?: DateTimeNullableFilter<"GymAccessHistory"> | Date | string | null
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type GymAccessHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    entryAt?: SortOrder
    exitAt?: SortOrderInput | SortOrder
    _count?: GymAccessHistoryCountOrderByAggregateInput
    _avg?: GymAccessHistoryAvgOrderByAggregateInput
    _max?: GymAccessHistoryMaxOrderByAggregateInput
    _min?: GymAccessHistoryMinOrderByAggregateInput
    _sum?: GymAccessHistorySumOrderByAggregateInput
  }

  export type GymAccessHistoryScalarWhereWithAggregatesInput = {
    AND?: GymAccessHistoryScalarWhereWithAggregatesInput | GymAccessHistoryScalarWhereWithAggregatesInput[]
    OR?: GymAccessHistoryScalarWhereWithAggregatesInput[]
    NOT?: GymAccessHistoryScalarWhereWithAggregatesInput | GymAccessHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GymAccessHistory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GymAccessHistory"> | Date | string
    gymId?: IntWithAggregatesFilter<"GymAccessHistory"> | number
    userId?: IntWithAggregatesFilter<"GymAccessHistory"> | number
    entryAt?: DateTimeWithAggregatesFilter<"GymAccessHistory"> | Date | string
    exitAt?: DateTimeNullableWithAggregatesFilter<"GymAccessHistory"> | Date | string | null
  }

  export type GymPassHistoryWhereInput = {
    AND?: GymPassHistoryWhereInput | GymPassHistoryWhereInput[]
    OR?: GymPassHistoryWhereInput[]
    NOT?: GymPassHistoryWhereInput | GymPassHistoryWhereInput[]
    id?: IntFilter<"GymPassHistory"> | number
    createdAt?: DateTimeFilter<"GymPassHistory"> | Date | string
    gymId?: IntFilter<"GymPassHistory"> | number
    userId?: IntFilter<"GymPassHistory"> | number
    hash?: StringFilter<"GymPassHistory"> | string
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GymPassHistoryOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    hash?: SortOrder
    Gym?: GymOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type GymPassHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GymPassHistoryWhereInput | GymPassHistoryWhereInput[]
    OR?: GymPassHistoryWhereInput[]
    NOT?: GymPassHistoryWhereInput | GymPassHistoryWhereInput[]
    createdAt?: DateTimeFilter<"GymPassHistory"> | Date | string
    gymId?: IntFilter<"GymPassHistory"> | number
    userId?: IntFilter<"GymPassHistory"> | number
    hash?: StringFilter<"GymPassHistory"> | string
    Gym?: XOR<GymRelationFilter, GymWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type GymPassHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    hash?: SortOrder
    _count?: GymPassHistoryCountOrderByAggregateInput
    _avg?: GymPassHistoryAvgOrderByAggregateInput
    _max?: GymPassHistoryMaxOrderByAggregateInput
    _min?: GymPassHistoryMinOrderByAggregateInput
    _sum?: GymPassHistorySumOrderByAggregateInput
  }

  export type GymPassHistoryScalarWhereWithAggregatesInput = {
    AND?: GymPassHistoryScalarWhereWithAggregatesInput | GymPassHistoryScalarWhereWithAggregatesInput[]
    OR?: GymPassHistoryScalarWhereWithAggregatesInput[]
    NOT?: GymPassHistoryScalarWhereWithAggregatesInput | GymPassHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GymPassHistory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GymPassHistory"> | Date | string
    gymId?: IntWithAggregatesFilter<"GymPassHistory"> | number
    userId?: IntWithAggregatesFilter<"GymPassHistory"> | number
    hash?: StringWithAggregatesFilter<"GymPassHistory"> | string
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NoticeCreateInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    User: UserCreateNestedOneWithoutNoticeInput
  }

  export type NoticeUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    userId: number
  }

  export type NoticeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneRequiredWithoutNoticeNestedInput
  }

  export type NoticeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type NoticeCreateManyInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    userId: number
  }

  export type NoticeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoticeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardCreateInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    BoardImage?: BoardImageCreateNestedManyWithoutBoardInput
    BoardReply?: BoardReplyCreateNestedManyWithoutBoardInput
    User: UserCreateNestedOneWithoutBoardInput
  }

  export type BoardUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    userId: number
    boardType?: $Enums.BoardType
    BoardImage?: BoardImageUncheckedCreateNestedManyWithoutBoardInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardImage?: BoardImageUpdateManyWithoutBoardNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutBoardNestedInput
    User?: UserUpdateOneRequiredWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardImage?: BoardImageUncheckedUpdateManyWithoutBoardNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardCreateManyInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    userId: number
    boardType?: $Enums.BoardType
  }

  export type BoardUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type BoardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type BoardImageCreateInput = {
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
    Board: BoardCreateNestedOneWithoutBoardImageInput
  }

  export type BoardImageUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
    boardId: number
  }

  export type BoardImageUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateOneRequiredWithoutBoardImageNestedInput
  }

  export type BoardImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
    boardId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardImageCreateManyInput = {
    id?: number
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
    boardId: number
  }

  export type BoardImageUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BoardImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
    boardId?: IntFieldUpdateOperationsInput | number
  }

  export type BoardReplyCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    User: UserCreateNestedOneWithoutBoardReplyInput
    Board: BoardCreateNestedOneWithoutBoardReplyInput
    BoardReply?: BoardReplyCreateNestedOneWithoutBoardNestedReplyInput
    BoardNestedReply?: BoardReplyCreateNestedManyWithoutBoardReplyInput
  }

  export type BoardReplyUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    userId: number
    boardId: number
    boardReplyId?: number | null
    boardType?: $Enums.BoardType
    BoardNestedReply?: BoardReplyUncheckedCreateNestedManyWithoutBoardReplyInput
  }

  export type BoardReplyUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    User?: UserUpdateOneRequiredWithoutBoardReplyNestedInput
    Board?: BoardUpdateOneRequiredWithoutBoardReplyNestedInput
    BoardReply?: BoardReplyUpdateOneWithoutBoardNestedReplyNestedInput
    BoardNestedReply?: BoardReplyUpdateManyWithoutBoardReplyNestedInput
  }

  export type BoardReplyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardId?: IntFieldUpdateOperationsInput | number
    boardReplyId?: NullableIntFieldUpdateOperationsInput | number | null
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardNestedReply?: BoardReplyUncheckedUpdateManyWithoutBoardReplyNestedInput
  }

  export type BoardReplyCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    userId: number
    boardId: number
    boardReplyId?: number | null
    boardType?: $Enums.BoardType
  }

  export type BoardReplyUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type BoardReplyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardId?: IntFieldUpdateOperationsInput | number
    boardReplyId?: NullableIntFieldUpdateOperationsInput | number | null
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type BodyPartCreateInput = {
    createdAt?: Date | string
    name: string
    code: string
    GymEquipments?: BodyPartsOnGymEquipmentsCreateNestedManyWithoutBodyPartInput
  }

  export type BodyPartUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    name: string
    code: string
    GymEquipments?: BodyPartsOnGymEquipmentsUncheckedCreateNestedManyWithoutBodyPartInput
  }

  export type BodyPartUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    GymEquipments?: BodyPartsOnGymEquipmentsUpdateManyWithoutBodyPartNestedInput
  }

  export type BodyPartUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    GymEquipments?: BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutBodyPartNestedInput
  }

  export type BodyPartCreateManyInput = {
    id?: number
    createdAt?: Date | string
    name: string
    code: string
  }

  export type BodyPartUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type BodyPartUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type GymEquipmentCreateInput = {
    createdAt?: Date | string
    name: string
    code: string
    BodyParts?: BodyPartsOnGymEquipmentsCreateNestedManyWithoutGymEquipmentInput
    Gyms?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymEquipmentInput
    GymEquipmentImage?: GymEquipmentImageCreateNestedManyWithoutGymEquipmentInput
  }

  export type GymEquipmentUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    name: string
    code: string
    BodyParts?: BodyPartsOnGymEquipmentsUncheckedCreateNestedManyWithoutGymEquipmentInput
    Gyms?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymEquipmentInput
    GymEquipmentImage?: GymEquipmentImageUncheckedCreateNestedManyWithoutGymEquipmentInput
  }

  export type GymEquipmentUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    BodyParts?: BodyPartsOnGymEquipmentsUpdateManyWithoutGymEquipmentNestedInput
    Gyms?: GymEuquipmentsOnGymsUpdateManyWithoutGymEquipmentNestedInput
    GymEquipmentImage?: GymEquipmentImageUpdateManyWithoutGymEquipmentNestedInput
  }

  export type GymEquipmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    BodyParts?: BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutGymEquipmentNestedInput
    Gyms?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymEquipmentNestedInput
    GymEquipmentImage?: GymEquipmentImageUncheckedUpdateManyWithoutGymEquipmentNestedInput
  }

  export type GymEquipmentCreateManyInput = {
    id?: number
    createdAt?: Date | string
    name: string
    code: string
  }

  export type GymEquipmentUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type GymEquipmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type GymEquipmentImageCreateInput = {
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
    GymEquipment: GymEquipmentCreateNestedOneWithoutGymEquipmentImageInput
  }

  export type GymEquipmentImageUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
    gymEquipmentId: number
  }

  export type GymEquipmentImageUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
    GymEquipment?: GymEquipmentUpdateOneRequiredWithoutGymEquipmentImageNestedInput
  }

  export type GymEquipmentImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type GymEquipmentImageCreateManyInput = {
    id?: number
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
    gymEquipmentId: number
  }

  export type GymEquipmentImageUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GymEquipmentImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type BodyPartsOnGymEquipmentsCreateInput = {
    assignedAt?: Date | string
    GymEquipment: GymEquipmentCreateNestedOneWithoutBodyPartsInput
    BodyPart: BodyPartCreateNestedOneWithoutGymEquipmentsInput
  }

  export type BodyPartsOnGymEquipmentsUncheckedCreateInput = {
    gymEquipmentId: number
    bodyPartId: number
    assignedAt?: Date | string
  }

  export type BodyPartsOnGymEquipmentsUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GymEquipment?: GymEquipmentUpdateOneRequiredWithoutBodyPartsNestedInput
    BodyPart?: BodyPartUpdateOneRequiredWithoutGymEquipmentsNestedInput
  }

  export type BodyPartsOnGymEquipmentsUncheckedUpdateInput = {
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    bodyPartId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BodyPartsOnGymEquipmentsCreateManyInput = {
    gymEquipmentId: number
    bodyPartId: number
    assignedAt?: Date | string
  }

  export type BodyPartsOnGymEquipmentsUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BodyPartsOnGymEquipmentsUncheckedUpdateManyInput = {
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    bodyPartId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymCreateInput = {
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    User: UserCreateNestedOneWithoutGymInput
    GymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    userId: number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymUncheckedCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneRequiredWithoutGymNestedInput
    GymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUncheckedUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutGymNestedInput
  }

  export type GymCreateManyInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    userId: number
  }

  export type GymUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GymUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GymEuquipmentsOnGymsCreateInput = {
    createdAt?: Date | string
    Gym: GymCreateNestedOneWithoutGymEquipmentsInput
    GymEquipment: GymEquipmentCreateNestedOneWithoutGymsInput
    assignUser: UserCreateNestedOneWithoutAssignedGymEquipmentsInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutGymEuquipmentsOnGymsInput
  }

  export type GymEuquipmentsOnGymsUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    gymEquipmentId: number
    assignBy: number
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutGymEuquipmentsOnGymsInput
  }

  export type GymEuquipmentsOnGymsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Gym?: GymUpdateOneRequiredWithoutGymEquipmentsNestedInput
    GymEquipment?: GymEquipmentUpdateOneRequiredWithoutGymsNestedInput
    assignUser?: UserUpdateOneRequiredWithoutAssignedGymEquipmentsNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutGymEuquipmentsOnGymsNestedInput
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutGymEuquipmentsOnGymsNestedInput
  }

  export type GymEuquipmentsOnGymsCreateManyInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    gymEquipmentId: number
    assignBy: number
  }

  export type GymEuquipmentsOnGymsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
  }

  export type GymEquipmentUserHistoryCreateInput = {
    usedAt?: Date | string
    endAt?: Date | string | null
    GymEuquipmentsOnGyms: GymEuquipmentsOnGymsCreateNestedOneWithoutGymEquipmentUserHistoryInput
    User: UserCreateNestedOneWithoutGymEquipmentUserHistoryInput
  }

  export type GymEquipmentUserHistoryUncheckedCreateInput = {
    id?: number
    gymEuquipmentsOnGymsId: number
    userId: number
    usedAt?: Date | string
    endAt?: Date | string | null
  }

  export type GymEquipmentUserHistoryUpdateInput = {
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    GymEuquipmentsOnGyms?: GymEuquipmentsOnGymsUpdateOneRequiredWithoutGymEquipmentUserHistoryNestedInput
    User?: UserUpdateOneRequiredWithoutGymEquipmentUserHistoryNestedInput
  }

  export type GymEquipmentUserHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gymEuquipmentsOnGymsId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymEquipmentUserHistoryCreateManyInput = {
    id?: number
    gymEuquipmentsOnGymsId: number
    userId: number
    usedAt?: Date | string
    endAt?: Date | string | null
  }

  export type GymEquipmentUserHistoryUpdateManyMutationInput = {
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymEquipmentUserHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gymEuquipmentsOnGymsId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymMembershipCreateInput = {
    createdAt?: Date | string
    startDay?: Date | string
    endDay: Date | string
    User: UserCreateNestedOneWithoutGymMembershipInput
    Gym: GymCreateNestedOneWithoutGymMembershipInput
    assignUser: UserCreateNestedOneWithoutAssignedGymMembershipsInput
    GymMembershipCancellation?: GymMembershipCancellationCreateNestedOneWithoutGymMembershipInput
  }

  export type GymMembershipUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    gymId: number
    assignBy: number
    startDay?: Date | string
    endDay: Date | string
    gymMembershipCancellationId?: number | null
  }

  export type GymMembershipUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutGymMembershipNestedInput
    Gym?: GymUpdateOneRequiredWithoutGymMembershipNestedInput
    assignUser?: UserUpdateOneRequiredWithoutAssignedGymMembershipsNestedInput
    GymMembershipCancellation?: GymMembershipCancellationUpdateOneWithoutGymMembershipNestedInput
  }

  export type GymMembershipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    gymMembershipCancellationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GymMembershipCreateManyInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    gymId: number
    assignBy: number
    startDay?: Date | string
    endDay: Date | string
    gymMembershipCancellationId?: number | null
  }

  export type GymMembershipUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymMembershipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    gymMembershipCancellationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GymMembershipCancellationCreateInput = {
    createdAt?: Date | string
    reason?: string | null
    GymMembership?: GymMembershipCreateNestedManyWithoutGymMembershipCancellationInput
  }

  export type GymMembershipCancellationUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    reason?: string | null
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutGymMembershipCancellationInput
  }

  export type GymMembershipCancellationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    GymMembership?: GymMembershipUpdateManyWithoutGymMembershipCancellationNestedInput
  }

  export type GymMembershipCancellationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutGymMembershipCancellationNestedInput
  }

  export type GymMembershipCancellationCreateManyInput = {
    id?: number
    createdAt?: Date | string
    reason?: string | null
  }

  export type GymMembershipCancellationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GymMembershipCancellationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FavoriteGymCreateInput = {
    assignedAt?: Date | string
    Gym: GymCreateNestedOneWithoutFavoriteUsersInput
    User: UserCreateNestedOneWithoutFavoriteGymsInput
  }

  export type FavoriteGymUncheckedCreateInput = {
    gymId: number
    userId: number
    assignedAt?: Date | string
  }

  export type FavoriteGymUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Gym?: GymUpdateOneRequiredWithoutFavoriteUsersNestedInput
    User?: UserUpdateOneRequiredWithoutFavoriteGymsNestedInput
  }

  export type FavoriteGymUncheckedUpdateInput = {
    gymId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteGymCreateManyInput = {
    gymId: number
    userId: number
    assignedAt?: Date | string
  }

  export type FavoriteGymUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteGymUncheckedUpdateManyInput = {
    gymId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymAccessHistoryCreateInput = {
    createdAt?: Date | string
    entryAt?: Date | string
    exitAt?: Date | string | null
    Gym: GymCreateNestedOneWithoutGymAccessHistoryInput
    User: UserCreateNestedOneWithoutGymAccessHistoryInput
  }

  export type GymAccessHistoryUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    userId: number
    entryAt?: Date | string
    exitAt?: Date | string | null
  }

  export type GymAccessHistoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gym?: GymUpdateOneRequiredWithoutGymAccessHistoryNestedInput
    User?: UserUpdateOneRequiredWithoutGymAccessHistoryNestedInput
  }

  export type GymAccessHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymAccessHistoryCreateManyInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    userId: number
    entryAt?: Date | string
    exitAt?: Date | string | null
  }

  export type GymAccessHistoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymAccessHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymPassHistoryCreateInput = {
    createdAt?: Date | string
    hash: string
    Gym: GymCreateNestedOneWithoutGymPassHistoryInput
    User: UserCreateNestedOneWithoutGymPassHistoryInput
  }

  export type GymPassHistoryUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    userId: number
    hash: string
  }

  export type GymPassHistoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    Gym?: GymUpdateOneRequiredWithoutGymPassHistoryNestedInput
    User?: UserUpdateOneRequiredWithoutGymPassHistoryNestedInput
  }

  export type GymPassHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type GymPassHistoryCreateManyInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    userId: number
    hash: string
  }

  export type GymPassHistoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type GymPassHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumLoginTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LoginType | EnumLoginTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LoginType[]
    notIn?: $Enums.LoginType[]
    not?: NestedEnumLoginTypeFilter<$PrismaModel> | $Enums.LoginType
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BoardListRelationFilter = {
    every?: BoardWhereInput
    some?: BoardWhereInput
    none?: BoardWhereInput
  }

  export type BoardReplyListRelationFilter = {
    every?: BoardReplyWhereInput
    some?: BoardReplyWhereInput
    none?: BoardReplyWhereInput
  }

  export type NoticeListRelationFilter = {
    every?: NoticeWhereInput
    some?: NoticeWhereInput
    none?: NoticeWhereInput
  }

  export type GymListRelationFilter = {
    every?: GymWhereInput
    some?: GymWhereInput
    none?: GymWhereInput
  }

  export type GymEuquipmentsOnGymsListRelationFilter = {
    every?: GymEuquipmentsOnGymsWhereInput
    some?: GymEuquipmentsOnGymsWhereInput
    none?: GymEuquipmentsOnGymsWhereInput
  }

  export type GymMembershipListRelationFilter = {
    every?: GymMembershipWhereInput
    some?: GymMembershipWhereInput
    none?: GymMembershipWhereInput
  }

  export type FavoriteGymListRelationFilter = {
    every?: FavoriteGymWhereInput
    some?: FavoriteGymWhereInput
    none?: FavoriteGymWhereInput
  }

  export type GymEquipmentUserHistoryListRelationFilter = {
    every?: GymEquipmentUserHistoryWhereInput
    some?: GymEquipmentUserHistoryWhereInput
    none?: GymEquipmentUserHistoryWhereInput
  }

  export type GymAccessHistoryListRelationFilter = {
    every?: GymAccessHistoryWhereInput
    some?: GymAccessHistoryWhereInput
    none?: GymAccessHistoryWhereInput
  }

  export type GymPassHistoryListRelationFilter = {
    every?: GymPassHistoryWhereInput
    some?: GymPassHistoryWhereInput
    none?: GymPassHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BoardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoticeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GymOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GymEuquipmentsOnGymsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GymMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteGymOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GymEquipmentUserHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GymAccessHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GymPassHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLoginUniqueCompoundUniqueInput = {
    loginType: $Enums.LoginType
    loginId: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    loginId?: SortOrder
    loginPw?: SortOrder
    username?: SortOrder
    loginType?: SortOrder
    userType?: SortOrder
    nickname?: SortOrder
    phone?: SortOrder
    isDisable?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    loginId?: SortOrder
    loginPw?: SortOrder
    username?: SortOrder
    loginType?: SortOrder
    userType?: SortOrder
    nickname?: SortOrder
    phone?: SortOrder
    isDisable?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    loginId?: SortOrder
    loginPw?: SortOrder
    username?: SortOrder
    loginType?: SortOrder
    userType?: SortOrder
    nickname?: SortOrder
    phone?: SortOrder
    isDisable?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumLoginTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LoginType | EnumLoginTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LoginType[]
    notIn?: $Enums.LoginType[]
    not?: NestedEnumLoginTypeWithAggregatesFilter<$PrismaModel> | $Enums.LoginType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLoginTypeFilter<$PrismaModel>
    _max?: NestedEnumLoginTypeFilter<$PrismaModel>
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type NoticeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    userId?: SortOrder
  }

  export type NoticeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NoticeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    userId?: SortOrder
  }

  export type NoticeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    userId?: SortOrder
  }

  export type NoticeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumBoardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardType | EnumBoardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BoardType[]
    notIn?: $Enums.BoardType[]
    not?: NestedEnumBoardTypeFilter<$PrismaModel> | $Enums.BoardType
  }

  export type BoardImageListRelationFilter = {
    every?: BoardImageWhereInput
    some?: BoardImageWhereInput
    none?: BoardImageWhereInput
  }

  export type BoardImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardType?: SortOrder
  }

  export type BoardAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BoardMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardType?: SortOrder
  }

  export type BoardMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    link?: SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardType?: SortOrder
  }

  export type BoardSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumBoardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardType | EnumBoardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BoardType[]
    notIn?: $Enums.BoardType[]
    not?: NestedEnumBoardTypeWithAggregatesFilter<$PrismaModel> | $Enums.BoardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardTypeFilter<$PrismaModel>
    _max?: NestedEnumBoardTypeFilter<$PrismaModel>
  }

  export type BoardRelationFilter = {
    is?: BoardWhereInput
    isNot?: BoardWhereInput
  }

  export type BoardImageCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    boardId?: SortOrder
  }

  export type BoardImageAvgOrderByAggregateInput = {
    id?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    boardId?: SortOrder
  }

  export type BoardImageMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    boardId?: SortOrder
  }

  export type BoardImageMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    boardId?: SortOrder
  }

  export type BoardImageSumOrderByAggregateInput = {
    id?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    boardId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoardReplyNullableRelationFilter = {
    is?: BoardReplyWhereInput | null
    isNot?: BoardReplyWhereInput | null
  }

  export type BoardReplyCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    boardReplyId?: SortOrder
    boardType?: SortOrder
  }

  export type BoardReplyAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    boardReplyId?: SortOrder
  }

  export type BoardReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    boardReplyId?: SortOrder
    boardType?: SortOrder
  }

  export type BoardReplyMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    isDisable?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    boardReplyId?: SortOrder
    boardType?: SortOrder
  }

  export type BoardReplySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    boardId?: SortOrder
    boardReplyId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BodyPartsOnGymEquipmentsListRelationFilter = {
    every?: BodyPartsOnGymEquipmentsWhereInput
    some?: BodyPartsOnGymEquipmentsWhereInput
    none?: BodyPartsOnGymEquipmentsWhereInput
  }

  export type BodyPartsOnGymEquipmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BodyPartCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type BodyPartAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BodyPartMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type BodyPartMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type BodyPartSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GymEquipmentImageListRelationFilter = {
    every?: GymEquipmentImageWhereInput
    some?: GymEquipmentImageWhereInput
    none?: GymEquipmentImageWhereInput
  }

  export type GymEquipmentImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GymEquipmentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type GymEquipmentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GymEquipmentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type GymEquipmentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type GymEquipmentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GymEquipmentRelationFilter = {
    is?: GymEquipmentWhereInput
    isNot?: GymEquipmentWhereInput
  }

  export type GymEquipmentImageCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    gymEquipmentId?: SortOrder
  }

  export type GymEquipmentImageAvgOrderByAggregateInput = {
    id?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    gymEquipmentId?: SortOrder
  }

  export type GymEquipmentImageMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    gymEquipmentId?: SortOrder
  }

  export type GymEquipmentImageMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    isThumb?: SortOrder
    gymEquipmentId?: SortOrder
  }

  export type GymEquipmentImageSumOrderByAggregateInput = {
    id?: SortOrder
    width?: SortOrder
    height?: SortOrder
    size?: SortOrder
    gymEquipmentId?: SortOrder
  }

  export type BodyPartRelationFilter = {
    is?: BodyPartWhereInput
    isNot?: BodyPartWhereInput
  }

  export type BodyPartsOnGymEquipmentsGymEquipmentIdBodyPartIdCompoundUniqueInput = {
    gymEquipmentId: number
    bodyPartId: number
  }

  export type BodyPartsOnGymEquipmentsCountOrderByAggregateInput = {
    gymEquipmentId?: SortOrder
    bodyPartId?: SortOrder
    assignedAt?: SortOrder
  }

  export type BodyPartsOnGymEquipmentsAvgOrderByAggregateInput = {
    gymEquipmentId?: SortOrder
    bodyPartId?: SortOrder
  }

  export type BodyPartsOnGymEquipmentsMaxOrderByAggregateInput = {
    gymEquipmentId?: SortOrder
    bodyPartId?: SortOrder
    assignedAt?: SortOrder
  }

  export type BodyPartsOnGymEquipmentsMinOrderByAggregateInput = {
    gymEquipmentId?: SortOrder
    bodyPartId?: SortOrder
    assignedAt?: SortOrder
  }

  export type BodyPartsOnGymEquipmentsSumOrderByAggregateInput = {
    gymEquipmentId?: SortOrder
    bodyPartId?: SortOrder
  }

  export type GymCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    ceoName?: SortOrder
    companyName?: SortOrder
    businessNumber?: SortOrder
    postcode?: SortOrder
    mainAddress?: SortOrder
    subAddress?: SortOrder
    phone?: SortOrder
    cellPhone?: SortOrder
    fax?: SortOrder
    email?: SortOrder
    isCertified?: SortOrder
    userId?: SortOrder
  }

  export type GymAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type GymMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    ceoName?: SortOrder
    companyName?: SortOrder
    businessNumber?: SortOrder
    postcode?: SortOrder
    mainAddress?: SortOrder
    subAddress?: SortOrder
    phone?: SortOrder
    cellPhone?: SortOrder
    fax?: SortOrder
    email?: SortOrder
    isCertified?: SortOrder
    userId?: SortOrder
  }

  export type GymMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    ceoName?: SortOrder
    companyName?: SortOrder
    businessNumber?: SortOrder
    postcode?: SortOrder
    mainAddress?: SortOrder
    subAddress?: SortOrder
    phone?: SortOrder
    cellPhone?: SortOrder
    fax?: SortOrder
    email?: SortOrder
    isCertified?: SortOrder
    userId?: SortOrder
  }

  export type GymSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type GymRelationFilter = {
    is?: GymWhereInput
    isNot?: GymWhereInput
  }

  export type GymEuquipmentsOnGymsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    gymEquipmentId?: SortOrder
    assignBy?: SortOrder
  }

  export type GymEuquipmentsOnGymsAvgOrderByAggregateInput = {
    id?: SortOrder
    gymId?: SortOrder
    gymEquipmentId?: SortOrder
    assignBy?: SortOrder
  }

  export type GymEuquipmentsOnGymsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    gymEquipmentId?: SortOrder
    assignBy?: SortOrder
  }

  export type GymEuquipmentsOnGymsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    gymEquipmentId?: SortOrder
    assignBy?: SortOrder
  }

  export type GymEuquipmentsOnGymsSumOrderByAggregateInput = {
    id?: SortOrder
    gymId?: SortOrder
    gymEquipmentId?: SortOrder
    assignBy?: SortOrder
  }

  export type GymEuquipmentsOnGymsRelationFilter = {
    is?: GymEuquipmentsOnGymsWhereInput
    isNot?: GymEuquipmentsOnGymsWhereInput
  }

  export type GymEquipmentUserHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    gymEuquipmentsOnGymsId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
    endAt?: SortOrder
  }

  export type GymEquipmentUserHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    gymEuquipmentsOnGymsId?: SortOrder
    userId?: SortOrder
  }

  export type GymEquipmentUserHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    gymEuquipmentsOnGymsId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
    endAt?: SortOrder
  }

  export type GymEquipmentUserHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    gymEuquipmentsOnGymsId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
    endAt?: SortOrder
  }

  export type GymEquipmentUserHistorySumOrderByAggregateInput = {
    id?: SortOrder
    gymEuquipmentsOnGymsId?: SortOrder
    userId?: SortOrder
  }

  export type GymMembershipCancellationNullableRelationFilter = {
    is?: GymMembershipCancellationWhereInput | null
    isNot?: GymMembershipCancellationWhereInput | null
  }

  export type GymMembershipCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gymId?: SortOrder
    assignBy?: SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    gymMembershipCancellationId?: SortOrder
  }

  export type GymMembershipAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gymId?: SortOrder
    assignBy?: SortOrder
    gymMembershipCancellationId?: SortOrder
  }

  export type GymMembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gymId?: SortOrder
    assignBy?: SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    gymMembershipCancellationId?: SortOrder
  }

  export type GymMembershipMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gymId?: SortOrder
    assignBy?: SortOrder
    startDay?: SortOrder
    endDay?: SortOrder
    gymMembershipCancellationId?: SortOrder
  }

  export type GymMembershipSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gymId?: SortOrder
    assignBy?: SortOrder
    gymMembershipCancellationId?: SortOrder
  }

  export type GymMembershipCancellationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    reason?: SortOrder
  }

  export type GymMembershipCancellationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GymMembershipCancellationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    reason?: SortOrder
  }

  export type GymMembershipCancellationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    reason?: SortOrder
  }

  export type GymMembershipCancellationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FavoriteGymGymIdUserIdCompoundUniqueInput = {
    gymId: number
    userId: number
  }

  export type FavoriteGymCountOrderByAggregateInput = {
    gymId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type FavoriteGymAvgOrderByAggregateInput = {
    gymId?: SortOrder
    userId?: SortOrder
  }

  export type FavoriteGymMaxOrderByAggregateInput = {
    gymId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type FavoriteGymMinOrderByAggregateInput = {
    gymId?: SortOrder
    userId?: SortOrder
    assignedAt?: SortOrder
  }

  export type FavoriteGymSumOrderByAggregateInput = {
    gymId?: SortOrder
    userId?: SortOrder
  }

  export type GymAccessHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    entryAt?: SortOrder
    exitAt?: SortOrder
  }

  export type GymAccessHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
  }

  export type GymAccessHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    entryAt?: SortOrder
    exitAt?: SortOrder
  }

  export type GymAccessHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    entryAt?: SortOrder
    exitAt?: SortOrder
  }

  export type GymAccessHistorySumOrderByAggregateInput = {
    id?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
  }

  export type GymPassHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    hash?: SortOrder
  }

  export type GymPassHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
  }

  export type GymPassHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    hash?: SortOrder
  }

  export type GymPassHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
    hash?: SortOrder
  }

  export type GymPassHistorySumOrderByAggregateInput = {
    id?: SortOrder
    gymId?: SortOrder
    userId?: SortOrder
  }

  export type BoardCreateNestedManyWithoutUserInput = {
    create?: XOR<BoardCreateWithoutUserInput, BoardUncheckedCreateWithoutUserInput> | BoardCreateWithoutUserInput[] | BoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutUserInput | BoardCreateOrConnectWithoutUserInput[]
    createMany?: BoardCreateManyUserInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type BoardReplyCreateNestedManyWithoutUserInput = {
    create?: XOR<BoardReplyCreateWithoutUserInput, BoardReplyUncheckedCreateWithoutUserInput> | BoardReplyCreateWithoutUserInput[] | BoardReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutUserInput | BoardReplyCreateOrConnectWithoutUserInput[]
    createMany?: BoardReplyCreateManyUserInputEnvelope
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
  }

  export type NoticeCreateNestedManyWithoutUserInput = {
    create?: XOR<NoticeCreateWithoutUserInput, NoticeUncheckedCreateWithoutUserInput> | NoticeCreateWithoutUserInput[] | NoticeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoticeCreateOrConnectWithoutUserInput | NoticeCreateOrConnectWithoutUserInput[]
    createMany?: NoticeCreateManyUserInputEnvelope
    connect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
  }

  export type GymCreateNestedManyWithoutUserInput = {
    create?: XOR<GymCreateWithoutUserInput, GymUncheckedCreateWithoutUserInput> | GymCreateWithoutUserInput[] | GymUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymCreateOrConnectWithoutUserInput | GymCreateOrConnectWithoutUserInput[]
    createMany?: GymCreateManyUserInputEnvelope
    connect?: GymWhereUniqueInput | GymWhereUniqueInput[]
  }

  export type GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutAssignUserInput, GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput> | GymEuquipmentsOnGymsCreateWithoutAssignUserInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput | GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyAssignUserInputEnvelope
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
  }

  export type GymMembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<GymMembershipCreateWithoutUserInput, GymMembershipUncheckedCreateWithoutUserInput> | GymMembershipCreateWithoutUserInput[] | GymMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutUserInput | GymMembershipCreateOrConnectWithoutUserInput[]
    createMany?: GymMembershipCreateManyUserInputEnvelope
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
  }

  export type GymMembershipCreateNestedManyWithoutAssignUserInput = {
    create?: XOR<GymMembershipCreateWithoutAssignUserInput, GymMembershipUncheckedCreateWithoutAssignUserInput> | GymMembershipCreateWithoutAssignUserInput[] | GymMembershipUncheckedCreateWithoutAssignUserInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutAssignUserInput | GymMembershipCreateOrConnectWithoutAssignUserInput[]
    createMany?: GymMembershipCreateManyAssignUserInputEnvelope
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
  }

  export type FavoriteGymCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteGymCreateWithoutUserInput, FavoriteGymUncheckedCreateWithoutUserInput> | FavoriteGymCreateWithoutUserInput[] | FavoriteGymUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteGymCreateOrConnectWithoutUserInput | FavoriteGymCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteGymCreateManyUserInputEnvelope
    connect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
  }

  export type GymEquipmentUserHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<GymEquipmentUserHistoryCreateWithoutUserInput, GymEquipmentUserHistoryUncheckedCreateWithoutUserInput> | GymEquipmentUserHistoryCreateWithoutUserInput[] | GymEquipmentUserHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymEquipmentUserHistoryCreateOrConnectWithoutUserInput | GymEquipmentUserHistoryCreateOrConnectWithoutUserInput[]
    createMany?: GymEquipmentUserHistoryCreateManyUserInputEnvelope
    connect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
  }

  export type GymAccessHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<GymAccessHistoryCreateWithoutUserInput, GymAccessHistoryUncheckedCreateWithoutUserInput> | GymAccessHistoryCreateWithoutUserInput[] | GymAccessHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymAccessHistoryCreateOrConnectWithoutUserInput | GymAccessHistoryCreateOrConnectWithoutUserInput[]
    createMany?: GymAccessHistoryCreateManyUserInputEnvelope
    connect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
  }

  export type GymPassHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<GymPassHistoryCreateWithoutUserInput, GymPassHistoryUncheckedCreateWithoutUserInput> | GymPassHistoryCreateWithoutUserInput[] | GymPassHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymPassHistoryCreateOrConnectWithoutUserInput | GymPassHistoryCreateOrConnectWithoutUserInput[]
    createMany?: GymPassHistoryCreateManyUserInputEnvelope
    connect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
  }

  export type BoardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BoardCreateWithoutUserInput, BoardUncheckedCreateWithoutUserInput> | BoardCreateWithoutUserInput[] | BoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutUserInput | BoardCreateOrConnectWithoutUserInput[]
    createMany?: BoardCreateManyUserInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type BoardReplyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BoardReplyCreateWithoutUserInput, BoardReplyUncheckedCreateWithoutUserInput> | BoardReplyCreateWithoutUserInput[] | BoardReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutUserInput | BoardReplyCreateOrConnectWithoutUserInput[]
    createMany?: BoardReplyCreateManyUserInputEnvelope
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
  }

  export type NoticeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NoticeCreateWithoutUserInput, NoticeUncheckedCreateWithoutUserInput> | NoticeCreateWithoutUserInput[] | NoticeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoticeCreateOrConnectWithoutUserInput | NoticeCreateOrConnectWithoutUserInput[]
    createMany?: NoticeCreateManyUserInputEnvelope
    connect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
  }

  export type GymUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GymCreateWithoutUserInput, GymUncheckedCreateWithoutUserInput> | GymCreateWithoutUserInput[] | GymUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymCreateOrConnectWithoutUserInput | GymCreateOrConnectWithoutUserInput[]
    createMany?: GymCreateManyUserInputEnvelope
    connect?: GymWhereUniqueInput | GymWhereUniqueInput[]
  }

  export type GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutAssignUserInput, GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput> | GymEuquipmentsOnGymsCreateWithoutAssignUserInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput | GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyAssignUserInputEnvelope
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
  }

  export type GymMembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GymMembershipCreateWithoutUserInput, GymMembershipUncheckedCreateWithoutUserInput> | GymMembershipCreateWithoutUserInput[] | GymMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutUserInput | GymMembershipCreateOrConnectWithoutUserInput[]
    createMany?: GymMembershipCreateManyUserInputEnvelope
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
  }

  export type GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput = {
    create?: XOR<GymMembershipCreateWithoutAssignUserInput, GymMembershipUncheckedCreateWithoutAssignUserInput> | GymMembershipCreateWithoutAssignUserInput[] | GymMembershipUncheckedCreateWithoutAssignUserInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutAssignUserInput | GymMembershipCreateOrConnectWithoutAssignUserInput[]
    createMany?: GymMembershipCreateManyAssignUserInputEnvelope
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
  }

  export type FavoriteGymUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteGymCreateWithoutUserInput, FavoriteGymUncheckedCreateWithoutUserInput> | FavoriteGymCreateWithoutUserInput[] | FavoriteGymUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteGymCreateOrConnectWithoutUserInput | FavoriteGymCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteGymCreateManyUserInputEnvelope
    connect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
  }

  export type GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GymEquipmentUserHistoryCreateWithoutUserInput, GymEquipmentUserHistoryUncheckedCreateWithoutUserInput> | GymEquipmentUserHistoryCreateWithoutUserInput[] | GymEquipmentUserHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymEquipmentUserHistoryCreateOrConnectWithoutUserInput | GymEquipmentUserHistoryCreateOrConnectWithoutUserInput[]
    createMany?: GymEquipmentUserHistoryCreateManyUserInputEnvelope
    connect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
  }

  export type GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GymAccessHistoryCreateWithoutUserInput, GymAccessHistoryUncheckedCreateWithoutUserInput> | GymAccessHistoryCreateWithoutUserInput[] | GymAccessHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymAccessHistoryCreateOrConnectWithoutUserInput | GymAccessHistoryCreateOrConnectWithoutUserInput[]
    createMany?: GymAccessHistoryCreateManyUserInputEnvelope
    connect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
  }

  export type GymPassHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GymPassHistoryCreateWithoutUserInput, GymPassHistoryUncheckedCreateWithoutUserInput> | GymPassHistoryCreateWithoutUserInput[] | GymPassHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymPassHistoryCreateOrConnectWithoutUserInput | GymPassHistoryCreateOrConnectWithoutUserInput[]
    createMany?: GymPassHistoryCreateManyUserInputEnvelope
    connect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumLoginTypeFieldUpdateOperationsInput = {
    set?: $Enums.LoginType
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BoardUpdateManyWithoutUserNestedInput = {
    create?: XOR<BoardCreateWithoutUserInput, BoardUncheckedCreateWithoutUserInput> | BoardCreateWithoutUserInput[] | BoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutUserInput | BoardCreateOrConnectWithoutUserInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutUserInput | BoardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BoardCreateManyUserInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutUserInput | BoardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutUserInput | BoardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type BoardReplyUpdateManyWithoutUserNestedInput = {
    create?: XOR<BoardReplyCreateWithoutUserInput, BoardReplyUncheckedCreateWithoutUserInput> | BoardReplyCreateWithoutUserInput[] | BoardReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutUserInput | BoardReplyCreateOrConnectWithoutUserInput[]
    upsert?: BoardReplyUpsertWithWhereUniqueWithoutUserInput | BoardReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BoardReplyCreateManyUserInputEnvelope
    set?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    disconnect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    delete?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    update?: BoardReplyUpdateWithWhereUniqueWithoutUserInput | BoardReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BoardReplyUpdateManyWithWhereWithoutUserInput | BoardReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BoardReplyScalarWhereInput | BoardReplyScalarWhereInput[]
  }

  export type NoticeUpdateManyWithoutUserNestedInput = {
    create?: XOR<NoticeCreateWithoutUserInput, NoticeUncheckedCreateWithoutUserInput> | NoticeCreateWithoutUserInput[] | NoticeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoticeCreateOrConnectWithoutUserInput | NoticeCreateOrConnectWithoutUserInput[]
    upsert?: NoticeUpsertWithWhereUniqueWithoutUserInput | NoticeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NoticeCreateManyUserInputEnvelope
    set?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    disconnect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    delete?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    connect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    update?: NoticeUpdateWithWhereUniqueWithoutUserInput | NoticeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NoticeUpdateManyWithWhereWithoutUserInput | NoticeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NoticeScalarWhereInput | NoticeScalarWhereInput[]
  }

  export type GymUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymCreateWithoutUserInput, GymUncheckedCreateWithoutUserInput> | GymCreateWithoutUserInput[] | GymUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymCreateOrConnectWithoutUserInput | GymCreateOrConnectWithoutUserInput[]
    upsert?: GymUpsertWithWhereUniqueWithoutUserInput | GymUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymCreateManyUserInputEnvelope
    set?: GymWhereUniqueInput | GymWhereUniqueInput[]
    disconnect?: GymWhereUniqueInput | GymWhereUniqueInput[]
    delete?: GymWhereUniqueInput | GymWhereUniqueInput[]
    connect?: GymWhereUniqueInput | GymWhereUniqueInput[]
    update?: GymUpdateWithWhereUniqueWithoutUserInput | GymUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymUpdateManyWithWhereWithoutUserInput | GymUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymScalarWhereInput | GymScalarWhereInput[]
  }

  export type GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutAssignUserInput, GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput> | GymEuquipmentsOnGymsCreateWithoutAssignUserInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput | GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput[]
    upsert?: GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutAssignUserInput | GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutAssignUserInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyAssignUserInputEnvelope
    set?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    disconnect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    delete?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    update?: GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutAssignUserInput | GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutAssignUserInput[]
    updateMany?: GymEuquipmentsOnGymsUpdateManyWithWhereWithoutAssignUserInput | GymEuquipmentsOnGymsUpdateManyWithWhereWithoutAssignUserInput[]
    deleteMany?: GymEuquipmentsOnGymsScalarWhereInput | GymEuquipmentsOnGymsScalarWhereInput[]
  }

  export type GymMembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymMembershipCreateWithoutUserInput, GymMembershipUncheckedCreateWithoutUserInput> | GymMembershipCreateWithoutUserInput[] | GymMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutUserInput | GymMembershipCreateOrConnectWithoutUserInput[]
    upsert?: GymMembershipUpsertWithWhereUniqueWithoutUserInput | GymMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymMembershipCreateManyUserInputEnvelope
    set?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    disconnect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    delete?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    update?: GymMembershipUpdateWithWhereUniqueWithoutUserInput | GymMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymMembershipUpdateManyWithWhereWithoutUserInput | GymMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
  }

  export type GymMembershipUpdateManyWithoutAssignUserNestedInput = {
    create?: XOR<GymMembershipCreateWithoutAssignUserInput, GymMembershipUncheckedCreateWithoutAssignUserInput> | GymMembershipCreateWithoutAssignUserInput[] | GymMembershipUncheckedCreateWithoutAssignUserInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutAssignUserInput | GymMembershipCreateOrConnectWithoutAssignUserInput[]
    upsert?: GymMembershipUpsertWithWhereUniqueWithoutAssignUserInput | GymMembershipUpsertWithWhereUniqueWithoutAssignUserInput[]
    createMany?: GymMembershipCreateManyAssignUserInputEnvelope
    set?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    disconnect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    delete?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    update?: GymMembershipUpdateWithWhereUniqueWithoutAssignUserInput | GymMembershipUpdateWithWhereUniqueWithoutAssignUserInput[]
    updateMany?: GymMembershipUpdateManyWithWhereWithoutAssignUserInput | GymMembershipUpdateManyWithWhereWithoutAssignUserInput[]
    deleteMany?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
  }

  export type FavoriteGymUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteGymCreateWithoutUserInput, FavoriteGymUncheckedCreateWithoutUserInput> | FavoriteGymCreateWithoutUserInput[] | FavoriteGymUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteGymCreateOrConnectWithoutUserInput | FavoriteGymCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteGymUpsertWithWhereUniqueWithoutUserInput | FavoriteGymUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteGymCreateManyUserInputEnvelope
    set?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    disconnect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    delete?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    connect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    update?: FavoriteGymUpdateWithWhereUniqueWithoutUserInput | FavoriteGymUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteGymUpdateManyWithWhereWithoutUserInput | FavoriteGymUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteGymScalarWhereInput | FavoriteGymScalarWhereInput[]
  }

  export type GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymEquipmentUserHistoryCreateWithoutUserInput, GymEquipmentUserHistoryUncheckedCreateWithoutUserInput> | GymEquipmentUserHistoryCreateWithoutUserInput[] | GymEquipmentUserHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymEquipmentUserHistoryCreateOrConnectWithoutUserInput | GymEquipmentUserHistoryCreateOrConnectWithoutUserInput[]
    upsert?: GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutUserInput | GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymEquipmentUserHistoryCreateManyUserInputEnvelope
    set?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    disconnect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    delete?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    connect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    update?: GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutUserInput | GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymEquipmentUserHistoryUpdateManyWithWhereWithoutUserInput | GymEquipmentUserHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymEquipmentUserHistoryScalarWhereInput | GymEquipmentUserHistoryScalarWhereInput[]
  }

  export type GymAccessHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymAccessHistoryCreateWithoutUserInput, GymAccessHistoryUncheckedCreateWithoutUserInput> | GymAccessHistoryCreateWithoutUserInput[] | GymAccessHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymAccessHistoryCreateOrConnectWithoutUserInput | GymAccessHistoryCreateOrConnectWithoutUserInput[]
    upsert?: GymAccessHistoryUpsertWithWhereUniqueWithoutUserInput | GymAccessHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymAccessHistoryCreateManyUserInputEnvelope
    set?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    disconnect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    delete?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    connect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    update?: GymAccessHistoryUpdateWithWhereUniqueWithoutUserInput | GymAccessHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymAccessHistoryUpdateManyWithWhereWithoutUserInput | GymAccessHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymAccessHistoryScalarWhereInput | GymAccessHistoryScalarWhereInput[]
  }

  export type GymPassHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymPassHistoryCreateWithoutUserInput, GymPassHistoryUncheckedCreateWithoutUserInput> | GymPassHistoryCreateWithoutUserInput[] | GymPassHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymPassHistoryCreateOrConnectWithoutUserInput | GymPassHistoryCreateOrConnectWithoutUserInput[]
    upsert?: GymPassHistoryUpsertWithWhereUniqueWithoutUserInput | GymPassHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymPassHistoryCreateManyUserInputEnvelope
    set?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    disconnect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    delete?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    connect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    update?: GymPassHistoryUpdateWithWhereUniqueWithoutUserInput | GymPassHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymPassHistoryUpdateManyWithWhereWithoutUserInput | GymPassHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymPassHistoryScalarWhereInput | GymPassHistoryScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BoardCreateWithoutUserInput, BoardUncheckedCreateWithoutUserInput> | BoardCreateWithoutUserInput[] | BoardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutUserInput | BoardCreateOrConnectWithoutUserInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutUserInput | BoardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BoardCreateManyUserInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutUserInput | BoardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutUserInput | BoardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type BoardReplyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BoardReplyCreateWithoutUserInput, BoardReplyUncheckedCreateWithoutUserInput> | BoardReplyCreateWithoutUserInput[] | BoardReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutUserInput | BoardReplyCreateOrConnectWithoutUserInput[]
    upsert?: BoardReplyUpsertWithWhereUniqueWithoutUserInput | BoardReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BoardReplyCreateManyUserInputEnvelope
    set?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    disconnect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    delete?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    update?: BoardReplyUpdateWithWhereUniqueWithoutUserInput | BoardReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BoardReplyUpdateManyWithWhereWithoutUserInput | BoardReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BoardReplyScalarWhereInput | BoardReplyScalarWhereInput[]
  }

  export type NoticeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NoticeCreateWithoutUserInput, NoticeUncheckedCreateWithoutUserInput> | NoticeCreateWithoutUserInput[] | NoticeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoticeCreateOrConnectWithoutUserInput | NoticeCreateOrConnectWithoutUserInput[]
    upsert?: NoticeUpsertWithWhereUniqueWithoutUserInput | NoticeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NoticeCreateManyUserInputEnvelope
    set?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    disconnect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    delete?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    connect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    update?: NoticeUpdateWithWhereUniqueWithoutUserInput | NoticeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NoticeUpdateManyWithWhereWithoutUserInput | NoticeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NoticeScalarWhereInput | NoticeScalarWhereInput[]
  }

  export type GymUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymCreateWithoutUserInput, GymUncheckedCreateWithoutUserInput> | GymCreateWithoutUserInput[] | GymUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymCreateOrConnectWithoutUserInput | GymCreateOrConnectWithoutUserInput[]
    upsert?: GymUpsertWithWhereUniqueWithoutUserInput | GymUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymCreateManyUserInputEnvelope
    set?: GymWhereUniqueInput | GymWhereUniqueInput[]
    disconnect?: GymWhereUniqueInput | GymWhereUniqueInput[]
    delete?: GymWhereUniqueInput | GymWhereUniqueInput[]
    connect?: GymWhereUniqueInput | GymWhereUniqueInput[]
    update?: GymUpdateWithWhereUniqueWithoutUserInput | GymUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymUpdateManyWithWhereWithoutUserInput | GymUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymScalarWhereInput | GymScalarWhereInput[]
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutAssignUserInput, GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput> | GymEuquipmentsOnGymsCreateWithoutAssignUserInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput | GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput[]
    upsert?: GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutAssignUserInput | GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutAssignUserInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyAssignUserInputEnvelope
    set?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    disconnect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    delete?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    update?: GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutAssignUserInput | GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutAssignUserInput[]
    updateMany?: GymEuquipmentsOnGymsUpdateManyWithWhereWithoutAssignUserInput | GymEuquipmentsOnGymsUpdateManyWithWhereWithoutAssignUserInput[]
    deleteMany?: GymEuquipmentsOnGymsScalarWhereInput | GymEuquipmentsOnGymsScalarWhereInput[]
  }

  export type GymMembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymMembershipCreateWithoutUserInput, GymMembershipUncheckedCreateWithoutUserInput> | GymMembershipCreateWithoutUserInput[] | GymMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutUserInput | GymMembershipCreateOrConnectWithoutUserInput[]
    upsert?: GymMembershipUpsertWithWhereUniqueWithoutUserInput | GymMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymMembershipCreateManyUserInputEnvelope
    set?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    disconnect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    delete?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    update?: GymMembershipUpdateWithWhereUniqueWithoutUserInput | GymMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymMembershipUpdateManyWithWhereWithoutUserInput | GymMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
  }

  export type GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput = {
    create?: XOR<GymMembershipCreateWithoutAssignUserInput, GymMembershipUncheckedCreateWithoutAssignUserInput> | GymMembershipCreateWithoutAssignUserInput[] | GymMembershipUncheckedCreateWithoutAssignUserInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutAssignUserInput | GymMembershipCreateOrConnectWithoutAssignUserInput[]
    upsert?: GymMembershipUpsertWithWhereUniqueWithoutAssignUserInput | GymMembershipUpsertWithWhereUniqueWithoutAssignUserInput[]
    createMany?: GymMembershipCreateManyAssignUserInputEnvelope
    set?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    disconnect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    delete?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    update?: GymMembershipUpdateWithWhereUniqueWithoutAssignUserInput | GymMembershipUpdateWithWhereUniqueWithoutAssignUserInput[]
    updateMany?: GymMembershipUpdateManyWithWhereWithoutAssignUserInput | GymMembershipUpdateManyWithWhereWithoutAssignUserInput[]
    deleteMany?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
  }

  export type FavoriteGymUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteGymCreateWithoutUserInput, FavoriteGymUncheckedCreateWithoutUserInput> | FavoriteGymCreateWithoutUserInput[] | FavoriteGymUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteGymCreateOrConnectWithoutUserInput | FavoriteGymCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteGymUpsertWithWhereUniqueWithoutUserInput | FavoriteGymUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteGymCreateManyUserInputEnvelope
    set?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    disconnect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    delete?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    connect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    update?: FavoriteGymUpdateWithWhereUniqueWithoutUserInput | FavoriteGymUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteGymUpdateManyWithWhereWithoutUserInput | FavoriteGymUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteGymScalarWhereInput | FavoriteGymScalarWhereInput[]
  }

  export type GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymEquipmentUserHistoryCreateWithoutUserInput, GymEquipmentUserHistoryUncheckedCreateWithoutUserInput> | GymEquipmentUserHistoryCreateWithoutUserInput[] | GymEquipmentUserHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymEquipmentUserHistoryCreateOrConnectWithoutUserInput | GymEquipmentUserHistoryCreateOrConnectWithoutUserInput[]
    upsert?: GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutUserInput | GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymEquipmentUserHistoryCreateManyUserInputEnvelope
    set?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    disconnect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    delete?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    connect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    update?: GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutUserInput | GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymEquipmentUserHistoryUpdateManyWithWhereWithoutUserInput | GymEquipmentUserHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymEquipmentUserHistoryScalarWhereInput | GymEquipmentUserHistoryScalarWhereInput[]
  }

  export type GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymAccessHistoryCreateWithoutUserInput, GymAccessHistoryUncheckedCreateWithoutUserInput> | GymAccessHistoryCreateWithoutUserInput[] | GymAccessHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymAccessHistoryCreateOrConnectWithoutUserInput | GymAccessHistoryCreateOrConnectWithoutUserInput[]
    upsert?: GymAccessHistoryUpsertWithWhereUniqueWithoutUserInput | GymAccessHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymAccessHistoryCreateManyUserInputEnvelope
    set?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    disconnect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    delete?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    connect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    update?: GymAccessHistoryUpdateWithWhereUniqueWithoutUserInput | GymAccessHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymAccessHistoryUpdateManyWithWhereWithoutUserInput | GymAccessHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymAccessHistoryScalarWhereInput | GymAccessHistoryScalarWhereInput[]
  }

  export type GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GymPassHistoryCreateWithoutUserInput, GymPassHistoryUncheckedCreateWithoutUserInput> | GymPassHistoryCreateWithoutUserInput[] | GymPassHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GymPassHistoryCreateOrConnectWithoutUserInput | GymPassHistoryCreateOrConnectWithoutUserInput[]
    upsert?: GymPassHistoryUpsertWithWhereUniqueWithoutUserInput | GymPassHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GymPassHistoryCreateManyUserInputEnvelope
    set?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    disconnect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    delete?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    connect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    update?: GymPassHistoryUpdateWithWhereUniqueWithoutUserInput | GymPassHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GymPassHistoryUpdateManyWithWhereWithoutUserInput | GymPassHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GymPassHistoryScalarWhereInput | GymPassHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNoticeInput = {
    create?: XOR<UserCreateWithoutNoticeInput, UserUncheckedCreateWithoutNoticeInput>
    connectOrCreate?: UserCreateOrConnectWithoutNoticeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNoticeNestedInput = {
    create?: XOR<UserCreateWithoutNoticeInput, UserUncheckedCreateWithoutNoticeInput>
    connectOrCreate?: UserCreateOrConnectWithoutNoticeInput
    upsert?: UserUpsertWithoutNoticeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNoticeInput, UserUpdateWithoutNoticeInput>, UserUncheckedUpdateWithoutNoticeInput>
  }

  export type BoardImageCreateNestedManyWithoutBoardInput = {
    create?: XOR<BoardImageCreateWithoutBoardInput, BoardImageUncheckedCreateWithoutBoardInput> | BoardImageCreateWithoutBoardInput[] | BoardImageUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardImageCreateOrConnectWithoutBoardInput | BoardImageCreateOrConnectWithoutBoardInput[]
    createMany?: BoardImageCreateManyBoardInputEnvelope
    connect?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
  }

  export type BoardReplyCreateNestedManyWithoutBoardInput = {
    create?: XOR<BoardReplyCreateWithoutBoardInput, BoardReplyUncheckedCreateWithoutBoardInput> | BoardReplyCreateWithoutBoardInput[] | BoardReplyUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardInput | BoardReplyCreateOrConnectWithoutBoardInput[]
    createMany?: BoardReplyCreateManyBoardInputEnvelope
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutBoardInput = {
    create?: XOR<UserCreateWithoutBoardInput, UserUncheckedCreateWithoutBoardInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardInput
    connect?: UserWhereUniqueInput
  }

  export type BoardImageUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<BoardImageCreateWithoutBoardInput, BoardImageUncheckedCreateWithoutBoardInput> | BoardImageCreateWithoutBoardInput[] | BoardImageUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardImageCreateOrConnectWithoutBoardInput | BoardImageCreateOrConnectWithoutBoardInput[]
    createMany?: BoardImageCreateManyBoardInputEnvelope
    connect?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
  }

  export type BoardReplyUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<BoardReplyCreateWithoutBoardInput, BoardReplyUncheckedCreateWithoutBoardInput> | BoardReplyCreateWithoutBoardInput[] | BoardReplyUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardInput | BoardReplyCreateOrConnectWithoutBoardInput[]
    createMany?: BoardReplyCreateManyBoardInputEnvelope
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
  }

  export type EnumBoardTypeFieldUpdateOperationsInput = {
    set?: $Enums.BoardType
  }

  export type BoardImageUpdateManyWithoutBoardNestedInput = {
    create?: XOR<BoardImageCreateWithoutBoardInput, BoardImageUncheckedCreateWithoutBoardInput> | BoardImageCreateWithoutBoardInput[] | BoardImageUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardImageCreateOrConnectWithoutBoardInput | BoardImageCreateOrConnectWithoutBoardInput[]
    upsert?: BoardImageUpsertWithWhereUniqueWithoutBoardInput | BoardImageUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: BoardImageCreateManyBoardInputEnvelope
    set?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
    disconnect?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
    delete?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
    connect?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
    update?: BoardImageUpdateWithWhereUniqueWithoutBoardInput | BoardImageUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: BoardImageUpdateManyWithWhereWithoutBoardInput | BoardImageUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: BoardImageScalarWhereInput | BoardImageScalarWhereInput[]
  }

  export type BoardReplyUpdateManyWithoutBoardNestedInput = {
    create?: XOR<BoardReplyCreateWithoutBoardInput, BoardReplyUncheckedCreateWithoutBoardInput> | BoardReplyCreateWithoutBoardInput[] | BoardReplyUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardInput | BoardReplyCreateOrConnectWithoutBoardInput[]
    upsert?: BoardReplyUpsertWithWhereUniqueWithoutBoardInput | BoardReplyUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: BoardReplyCreateManyBoardInputEnvelope
    set?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    disconnect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    delete?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    update?: BoardReplyUpdateWithWhereUniqueWithoutBoardInput | BoardReplyUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: BoardReplyUpdateManyWithWhereWithoutBoardInput | BoardReplyUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: BoardReplyScalarWhereInput | BoardReplyScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutBoardNestedInput = {
    create?: XOR<UserCreateWithoutBoardInput, UserUncheckedCreateWithoutBoardInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardInput
    upsert?: UserUpsertWithoutBoardInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoardInput, UserUpdateWithoutBoardInput>, UserUncheckedUpdateWithoutBoardInput>
  }

  export type BoardImageUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<BoardImageCreateWithoutBoardInput, BoardImageUncheckedCreateWithoutBoardInput> | BoardImageCreateWithoutBoardInput[] | BoardImageUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardImageCreateOrConnectWithoutBoardInput | BoardImageCreateOrConnectWithoutBoardInput[]
    upsert?: BoardImageUpsertWithWhereUniqueWithoutBoardInput | BoardImageUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: BoardImageCreateManyBoardInputEnvelope
    set?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
    disconnect?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
    delete?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
    connect?: BoardImageWhereUniqueInput | BoardImageWhereUniqueInput[]
    update?: BoardImageUpdateWithWhereUniqueWithoutBoardInput | BoardImageUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: BoardImageUpdateManyWithWhereWithoutBoardInput | BoardImageUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: BoardImageScalarWhereInput | BoardImageScalarWhereInput[]
  }

  export type BoardReplyUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<BoardReplyCreateWithoutBoardInput, BoardReplyUncheckedCreateWithoutBoardInput> | BoardReplyCreateWithoutBoardInput[] | BoardReplyUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardInput | BoardReplyCreateOrConnectWithoutBoardInput[]
    upsert?: BoardReplyUpsertWithWhereUniqueWithoutBoardInput | BoardReplyUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: BoardReplyCreateManyBoardInputEnvelope
    set?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    disconnect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    delete?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    update?: BoardReplyUpdateWithWhereUniqueWithoutBoardInput | BoardReplyUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: BoardReplyUpdateManyWithWhereWithoutBoardInput | BoardReplyUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: BoardReplyScalarWhereInput | BoardReplyScalarWhereInput[]
  }

  export type BoardCreateNestedOneWithoutBoardImageInput = {
    create?: XOR<BoardCreateWithoutBoardImageInput, BoardUncheckedCreateWithoutBoardImageInput>
    connectOrCreate?: BoardCreateOrConnectWithoutBoardImageInput
    connect?: BoardWhereUniqueInput
  }

  export type BoardUpdateOneRequiredWithoutBoardImageNestedInput = {
    create?: XOR<BoardCreateWithoutBoardImageInput, BoardUncheckedCreateWithoutBoardImageInput>
    connectOrCreate?: BoardCreateOrConnectWithoutBoardImageInput
    upsert?: BoardUpsertWithoutBoardImageInput
    connect?: BoardWhereUniqueInput
    update?: XOR<XOR<BoardUpdateToOneWithWhereWithoutBoardImageInput, BoardUpdateWithoutBoardImageInput>, BoardUncheckedUpdateWithoutBoardImageInput>
  }

  export type UserCreateNestedOneWithoutBoardReplyInput = {
    create?: XOR<UserCreateWithoutBoardReplyInput, UserUncheckedCreateWithoutBoardReplyInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardReplyInput
    connect?: UserWhereUniqueInput
  }

  export type BoardCreateNestedOneWithoutBoardReplyInput = {
    create?: XOR<BoardCreateWithoutBoardReplyInput, BoardUncheckedCreateWithoutBoardReplyInput>
    connectOrCreate?: BoardCreateOrConnectWithoutBoardReplyInput
    connect?: BoardWhereUniqueInput
  }

  export type BoardReplyCreateNestedOneWithoutBoardNestedReplyInput = {
    create?: XOR<BoardReplyCreateWithoutBoardNestedReplyInput, BoardReplyUncheckedCreateWithoutBoardNestedReplyInput>
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardNestedReplyInput
    connect?: BoardReplyWhereUniqueInput
  }

  export type BoardReplyCreateNestedManyWithoutBoardReplyInput = {
    create?: XOR<BoardReplyCreateWithoutBoardReplyInput, BoardReplyUncheckedCreateWithoutBoardReplyInput> | BoardReplyCreateWithoutBoardReplyInput[] | BoardReplyUncheckedCreateWithoutBoardReplyInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardReplyInput | BoardReplyCreateOrConnectWithoutBoardReplyInput[]
    createMany?: BoardReplyCreateManyBoardReplyInputEnvelope
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
  }

  export type BoardReplyUncheckedCreateNestedManyWithoutBoardReplyInput = {
    create?: XOR<BoardReplyCreateWithoutBoardReplyInput, BoardReplyUncheckedCreateWithoutBoardReplyInput> | BoardReplyCreateWithoutBoardReplyInput[] | BoardReplyUncheckedCreateWithoutBoardReplyInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardReplyInput | BoardReplyCreateOrConnectWithoutBoardReplyInput[]
    createMany?: BoardReplyCreateManyBoardReplyInputEnvelope
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutBoardReplyNestedInput = {
    create?: XOR<UserCreateWithoutBoardReplyInput, UserUncheckedCreateWithoutBoardReplyInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardReplyInput
    upsert?: UserUpsertWithoutBoardReplyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoardReplyInput, UserUpdateWithoutBoardReplyInput>, UserUncheckedUpdateWithoutBoardReplyInput>
  }

  export type BoardUpdateOneRequiredWithoutBoardReplyNestedInput = {
    create?: XOR<BoardCreateWithoutBoardReplyInput, BoardUncheckedCreateWithoutBoardReplyInput>
    connectOrCreate?: BoardCreateOrConnectWithoutBoardReplyInput
    upsert?: BoardUpsertWithoutBoardReplyInput
    connect?: BoardWhereUniqueInput
    update?: XOR<XOR<BoardUpdateToOneWithWhereWithoutBoardReplyInput, BoardUpdateWithoutBoardReplyInput>, BoardUncheckedUpdateWithoutBoardReplyInput>
  }

  export type BoardReplyUpdateOneWithoutBoardNestedReplyNestedInput = {
    create?: XOR<BoardReplyCreateWithoutBoardNestedReplyInput, BoardReplyUncheckedCreateWithoutBoardNestedReplyInput>
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardNestedReplyInput
    upsert?: BoardReplyUpsertWithoutBoardNestedReplyInput
    disconnect?: BoardReplyWhereInput | boolean
    delete?: BoardReplyWhereInput | boolean
    connect?: BoardReplyWhereUniqueInput
    update?: XOR<XOR<BoardReplyUpdateToOneWithWhereWithoutBoardNestedReplyInput, BoardReplyUpdateWithoutBoardNestedReplyInput>, BoardReplyUncheckedUpdateWithoutBoardNestedReplyInput>
  }

  export type BoardReplyUpdateManyWithoutBoardReplyNestedInput = {
    create?: XOR<BoardReplyCreateWithoutBoardReplyInput, BoardReplyUncheckedCreateWithoutBoardReplyInput> | BoardReplyCreateWithoutBoardReplyInput[] | BoardReplyUncheckedCreateWithoutBoardReplyInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardReplyInput | BoardReplyCreateOrConnectWithoutBoardReplyInput[]
    upsert?: BoardReplyUpsertWithWhereUniqueWithoutBoardReplyInput | BoardReplyUpsertWithWhereUniqueWithoutBoardReplyInput[]
    createMany?: BoardReplyCreateManyBoardReplyInputEnvelope
    set?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    disconnect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    delete?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    update?: BoardReplyUpdateWithWhereUniqueWithoutBoardReplyInput | BoardReplyUpdateWithWhereUniqueWithoutBoardReplyInput[]
    updateMany?: BoardReplyUpdateManyWithWhereWithoutBoardReplyInput | BoardReplyUpdateManyWithWhereWithoutBoardReplyInput[]
    deleteMany?: BoardReplyScalarWhereInput | BoardReplyScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoardReplyUncheckedUpdateManyWithoutBoardReplyNestedInput = {
    create?: XOR<BoardReplyCreateWithoutBoardReplyInput, BoardReplyUncheckedCreateWithoutBoardReplyInput> | BoardReplyCreateWithoutBoardReplyInput[] | BoardReplyUncheckedCreateWithoutBoardReplyInput[]
    connectOrCreate?: BoardReplyCreateOrConnectWithoutBoardReplyInput | BoardReplyCreateOrConnectWithoutBoardReplyInput[]
    upsert?: BoardReplyUpsertWithWhereUniqueWithoutBoardReplyInput | BoardReplyUpsertWithWhereUniqueWithoutBoardReplyInput[]
    createMany?: BoardReplyCreateManyBoardReplyInputEnvelope
    set?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    disconnect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    delete?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    connect?: BoardReplyWhereUniqueInput | BoardReplyWhereUniqueInput[]
    update?: BoardReplyUpdateWithWhereUniqueWithoutBoardReplyInput | BoardReplyUpdateWithWhereUniqueWithoutBoardReplyInput[]
    updateMany?: BoardReplyUpdateManyWithWhereWithoutBoardReplyInput | BoardReplyUpdateManyWithWhereWithoutBoardReplyInput[]
    deleteMany?: BoardReplyScalarWhereInput | BoardReplyScalarWhereInput[]
  }

  export type BodyPartsOnGymEquipmentsCreateNestedManyWithoutBodyPartInput = {
    create?: XOR<BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput> | BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput[] | BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput[]
    connectOrCreate?: BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput | BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput[]
    createMany?: BodyPartsOnGymEquipmentsCreateManyBodyPartInputEnvelope
    connect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
  }

  export type BodyPartsOnGymEquipmentsUncheckedCreateNestedManyWithoutBodyPartInput = {
    create?: XOR<BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput> | BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput[] | BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput[]
    connectOrCreate?: BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput | BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput[]
    createMany?: BodyPartsOnGymEquipmentsCreateManyBodyPartInputEnvelope
    connect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
  }

  export type BodyPartsOnGymEquipmentsUpdateManyWithoutBodyPartNestedInput = {
    create?: XOR<BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput> | BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput[] | BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput[]
    connectOrCreate?: BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput | BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput[]
    upsert?: BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutBodyPartInput | BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutBodyPartInput[]
    createMany?: BodyPartsOnGymEquipmentsCreateManyBodyPartInputEnvelope
    set?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    disconnect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    delete?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    connect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    update?: BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutBodyPartInput | BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutBodyPartInput[]
    updateMany?: BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutBodyPartInput | BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutBodyPartInput[]
    deleteMany?: BodyPartsOnGymEquipmentsScalarWhereInput | BodyPartsOnGymEquipmentsScalarWhereInput[]
  }

  export type BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutBodyPartNestedInput = {
    create?: XOR<BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput> | BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput[] | BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput[]
    connectOrCreate?: BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput | BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput[]
    upsert?: BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutBodyPartInput | BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutBodyPartInput[]
    createMany?: BodyPartsOnGymEquipmentsCreateManyBodyPartInputEnvelope
    set?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    disconnect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    delete?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    connect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    update?: BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutBodyPartInput | BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutBodyPartInput[]
    updateMany?: BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutBodyPartInput | BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutBodyPartInput[]
    deleteMany?: BodyPartsOnGymEquipmentsScalarWhereInput | BodyPartsOnGymEquipmentsScalarWhereInput[]
  }

  export type BodyPartsOnGymEquipmentsCreateNestedManyWithoutGymEquipmentInput = {
    create?: XOR<BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput> | BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput[] | BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput[]
    createMany?: BodyPartsOnGymEquipmentsCreateManyGymEquipmentInputEnvelope
    connect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
  }

  export type GymEuquipmentsOnGymsCreateNestedManyWithoutGymEquipmentInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput> | GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput | GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyGymEquipmentInputEnvelope
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
  }

  export type GymEquipmentImageCreateNestedManyWithoutGymEquipmentInput = {
    create?: XOR<GymEquipmentImageCreateWithoutGymEquipmentInput, GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput> | GymEquipmentImageCreateWithoutGymEquipmentInput[] | GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput | GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput[]
    createMany?: GymEquipmentImageCreateManyGymEquipmentInputEnvelope
    connect?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
  }

  export type BodyPartsOnGymEquipmentsUncheckedCreateNestedManyWithoutGymEquipmentInput = {
    create?: XOR<BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput> | BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput[] | BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput[]
    createMany?: BodyPartsOnGymEquipmentsCreateManyGymEquipmentInputEnvelope
    connect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
  }

  export type GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymEquipmentInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput> | GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput | GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyGymEquipmentInputEnvelope
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
  }

  export type GymEquipmentImageUncheckedCreateNestedManyWithoutGymEquipmentInput = {
    create?: XOR<GymEquipmentImageCreateWithoutGymEquipmentInput, GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput> | GymEquipmentImageCreateWithoutGymEquipmentInput[] | GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput | GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput[]
    createMany?: GymEquipmentImageCreateManyGymEquipmentInputEnvelope
    connect?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
  }

  export type BodyPartsOnGymEquipmentsUpdateManyWithoutGymEquipmentNestedInput = {
    create?: XOR<BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput> | BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput[] | BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput[]
    upsert?: BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutGymEquipmentInput[]
    createMany?: BodyPartsOnGymEquipmentsCreateManyGymEquipmentInputEnvelope
    set?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    disconnect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    delete?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    connect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    update?: BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutGymEquipmentInput[]
    updateMany?: BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutGymEquipmentInput[]
    deleteMany?: BodyPartsOnGymEquipmentsScalarWhereInput | BodyPartsOnGymEquipmentsScalarWhereInput[]
  }

  export type GymEuquipmentsOnGymsUpdateManyWithoutGymEquipmentNestedInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput> | GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput | GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput[]
    upsert?: GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymEquipmentInput | GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymEquipmentInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyGymEquipmentInputEnvelope
    set?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    disconnect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    delete?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    update?: GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymEquipmentInput | GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymEquipmentInput[]
    updateMany?: GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymEquipmentInput | GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymEquipmentInput[]
    deleteMany?: GymEuquipmentsOnGymsScalarWhereInput | GymEuquipmentsOnGymsScalarWhereInput[]
  }

  export type GymEquipmentImageUpdateManyWithoutGymEquipmentNestedInput = {
    create?: XOR<GymEquipmentImageCreateWithoutGymEquipmentInput, GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput> | GymEquipmentImageCreateWithoutGymEquipmentInput[] | GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput | GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput[]
    upsert?: GymEquipmentImageUpsertWithWhereUniqueWithoutGymEquipmentInput | GymEquipmentImageUpsertWithWhereUniqueWithoutGymEquipmentInput[]
    createMany?: GymEquipmentImageCreateManyGymEquipmentInputEnvelope
    set?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
    disconnect?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
    delete?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
    connect?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
    update?: GymEquipmentImageUpdateWithWhereUniqueWithoutGymEquipmentInput | GymEquipmentImageUpdateWithWhereUniqueWithoutGymEquipmentInput[]
    updateMany?: GymEquipmentImageUpdateManyWithWhereWithoutGymEquipmentInput | GymEquipmentImageUpdateManyWithWhereWithoutGymEquipmentInput[]
    deleteMany?: GymEquipmentImageScalarWhereInput | GymEquipmentImageScalarWhereInput[]
  }

  export type BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutGymEquipmentNestedInput = {
    create?: XOR<BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput> | BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput[] | BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput[]
    upsert?: BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutGymEquipmentInput[]
    createMany?: BodyPartsOnGymEquipmentsCreateManyGymEquipmentInputEnvelope
    set?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    disconnect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    delete?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    connect?: BodyPartsOnGymEquipmentsWhereUniqueInput | BodyPartsOnGymEquipmentsWhereUniqueInput[]
    update?: BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutGymEquipmentInput[]
    updateMany?: BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutGymEquipmentInput | BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutGymEquipmentInput[]
    deleteMany?: BodyPartsOnGymEquipmentsScalarWhereInput | BodyPartsOnGymEquipmentsScalarWhereInput[]
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymEquipmentNestedInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput> | GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput | GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput[]
    upsert?: GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymEquipmentInput | GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymEquipmentInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyGymEquipmentInputEnvelope
    set?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    disconnect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    delete?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    update?: GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymEquipmentInput | GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymEquipmentInput[]
    updateMany?: GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymEquipmentInput | GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymEquipmentInput[]
    deleteMany?: GymEuquipmentsOnGymsScalarWhereInput | GymEuquipmentsOnGymsScalarWhereInput[]
  }

  export type GymEquipmentImageUncheckedUpdateManyWithoutGymEquipmentNestedInput = {
    create?: XOR<GymEquipmentImageCreateWithoutGymEquipmentInput, GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput> | GymEquipmentImageCreateWithoutGymEquipmentInput[] | GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput[]
    connectOrCreate?: GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput | GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput[]
    upsert?: GymEquipmentImageUpsertWithWhereUniqueWithoutGymEquipmentInput | GymEquipmentImageUpsertWithWhereUniqueWithoutGymEquipmentInput[]
    createMany?: GymEquipmentImageCreateManyGymEquipmentInputEnvelope
    set?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
    disconnect?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
    delete?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
    connect?: GymEquipmentImageWhereUniqueInput | GymEquipmentImageWhereUniqueInput[]
    update?: GymEquipmentImageUpdateWithWhereUniqueWithoutGymEquipmentInput | GymEquipmentImageUpdateWithWhereUniqueWithoutGymEquipmentInput[]
    updateMany?: GymEquipmentImageUpdateManyWithWhereWithoutGymEquipmentInput | GymEquipmentImageUpdateManyWithWhereWithoutGymEquipmentInput[]
    deleteMany?: GymEquipmentImageScalarWhereInput | GymEquipmentImageScalarWhereInput[]
  }

  export type GymEquipmentCreateNestedOneWithoutGymEquipmentImageInput = {
    create?: XOR<GymEquipmentCreateWithoutGymEquipmentImageInput, GymEquipmentUncheckedCreateWithoutGymEquipmentImageInput>
    connectOrCreate?: GymEquipmentCreateOrConnectWithoutGymEquipmentImageInput
    connect?: GymEquipmentWhereUniqueInput
  }

  export type GymEquipmentUpdateOneRequiredWithoutGymEquipmentImageNestedInput = {
    create?: XOR<GymEquipmentCreateWithoutGymEquipmentImageInput, GymEquipmentUncheckedCreateWithoutGymEquipmentImageInput>
    connectOrCreate?: GymEquipmentCreateOrConnectWithoutGymEquipmentImageInput
    upsert?: GymEquipmentUpsertWithoutGymEquipmentImageInput
    connect?: GymEquipmentWhereUniqueInput
    update?: XOR<XOR<GymEquipmentUpdateToOneWithWhereWithoutGymEquipmentImageInput, GymEquipmentUpdateWithoutGymEquipmentImageInput>, GymEquipmentUncheckedUpdateWithoutGymEquipmentImageInput>
  }

  export type GymEquipmentCreateNestedOneWithoutBodyPartsInput = {
    create?: XOR<GymEquipmentCreateWithoutBodyPartsInput, GymEquipmentUncheckedCreateWithoutBodyPartsInput>
    connectOrCreate?: GymEquipmentCreateOrConnectWithoutBodyPartsInput
    connect?: GymEquipmentWhereUniqueInput
  }

  export type BodyPartCreateNestedOneWithoutGymEquipmentsInput = {
    create?: XOR<BodyPartCreateWithoutGymEquipmentsInput, BodyPartUncheckedCreateWithoutGymEquipmentsInput>
    connectOrCreate?: BodyPartCreateOrConnectWithoutGymEquipmentsInput
    connect?: BodyPartWhereUniqueInput
  }

  export type GymEquipmentUpdateOneRequiredWithoutBodyPartsNestedInput = {
    create?: XOR<GymEquipmentCreateWithoutBodyPartsInput, GymEquipmentUncheckedCreateWithoutBodyPartsInput>
    connectOrCreate?: GymEquipmentCreateOrConnectWithoutBodyPartsInput
    upsert?: GymEquipmentUpsertWithoutBodyPartsInput
    connect?: GymEquipmentWhereUniqueInput
    update?: XOR<XOR<GymEquipmentUpdateToOneWithWhereWithoutBodyPartsInput, GymEquipmentUpdateWithoutBodyPartsInput>, GymEquipmentUncheckedUpdateWithoutBodyPartsInput>
  }

  export type BodyPartUpdateOneRequiredWithoutGymEquipmentsNestedInput = {
    create?: XOR<BodyPartCreateWithoutGymEquipmentsInput, BodyPartUncheckedCreateWithoutGymEquipmentsInput>
    connectOrCreate?: BodyPartCreateOrConnectWithoutGymEquipmentsInput
    upsert?: BodyPartUpsertWithoutGymEquipmentsInput
    connect?: BodyPartWhereUniqueInput
    update?: XOR<XOR<BodyPartUpdateToOneWithWhereWithoutGymEquipmentsInput, BodyPartUpdateWithoutGymEquipmentsInput>, BodyPartUncheckedUpdateWithoutGymEquipmentsInput>
  }

  export type UserCreateNestedOneWithoutGymInput = {
    create?: XOR<UserCreateWithoutGymInput, UserUncheckedCreateWithoutGymInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymInput
    connect?: UserWhereUniqueInput
  }

  export type GymEuquipmentsOnGymsCreateNestedManyWithoutGymInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput> | GymEuquipmentsOnGymsCreateWithoutGymInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput | GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyGymInputEnvelope
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
  }

  export type FavoriteGymCreateNestedManyWithoutGymInput = {
    create?: XOR<FavoriteGymCreateWithoutGymInput, FavoriteGymUncheckedCreateWithoutGymInput> | FavoriteGymCreateWithoutGymInput[] | FavoriteGymUncheckedCreateWithoutGymInput[]
    connectOrCreate?: FavoriteGymCreateOrConnectWithoutGymInput | FavoriteGymCreateOrConnectWithoutGymInput[]
    createMany?: FavoriteGymCreateManyGymInputEnvelope
    connect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
  }

  export type GymAccessHistoryCreateNestedManyWithoutGymInput = {
    create?: XOR<GymAccessHistoryCreateWithoutGymInput, GymAccessHistoryUncheckedCreateWithoutGymInput> | GymAccessHistoryCreateWithoutGymInput[] | GymAccessHistoryUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymAccessHistoryCreateOrConnectWithoutGymInput | GymAccessHistoryCreateOrConnectWithoutGymInput[]
    createMany?: GymAccessHistoryCreateManyGymInputEnvelope
    connect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
  }

  export type GymMembershipCreateNestedManyWithoutGymInput = {
    create?: XOR<GymMembershipCreateWithoutGymInput, GymMembershipUncheckedCreateWithoutGymInput> | GymMembershipCreateWithoutGymInput[] | GymMembershipUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutGymInput | GymMembershipCreateOrConnectWithoutGymInput[]
    createMany?: GymMembershipCreateManyGymInputEnvelope
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
  }

  export type GymPassHistoryCreateNestedManyWithoutGymInput = {
    create?: XOR<GymPassHistoryCreateWithoutGymInput, GymPassHistoryUncheckedCreateWithoutGymInput> | GymPassHistoryCreateWithoutGymInput[] | GymPassHistoryUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymPassHistoryCreateOrConnectWithoutGymInput | GymPassHistoryCreateOrConnectWithoutGymInput[]
    createMany?: GymPassHistoryCreateManyGymInputEnvelope
    connect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
  }

  export type GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput> | GymEuquipmentsOnGymsCreateWithoutGymInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput | GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyGymInputEnvelope
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
  }

  export type FavoriteGymUncheckedCreateNestedManyWithoutGymInput = {
    create?: XOR<FavoriteGymCreateWithoutGymInput, FavoriteGymUncheckedCreateWithoutGymInput> | FavoriteGymCreateWithoutGymInput[] | FavoriteGymUncheckedCreateWithoutGymInput[]
    connectOrCreate?: FavoriteGymCreateOrConnectWithoutGymInput | FavoriteGymCreateOrConnectWithoutGymInput[]
    createMany?: FavoriteGymCreateManyGymInputEnvelope
    connect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
  }

  export type GymAccessHistoryUncheckedCreateNestedManyWithoutGymInput = {
    create?: XOR<GymAccessHistoryCreateWithoutGymInput, GymAccessHistoryUncheckedCreateWithoutGymInput> | GymAccessHistoryCreateWithoutGymInput[] | GymAccessHistoryUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymAccessHistoryCreateOrConnectWithoutGymInput | GymAccessHistoryCreateOrConnectWithoutGymInput[]
    createMany?: GymAccessHistoryCreateManyGymInputEnvelope
    connect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
  }

  export type GymMembershipUncheckedCreateNestedManyWithoutGymInput = {
    create?: XOR<GymMembershipCreateWithoutGymInput, GymMembershipUncheckedCreateWithoutGymInput> | GymMembershipCreateWithoutGymInput[] | GymMembershipUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutGymInput | GymMembershipCreateOrConnectWithoutGymInput[]
    createMany?: GymMembershipCreateManyGymInputEnvelope
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
  }

  export type GymPassHistoryUncheckedCreateNestedManyWithoutGymInput = {
    create?: XOR<GymPassHistoryCreateWithoutGymInput, GymPassHistoryUncheckedCreateWithoutGymInput> | GymPassHistoryCreateWithoutGymInput[] | GymPassHistoryUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymPassHistoryCreateOrConnectWithoutGymInput | GymPassHistoryCreateOrConnectWithoutGymInput[]
    createMany?: GymPassHistoryCreateManyGymInputEnvelope
    connect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutGymNestedInput = {
    create?: XOR<UserCreateWithoutGymInput, UserUncheckedCreateWithoutGymInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymInput
    upsert?: UserUpsertWithoutGymInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGymInput, UserUpdateWithoutGymInput>, UserUncheckedUpdateWithoutGymInput>
  }

  export type GymEuquipmentsOnGymsUpdateManyWithoutGymNestedInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput> | GymEuquipmentsOnGymsCreateWithoutGymInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput | GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput[]
    upsert?: GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymInput | GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyGymInputEnvelope
    set?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    disconnect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    delete?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    update?: GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymInput | GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymInput | GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: GymEuquipmentsOnGymsScalarWhereInput | GymEuquipmentsOnGymsScalarWhereInput[]
  }

  export type FavoriteGymUpdateManyWithoutGymNestedInput = {
    create?: XOR<FavoriteGymCreateWithoutGymInput, FavoriteGymUncheckedCreateWithoutGymInput> | FavoriteGymCreateWithoutGymInput[] | FavoriteGymUncheckedCreateWithoutGymInput[]
    connectOrCreate?: FavoriteGymCreateOrConnectWithoutGymInput | FavoriteGymCreateOrConnectWithoutGymInput[]
    upsert?: FavoriteGymUpsertWithWhereUniqueWithoutGymInput | FavoriteGymUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: FavoriteGymCreateManyGymInputEnvelope
    set?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    disconnect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    delete?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    connect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    update?: FavoriteGymUpdateWithWhereUniqueWithoutGymInput | FavoriteGymUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: FavoriteGymUpdateManyWithWhereWithoutGymInput | FavoriteGymUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: FavoriteGymScalarWhereInput | FavoriteGymScalarWhereInput[]
  }

  export type GymAccessHistoryUpdateManyWithoutGymNestedInput = {
    create?: XOR<GymAccessHistoryCreateWithoutGymInput, GymAccessHistoryUncheckedCreateWithoutGymInput> | GymAccessHistoryCreateWithoutGymInput[] | GymAccessHistoryUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymAccessHistoryCreateOrConnectWithoutGymInput | GymAccessHistoryCreateOrConnectWithoutGymInput[]
    upsert?: GymAccessHistoryUpsertWithWhereUniqueWithoutGymInput | GymAccessHistoryUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: GymAccessHistoryCreateManyGymInputEnvelope
    set?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    disconnect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    delete?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    connect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    update?: GymAccessHistoryUpdateWithWhereUniqueWithoutGymInput | GymAccessHistoryUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: GymAccessHistoryUpdateManyWithWhereWithoutGymInput | GymAccessHistoryUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: GymAccessHistoryScalarWhereInput | GymAccessHistoryScalarWhereInput[]
  }

  export type GymMembershipUpdateManyWithoutGymNestedInput = {
    create?: XOR<GymMembershipCreateWithoutGymInput, GymMembershipUncheckedCreateWithoutGymInput> | GymMembershipCreateWithoutGymInput[] | GymMembershipUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutGymInput | GymMembershipCreateOrConnectWithoutGymInput[]
    upsert?: GymMembershipUpsertWithWhereUniqueWithoutGymInput | GymMembershipUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: GymMembershipCreateManyGymInputEnvelope
    set?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    disconnect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    delete?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    update?: GymMembershipUpdateWithWhereUniqueWithoutGymInput | GymMembershipUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: GymMembershipUpdateManyWithWhereWithoutGymInput | GymMembershipUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
  }

  export type GymPassHistoryUpdateManyWithoutGymNestedInput = {
    create?: XOR<GymPassHistoryCreateWithoutGymInput, GymPassHistoryUncheckedCreateWithoutGymInput> | GymPassHistoryCreateWithoutGymInput[] | GymPassHistoryUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymPassHistoryCreateOrConnectWithoutGymInput | GymPassHistoryCreateOrConnectWithoutGymInput[]
    upsert?: GymPassHistoryUpsertWithWhereUniqueWithoutGymInput | GymPassHistoryUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: GymPassHistoryCreateManyGymInputEnvelope
    set?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    disconnect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    delete?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    connect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    update?: GymPassHistoryUpdateWithWhereUniqueWithoutGymInput | GymPassHistoryUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: GymPassHistoryUpdateManyWithWhereWithoutGymInput | GymPassHistoryUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: GymPassHistoryScalarWhereInput | GymPassHistoryScalarWhereInput[]
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymNestedInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput> | GymEuquipmentsOnGymsCreateWithoutGymInput[] | GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput | GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput[]
    upsert?: GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymInput | GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: GymEuquipmentsOnGymsCreateManyGymInputEnvelope
    set?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    disconnect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    delete?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    connect?: GymEuquipmentsOnGymsWhereUniqueInput | GymEuquipmentsOnGymsWhereUniqueInput[]
    update?: GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymInput | GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymInput | GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: GymEuquipmentsOnGymsScalarWhereInput | GymEuquipmentsOnGymsScalarWhereInput[]
  }

  export type FavoriteGymUncheckedUpdateManyWithoutGymNestedInput = {
    create?: XOR<FavoriteGymCreateWithoutGymInput, FavoriteGymUncheckedCreateWithoutGymInput> | FavoriteGymCreateWithoutGymInput[] | FavoriteGymUncheckedCreateWithoutGymInput[]
    connectOrCreate?: FavoriteGymCreateOrConnectWithoutGymInput | FavoriteGymCreateOrConnectWithoutGymInput[]
    upsert?: FavoriteGymUpsertWithWhereUniqueWithoutGymInput | FavoriteGymUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: FavoriteGymCreateManyGymInputEnvelope
    set?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    disconnect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    delete?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    connect?: FavoriteGymWhereUniqueInput | FavoriteGymWhereUniqueInput[]
    update?: FavoriteGymUpdateWithWhereUniqueWithoutGymInput | FavoriteGymUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: FavoriteGymUpdateManyWithWhereWithoutGymInput | FavoriteGymUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: FavoriteGymScalarWhereInput | FavoriteGymScalarWhereInput[]
  }

  export type GymAccessHistoryUncheckedUpdateManyWithoutGymNestedInput = {
    create?: XOR<GymAccessHistoryCreateWithoutGymInput, GymAccessHistoryUncheckedCreateWithoutGymInput> | GymAccessHistoryCreateWithoutGymInput[] | GymAccessHistoryUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymAccessHistoryCreateOrConnectWithoutGymInput | GymAccessHistoryCreateOrConnectWithoutGymInput[]
    upsert?: GymAccessHistoryUpsertWithWhereUniqueWithoutGymInput | GymAccessHistoryUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: GymAccessHistoryCreateManyGymInputEnvelope
    set?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    disconnect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    delete?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    connect?: GymAccessHistoryWhereUniqueInput | GymAccessHistoryWhereUniqueInput[]
    update?: GymAccessHistoryUpdateWithWhereUniqueWithoutGymInput | GymAccessHistoryUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: GymAccessHistoryUpdateManyWithWhereWithoutGymInput | GymAccessHistoryUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: GymAccessHistoryScalarWhereInput | GymAccessHistoryScalarWhereInput[]
  }

  export type GymMembershipUncheckedUpdateManyWithoutGymNestedInput = {
    create?: XOR<GymMembershipCreateWithoutGymInput, GymMembershipUncheckedCreateWithoutGymInput> | GymMembershipCreateWithoutGymInput[] | GymMembershipUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutGymInput | GymMembershipCreateOrConnectWithoutGymInput[]
    upsert?: GymMembershipUpsertWithWhereUniqueWithoutGymInput | GymMembershipUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: GymMembershipCreateManyGymInputEnvelope
    set?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    disconnect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    delete?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    update?: GymMembershipUpdateWithWhereUniqueWithoutGymInput | GymMembershipUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: GymMembershipUpdateManyWithWhereWithoutGymInput | GymMembershipUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
  }

  export type GymPassHistoryUncheckedUpdateManyWithoutGymNestedInput = {
    create?: XOR<GymPassHistoryCreateWithoutGymInput, GymPassHistoryUncheckedCreateWithoutGymInput> | GymPassHistoryCreateWithoutGymInput[] | GymPassHistoryUncheckedCreateWithoutGymInput[]
    connectOrCreate?: GymPassHistoryCreateOrConnectWithoutGymInput | GymPassHistoryCreateOrConnectWithoutGymInput[]
    upsert?: GymPassHistoryUpsertWithWhereUniqueWithoutGymInput | GymPassHistoryUpsertWithWhereUniqueWithoutGymInput[]
    createMany?: GymPassHistoryCreateManyGymInputEnvelope
    set?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    disconnect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    delete?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    connect?: GymPassHistoryWhereUniqueInput | GymPassHistoryWhereUniqueInput[]
    update?: GymPassHistoryUpdateWithWhereUniqueWithoutGymInput | GymPassHistoryUpdateWithWhereUniqueWithoutGymInput[]
    updateMany?: GymPassHistoryUpdateManyWithWhereWithoutGymInput | GymPassHistoryUpdateManyWithWhereWithoutGymInput[]
    deleteMany?: GymPassHistoryScalarWhereInput | GymPassHistoryScalarWhereInput[]
  }

  export type GymCreateNestedOneWithoutGymEquipmentsInput = {
    create?: XOR<GymCreateWithoutGymEquipmentsInput, GymUncheckedCreateWithoutGymEquipmentsInput>
    connectOrCreate?: GymCreateOrConnectWithoutGymEquipmentsInput
    connect?: GymWhereUniqueInput
  }

  export type GymEquipmentCreateNestedOneWithoutGymsInput = {
    create?: XOR<GymEquipmentCreateWithoutGymsInput, GymEquipmentUncheckedCreateWithoutGymsInput>
    connectOrCreate?: GymEquipmentCreateOrConnectWithoutGymsInput
    connect?: GymEquipmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedGymEquipmentsInput = {
    create?: XOR<UserCreateWithoutAssignedGymEquipmentsInput, UserUncheckedCreateWithoutAssignedGymEquipmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedGymEquipmentsInput
    connect?: UserWhereUniqueInput
  }

  export type GymEquipmentUserHistoryCreateNestedManyWithoutGymEuquipmentsOnGymsInput = {
    create?: XOR<GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput, GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput> | GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput[] | GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput[]
    connectOrCreate?: GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput[]
    createMany?: GymEquipmentUserHistoryCreateManyGymEuquipmentsOnGymsInputEnvelope
    connect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
  }

  export type GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutGymEuquipmentsOnGymsInput = {
    create?: XOR<GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput, GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput> | GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput[] | GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput[]
    connectOrCreate?: GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput[]
    createMany?: GymEquipmentUserHistoryCreateManyGymEuquipmentsOnGymsInputEnvelope
    connect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
  }

  export type GymUpdateOneRequiredWithoutGymEquipmentsNestedInput = {
    create?: XOR<GymCreateWithoutGymEquipmentsInput, GymUncheckedCreateWithoutGymEquipmentsInput>
    connectOrCreate?: GymCreateOrConnectWithoutGymEquipmentsInput
    upsert?: GymUpsertWithoutGymEquipmentsInput
    connect?: GymWhereUniqueInput
    update?: XOR<XOR<GymUpdateToOneWithWhereWithoutGymEquipmentsInput, GymUpdateWithoutGymEquipmentsInput>, GymUncheckedUpdateWithoutGymEquipmentsInput>
  }

  export type GymEquipmentUpdateOneRequiredWithoutGymsNestedInput = {
    create?: XOR<GymEquipmentCreateWithoutGymsInput, GymEquipmentUncheckedCreateWithoutGymsInput>
    connectOrCreate?: GymEquipmentCreateOrConnectWithoutGymsInput
    upsert?: GymEquipmentUpsertWithoutGymsInput
    connect?: GymEquipmentWhereUniqueInput
    update?: XOR<XOR<GymEquipmentUpdateToOneWithWhereWithoutGymsInput, GymEquipmentUpdateWithoutGymsInput>, GymEquipmentUncheckedUpdateWithoutGymsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedGymEquipmentsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedGymEquipmentsInput, UserUncheckedCreateWithoutAssignedGymEquipmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedGymEquipmentsInput
    upsert?: UserUpsertWithoutAssignedGymEquipmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedGymEquipmentsInput, UserUpdateWithoutAssignedGymEquipmentsInput>, UserUncheckedUpdateWithoutAssignedGymEquipmentsInput>
  }

  export type GymEquipmentUserHistoryUpdateManyWithoutGymEuquipmentsOnGymsNestedInput = {
    create?: XOR<GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput, GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput> | GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput[] | GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput[]
    connectOrCreate?: GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput[]
    upsert?: GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutGymEuquipmentsOnGymsInput[]
    createMany?: GymEquipmentUserHistoryCreateManyGymEuquipmentsOnGymsInputEnvelope
    set?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    disconnect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    delete?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    connect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    update?: GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutGymEuquipmentsOnGymsInput[]
    updateMany?: GymEquipmentUserHistoryUpdateManyWithWhereWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryUpdateManyWithWhereWithoutGymEuquipmentsOnGymsInput[]
    deleteMany?: GymEquipmentUserHistoryScalarWhereInput | GymEquipmentUserHistoryScalarWhereInput[]
  }

  export type GymEquipmentUserHistoryUncheckedUpdateManyWithoutGymEuquipmentsOnGymsNestedInput = {
    create?: XOR<GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput, GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput> | GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput[] | GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput[]
    connectOrCreate?: GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput[]
    upsert?: GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutGymEuquipmentsOnGymsInput[]
    createMany?: GymEquipmentUserHistoryCreateManyGymEuquipmentsOnGymsInputEnvelope
    set?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    disconnect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    delete?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    connect?: GymEquipmentUserHistoryWhereUniqueInput | GymEquipmentUserHistoryWhereUniqueInput[]
    update?: GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutGymEuquipmentsOnGymsInput[]
    updateMany?: GymEquipmentUserHistoryUpdateManyWithWhereWithoutGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryUpdateManyWithWhereWithoutGymEuquipmentsOnGymsInput[]
    deleteMany?: GymEquipmentUserHistoryScalarWhereInput | GymEquipmentUserHistoryScalarWhereInput[]
  }

  export type GymEuquipmentsOnGymsCreateNestedOneWithoutGymEquipmentUserHistoryInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentUserHistoryInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentUserHistoryInput>
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentUserHistoryInput
    connect?: GymEuquipmentsOnGymsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGymEquipmentUserHistoryInput = {
    create?: XOR<UserCreateWithoutGymEquipmentUserHistoryInput, UserUncheckedCreateWithoutGymEquipmentUserHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymEquipmentUserHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type GymEuquipmentsOnGymsUpdateOneRequiredWithoutGymEquipmentUserHistoryNestedInput = {
    create?: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentUserHistoryInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentUserHistoryInput>
    connectOrCreate?: GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentUserHistoryInput
    upsert?: GymEuquipmentsOnGymsUpsertWithoutGymEquipmentUserHistoryInput
    connect?: GymEuquipmentsOnGymsWhereUniqueInput
    update?: XOR<XOR<GymEuquipmentsOnGymsUpdateToOneWithWhereWithoutGymEquipmentUserHistoryInput, GymEuquipmentsOnGymsUpdateWithoutGymEquipmentUserHistoryInput>, GymEuquipmentsOnGymsUncheckedUpdateWithoutGymEquipmentUserHistoryInput>
  }

  export type UserUpdateOneRequiredWithoutGymEquipmentUserHistoryNestedInput = {
    create?: XOR<UserCreateWithoutGymEquipmentUserHistoryInput, UserUncheckedCreateWithoutGymEquipmentUserHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymEquipmentUserHistoryInput
    upsert?: UserUpsertWithoutGymEquipmentUserHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGymEquipmentUserHistoryInput, UserUpdateWithoutGymEquipmentUserHistoryInput>, UserUncheckedUpdateWithoutGymEquipmentUserHistoryInput>
  }

  export type UserCreateNestedOneWithoutGymMembershipInput = {
    create?: XOR<UserCreateWithoutGymMembershipInput, UserUncheckedCreateWithoutGymMembershipInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymMembershipInput
    connect?: UserWhereUniqueInput
  }

  export type GymCreateNestedOneWithoutGymMembershipInput = {
    create?: XOR<GymCreateWithoutGymMembershipInput, GymUncheckedCreateWithoutGymMembershipInput>
    connectOrCreate?: GymCreateOrConnectWithoutGymMembershipInput
    connect?: GymWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedGymMembershipsInput = {
    create?: XOR<UserCreateWithoutAssignedGymMembershipsInput, UserUncheckedCreateWithoutAssignedGymMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedGymMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type GymMembershipCancellationCreateNestedOneWithoutGymMembershipInput = {
    create?: XOR<GymMembershipCancellationCreateWithoutGymMembershipInput, GymMembershipCancellationUncheckedCreateWithoutGymMembershipInput>
    connectOrCreate?: GymMembershipCancellationCreateOrConnectWithoutGymMembershipInput
    connect?: GymMembershipCancellationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGymMembershipNestedInput = {
    create?: XOR<UserCreateWithoutGymMembershipInput, UserUncheckedCreateWithoutGymMembershipInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymMembershipInput
    upsert?: UserUpsertWithoutGymMembershipInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGymMembershipInput, UserUpdateWithoutGymMembershipInput>, UserUncheckedUpdateWithoutGymMembershipInput>
  }

  export type GymUpdateOneRequiredWithoutGymMembershipNestedInput = {
    create?: XOR<GymCreateWithoutGymMembershipInput, GymUncheckedCreateWithoutGymMembershipInput>
    connectOrCreate?: GymCreateOrConnectWithoutGymMembershipInput
    upsert?: GymUpsertWithoutGymMembershipInput
    connect?: GymWhereUniqueInput
    update?: XOR<XOR<GymUpdateToOneWithWhereWithoutGymMembershipInput, GymUpdateWithoutGymMembershipInput>, GymUncheckedUpdateWithoutGymMembershipInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedGymMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedGymMembershipsInput, UserUncheckedCreateWithoutAssignedGymMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedGymMembershipsInput
    upsert?: UserUpsertWithoutAssignedGymMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedGymMembershipsInput, UserUpdateWithoutAssignedGymMembershipsInput>, UserUncheckedUpdateWithoutAssignedGymMembershipsInput>
  }

  export type GymMembershipCancellationUpdateOneWithoutGymMembershipNestedInput = {
    create?: XOR<GymMembershipCancellationCreateWithoutGymMembershipInput, GymMembershipCancellationUncheckedCreateWithoutGymMembershipInput>
    connectOrCreate?: GymMembershipCancellationCreateOrConnectWithoutGymMembershipInput
    upsert?: GymMembershipCancellationUpsertWithoutGymMembershipInput
    disconnect?: GymMembershipCancellationWhereInput | boolean
    delete?: GymMembershipCancellationWhereInput | boolean
    connect?: GymMembershipCancellationWhereUniqueInput
    update?: XOR<XOR<GymMembershipCancellationUpdateToOneWithWhereWithoutGymMembershipInput, GymMembershipCancellationUpdateWithoutGymMembershipInput>, GymMembershipCancellationUncheckedUpdateWithoutGymMembershipInput>
  }

  export type GymMembershipCreateNestedManyWithoutGymMembershipCancellationInput = {
    create?: XOR<GymMembershipCreateWithoutGymMembershipCancellationInput, GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput> | GymMembershipCreateWithoutGymMembershipCancellationInput[] | GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput | GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput[]
    createMany?: GymMembershipCreateManyGymMembershipCancellationInputEnvelope
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
  }

  export type GymMembershipUncheckedCreateNestedManyWithoutGymMembershipCancellationInput = {
    create?: XOR<GymMembershipCreateWithoutGymMembershipCancellationInput, GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput> | GymMembershipCreateWithoutGymMembershipCancellationInput[] | GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput | GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput[]
    createMany?: GymMembershipCreateManyGymMembershipCancellationInputEnvelope
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
  }

  export type GymMembershipUpdateManyWithoutGymMembershipCancellationNestedInput = {
    create?: XOR<GymMembershipCreateWithoutGymMembershipCancellationInput, GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput> | GymMembershipCreateWithoutGymMembershipCancellationInput[] | GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput | GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput[]
    upsert?: GymMembershipUpsertWithWhereUniqueWithoutGymMembershipCancellationInput | GymMembershipUpsertWithWhereUniqueWithoutGymMembershipCancellationInput[]
    createMany?: GymMembershipCreateManyGymMembershipCancellationInputEnvelope
    set?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    disconnect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    delete?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    update?: GymMembershipUpdateWithWhereUniqueWithoutGymMembershipCancellationInput | GymMembershipUpdateWithWhereUniqueWithoutGymMembershipCancellationInput[]
    updateMany?: GymMembershipUpdateManyWithWhereWithoutGymMembershipCancellationInput | GymMembershipUpdateManyWithWhereWithoutGymMembershipCancellationInput[]
    deleteMany?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
  }

  export type GymMembershipUncheckedUpdateManyWithoutGymMembershipCancellationNestedInput = {
    create?: XOR<GymMembershipCreateWithoutGymMembershipCancellationInput, GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput> | GymMembershipCreateWithoutGymMembershipCancellationInput[] | GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput[]
    connectOrCreate?: GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput | GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput[]
    upsert?: GymMembershipUpsertWithWhereUniqueWithoutGymMembershipCancellationInput | GymMembershipUpsertWithWhereUniqueWithoutGymMembershipCancellationInput[]
    createMany?: GymMembershipCreateManyGymMembershipCancellationInputEnvelope
    set?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    disconnect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    delete?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    connect?: GymMembershipWhereUniqueInput | GymMembershipWhereUniqueInput[]
    update?: GymMembershipUpdateWithWhereUniqueWithoutGymMembershipCancellationInput | GymMembershipUpdateWithWhereUniqueWithoutGymMembershipCancellationInput[]
    updateMany?: GymMembershipUpdateManyWithWhereWithoutGymMembershipCancellationInput | GymMembershipUpdateManyWithWhereWithoutGymMembershipCancellationInput[]
    deleteMany?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
  }

  export type GymCreateNestedOneWithoutFavoriteUsersInput = {
    create?: XOR<GymCreateWithoutFavoriteUsersInput, GymUncheckedCreateWithoutFavoriteUsersInput>
    connectOrCreate?: GymCreateOrConnectWithoutFavoriteUsersInput
    connect?: GymWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFavoriteGymsInput = {
    create?: XOR<UserCreateWithoutFavoriteGymsInput, UserUncheckedCreateWithoutFavoriteGymsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteGymsInput
    connect?: UserWhereUniqueInput
  }

  export type GymUpdateOneRequiredWithoutFavoriteUsersNestedInput = {
    create?: XOR<GymCreateWithoutFavoriteUsersInput, GymUncheckedCreateWithoutFavoriteUsersInput>
    connectOrCreate?: GymCreateOrConnectWithoutFavoriteUsersInput
    upsert?: GymUpsertWithoutFavoriteUsersInput
    connect?: GymWhereUniqueInput
    update?: XOR<XOR<GymUpdateToOneWithWhereWithoutFavoriteUsersInput, GymUpdateWithoutFavoriteUsersInput>, GymUncheckedUpdateWithoutFavoriteUsersInput>
  }

  export type UserUpdateOneRequiredWithoutFavoriteGymsNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteGymsInput, UserUncheckedCreateWithoutFavoriteGymsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteGymsInput
    upsert?: UserUpsertWithoutFavoriteGymsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteGymsInput, UserUpdateWithoutFavoriteGymsInput>, UserUncheckedUpdateWithoutFavoriteGymsInput>
  }

  export type GymCreateNestedOneWithoutGymAccessHistoryInput = {
    create?: XOR<GymCreateWithoutGymAccessHistoryInput, GymUncheckedCreateWithoutGymAccessHistoryInput>
    connectOrCreate?: GymCreateOrConnectWithoutGymAccessHistoryInput
    connect?: GymWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGymAccessHistoryInput = {
    create?: XOR<UserCreateWithoutGymAccessHistoryInput, UserUncheckedCreateWithoutGymAccessHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymAccessHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type GymUpdateOneRequiredWithoutGymAccessHistoryNestedInput = {
    create?: XOR<GymCreateWithoutGymAccessHistoryInput, GymUncheckedCreateWithoutGymAccessHistoryInput>
    connectOrCreate?: GymCreateOrConnectWithoutGymAccessHistoryInput
    upsert?: GymUpsertWithoutGymAccessHistoryInput
    connect?: GymWhereUniqueInput
    update?: XOR<XOR<GymUpdateToOneWithWhereWithoutGymAccessHistoryInput, GymUpdateWithoutGymAccessHistoryInput>, GymUncheckedUpdateWithoutGymAccessHistoryInput>
  }

  export type UserUpdateOneRequiredWithoutGymAccessHistoryNestedInput = {
    create?: XOR<UserCreateWithoutGymAccessHistoryInput, UserUncheckedCreateWithoutGymAccessHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymAccessHistoryInput
    upsert?: UserUpsertWithoutGymAccessHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGymAccessHistoryInput, UserUpdateWithoutGymAccessHistoryInput>, UserUncheckedUpdateWithoutGymAccessHistoryInput>
  }

  export type GymCreateNestedOneWithoutGymPassHistoryInput = {
    create?: XOR<GymCreateWithoutGymPassHistoryInput, GymUncheckedCreateWithoutGymPassHistoryInput>
    connectOrCreate?: GymCreateOrConnectWithoutGymPassHistoryInput
    connect?: GymWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGymPassHistoryInput = {
    create?: XOR<UserCreateWithoutGymPassHistoryInput, UserUncheckedCreateWithoutGymPassHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymPassHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type GymUpdateOneRequiredWithoutGymPassHistoryNestedInput = {
    create?: XOR<GymCreateWithoutGymPassHistoryInput, GymUncheckedCreateWithoutGymPassHistoryInput>
    connectOrCreate?: GymCreateOrConnectWithoutGymPassHistoryInput
    upsert?: GymUpsertWithoutGymPassHistoryInput
    connect?: GymWhereUniqueInput
    update?: XOR<XOR<GymUpdateToOneWithWhereWithoutGymPassHistoryInput, GymUpdateWithoutGymPassHistoryInput>, GymUncheckedUpdateWithoutGymPassHistoryInput>
  }

  export type UserUpdateOneRequiredWithoutGymPassHistoryNestedInput = {
    create?: XOR<UserCreateWithoutGymPassHistoryInput, UserUncheckedCreateWithoutGymPassHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutGymPassHistoryInput
    upsert?: UserUpsertWithoutGymPassHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGymPassHistoryInput, UserUpdateWithoutGymPassHistoryInput>, UserUncheckedUpdateWithoutGymPassHistoryInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumLoginTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LoginType | EnumLoginTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LoginType[]
    notIn?: $Enums.LoginType[]
    not?: NestedEnumLoginTypeFilter<$PrismaModel> | $Enums.LoginType
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumLoginTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LoginType | EnumLoginTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LoginType[]
    notIn?: $Enums.LoginType[]
    not?: NestedEnumLoginTypeWithAggregatesFilter<$PrismaModel> | $Enums.LoginType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLoginTypeFilter<$PrismaModel>
    _max?: NestedEnumLoginTypeFilter<$PrismaModel>
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumBoardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardType | EnumBoardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BoardType[]
    notIn?: $Enums.BoardType[]
    not?: NestedEnumBoardTypeFilter<$PrismaModel> | $Enums.BoardType
  }

  export type NestedEnumBoardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardType | EnumBoardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BoardType[]
    notIn?: $Enums.BoardType[]
    not?: NestedEnumBoardTypeWithAggregatesFilter<$PrismaModel> | $Enums.BoardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardTypeFilter<$PrismaModel>
    _max?: NestedEnumBoardTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoardCreateWithoutUserInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    BoardImage?: BoardImageCreateNestedManyWithoutBoardInput
    BoardReply?: BoardReplyCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    BoardImage?: BoardImageUncheckedCreateNestedManyWithoutBoardInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutUserInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutUserInput, BoardUncheckedCreateWithoutUserInput>
  }

  export type BoardCreateManyUserInputEnvelope = {
    data: BoardCreateManyUserInput | BoardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BoardReplyCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    Board: BoardCreateNestedOneWithoutBoardReplyInput
    BoardReply?: BoardReplyCreateNestedOneWithoutBoardNestedReplyInput
    BoardNestedReply?: BoardReplyCreateNestedManyWithoutBoardReplyInput
  }

  export type BoardReplyUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    boardId: number
    boardReplyId?: number | null
    boardType?: $Enums.BoardType
    BoardNestedReply?: BoardReplyUncheckedCreateNestedManyWithoutBoardReplyInput
  }

  export type BoardReplyCreateOrConnectWithoutUserInput = {
    where: BoardReplyWhereUniqueInput
    create: XOR<BoardReplyCreateWithoutUserInput, BoardReplyUncheckedCreateWithoutUserInput>
  }

  export type BoardReplyCreateManyUserInputEnvelope = {
    data: BoardReplyCreateManyUserInput | BoardReplyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NoticeCreateWithoutUserInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
  }

  export type NoticeUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
  }

  export type NoticeCreateOrConnectWithoutUserInput = {
    where: NoticeWhereUniqueInput
    create: XOR<NoticeCreateWithoutUserInput, NoticeUncheckedCreateWithoutUserInput>
  }

  export type NoticeCreateManyUserInputEnvelope = {
    data: NoticeCreateManyUserInput | NoticeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GymCreateWithoutUserInput = {
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    GymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    GymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymUncheckedCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutUserInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutUserInput, GymUncheckedCreateWithoutUserInput>
  }

  export type GymCreateManyUserInputEnvelope = {
    data: GymCreateManyUserInput | GymCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GymEuquipmentsOnGymsCreateWithoutAssignUserInput = {
    createdAt?: Date | string
    Gym: GymCreateNestedOneWithoutGymEquipmentsInput
    GymEquipment: GymEquipmentCreateNestedOneWithoutGymsInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutGymEuquipmentsOnGymsInput
  }

  export type GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    gymEquipmentId: number
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutGymEuquipmentsOnGymsInput
  }

  export type GymEuquipmentsOnGymsCreateOrConnectWithoutAssignUserInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    create: XOR<GymEuquipmentsOnGymsCreateWithoutAssignUserInput, GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput>
  }

  export type GymEuquipmentsOnGymsCreateManyAssignUserInputEnvelope = {
    data: GymEuquipmentsOnGymsCreateManyAssignUserInput | GymEuquipmentsOnGymsCreateManyAssignUserInput[]
    skipDuplicates?: boolean
  }

  export type GymMembershipCreateWithoutUserInput = {
    createdAt?: Date | string
    startDay?: Date | string
    endDay: Date | string
    Gym: GymCreateNestedOneWithoutGymMembershipInput
    assignUser: UserCreateNestedOneWithoutAssignedGymMembershipsInput
    GymMembershipCancellation?: GymMembershipCancellationCreateNestedOneWithoutGymMembershipInput
  }

  export type GymMembershipUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    assignBy: number
    startDay?: Date | string
    endDay: Date | string
    gymMembershipCancellationId?: number | null
  }

  export type GymMembershipCreateOrConnectWithoutUserInput = {
    where: GymMembershipWhereUniqueInput
    create: XOR<GymMembershipCreateWithoutUserInput, GymMembershipUncheckedCreateWithoutUserInput>
  }

  export type GymMembershipCreateManyUserInputEnvelope = {
    data: GymMembershipCreateManyUserInput | GymMembershipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GymMembershipCreateWithoutAssignUserInput = {
    createdAt?: Date | string
    startDay?: Date | string
    endDay: Date | string
    User: UserCreateNestedOneWithoutGymMembershipInput
    Gym: GymCreateNestedOneWithoutGymMembershipInput
    GymMembershipCancellation?: GymMembershipCancellationCreateNestedOneWithoutGymMembershipInput
  }

  export type GymMembershipUncheckedCreateWithoutAssignUserInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    gymId: number
    startDay?: Date | string
    endDay: Date | string
    gymMembershipCancellationId?: number | null
  }

  export type GymMembershipCreateOrConnectWithoutAssignUserInput = {
    where: GymMembershipWhereUniqueInput
    create: XOR<GymMembershipCreateWithoutAssignUserInput, GymMembershipUncheckedCreateWithoutAssignUserInput>
  }

  export type GymMembershipCreateManyAssignUserInputEnvelope = {
    data: GymMembershipCreateManyAssignUserInput | GymMembershipCreateManyAssignUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteGymCreateWithoutUserInput = {
    assignedAt?: Date | string
    Gym: GymCreateNestedOneWithoutFavoriteUsersInput
  }

  export type FavoriteGymUncheckedCreateWithoutUserInput = {
    gymId: number
    assignedAt?: Date | string
  }

  export type FavoriteGymCreateOrConnectWithoutUserInput = {
    where: FavoriteGymWhereUniqueInput
    create: XOR<FavoriteGymCreateWithoutUserInput, FavoriteGymUncheckedCreateWithoutUserInput>
  }

  export type FavoriteGymCreateManyUserInputEnvelope = {
    data: FavoriteGymCreateManyUserInput | FavoriteGymCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GymEquipmentUserHistoryCreateWithoutUserInput = {
    usedAt?: Date | string
    endAt?: Date | string | null
    GymEuquipmentsOnGyms: GymEuquipmentsOnGymsCreateNestedOneWithoutGymEquipmentUserHistoryInput
  }

  export type GymEquipmentUserHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    gymEuquipmentsOnGymsId: number
    usedAt?: Date | string
    endAt?: Date | string | null
  }

  export type GymEquipmentUserHistoryCreateOrConnectWithoutUserInput = {
    where: GymEquipmentUserHistoryWhereUniqueInput
    create: XOR<GymEquipmentUserHistoryCreateWithoutUserInput, GymEquipmentUserHistoryUncheckedCreateWithoutUserInput>
  }

  export type GymEquipmentUserHistoryCreateManyUserInputEnvelope = {
    data: GymEquipmentUserHistoryCreateManyUserInput | GymEquipmentUserHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GymAccessHistoryCreateWithoutUserInput = {
    createdAt?: Date | string
    entryAt?: Date | string
    exitAt?: Date | string | null
    Gym: GymCreateNestedOneWithoutGymAccessHistoryInput
  }

  export type GymAccessHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    entryAt?: Date | string
    exitAt?: Date | string | null
  }

  export type GymAccessHistoryCreateOrConnectWithoutUserInput = {
    where: GymAccessHistoryWhereUniqueInput
    create: XOR<GymAccessHistoryCreateWithoutUserInput, GymAccessHistoryUncheckedCreateWithoutUserInput>
  }

  export type GymAccessHistoryCreateManyUserInputEnvelope = {
    data: GymAccessHistoryCreateManyUserInput | GymAccessHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GymPassHistoryCreateWithoutUserInput = {
    createdAt?: Date | string
    hash: string
    Gym: GymCreateNestedOneWithoutGymPassHistoryInput
  }

  export type GymPassHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    hash: string
  }

  export type GymPassHistoryCreateOrConnectWithoutUserInput = {
    where: GymPassHistoryWhereUniqueInput
    create: XOR<GymPassHistoryCreateWithoutUserInput, GymPassHistoryUncheckedCreateWithoutUserInput>
  }

  export type GymPassHistoryCreateManyUserInputEnvelope = {
    data: GymPassHistoryCreateManyUserInput | GymPassHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BoardUpsertWithWhereUniqueWithoutUserInput = {
    where: BoardWhereUniqueInput
    update: XOR<BoardUpdateWithoutUserInput, BoardUncheckedUpdateWithoutUserInput>
    create: XOR<BoardCreateWithoutUserInput, BoardUncheckedCreateWithoutUserInput>
  }

  export type BoardUpdateWithWhereUniqueWithoutUserInput = {
    where: BoardWhereUniqueInput
    data: XOR<BoardUpdateWithoutUserInput, BoardUncheckedUpdateWithoutUserInput>
  }

  export type BoardUpdateManyWithWhereWithoutUserInput = {
    where: BoardScalarWhereInput
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyWithoutUserInput>
  }

  export type BoardScalarWhereInput = {
    AND?: BoardScalarWhereInput | BoardScalarWhereInput[]
    OR?: BoardScalarWhereInput[]
    NOT?: BoardScalarWhereInput | BoardScalarWhereInput[]
    id?: IntFilter<"Board"> | number
    createdAt?: DateTimeFilter<"Board"> | Date | string
    title?: StringFilter<"Board"> | string
    content?: StringNullableFilter<"Board"> | string | null
    link?: StringNullableFilter<"Board"> | string | null
    startDay?: DateTimeFilter<"Board"> | Date | string
    endDay?: DateTimeFilter<"Board"> | Date | string
    isDisable?: BoolFilter<"Board"> | boolean
    userId?: IntFilter<"Board"> | number
    boardType?: EnumBoardTypeFilter<"Board"> | $Enums.BoardType
  }

  export type BoardReplyUpsertWithWhereUniqueWithoutUserInput = {
    where: BoardReplyWhereUniqueInput
    update: XOR<BoardReplyUpdateWithoutUserInput, BoardReplyUncheckedUpdateWithoutUserInput>
    create: XOR<BoardReplyCreateWithoutUserInput, BoardReplyUncheckedCreateWithoutUserInput>
  }

  export type BoardReplyUpdateWithWhereUniqueWithoutUserInput = {
    where: BoardReplyWhereUniqueInput
    data: XOR<BoardReplyUpdateWithoutUserInput, BoardReplyUncheckedUpdateWithoutUserInput>
  }

  export type BoardReplyUpdateManyWithWhereWithoutUserInput = {
    where: BoardReplyScalarWhereInput
    data: XOR<BoardReplyUpdateManyMutationInput, BoardReplyUncheckedUpdateManyWithoutUserInput>
  }

  export type BoardReplyScalarWhereInput = {
    AND?: BoardReplyScalarWhereInput | BoardReplyScalarWhereInput[]
    OR?: BoardReplyScalarWhereInput[]
    NOT?: BoardReplyScalarWhereInput | BoardReplyScalarWhereInput[]
    id?: IntFilter<"BoardReply"> | number
    createdAt?: DateTimeFilter<"BoardReply"> | Date | string
    updatedAt?: DateTimeNullableFilter<"BoardReply"> | Date | string | null
    content?: StringFilter<"BoardReply"> | string
    isDisable?: BoolFilter<"BoardReply"> | boolean
    userId?: IntFilter<"BoardReply"> | number
    boardId?: IntFilter<"BoardReply"> | number
    boardReplyId?: IntNullableFilter<"BoardReply"> | number | null
    boardType?: EnumBoardTypeFilter<"BoardReply"> | $Enums.BoardType
  }

  export type NoticeUpsertWithWhereUniqueWithoutUserInput = {
    where: NoticeWhereUniqueInput
    update: XOR<NoticeUpdateWithoutUserInput, NoticeUncheckedUpdateWithoutUserInput>
    create: XOR<NoticeCreateWithoutUserInput, NoticeUncheckedCreateWithoutUserInput>
  }

  export type NoticeUpdateWithWhereUniqueWithoutUserInput = {
    where: NoticeWhereUniqueInput
    data: XOR<NoticeUpdateWithoutUserInput, NoticeUncheckedUpdateWithoutUserInput>
  }

  export type NoticeUpdateManyWithWhereWithoutUserInput = {
    where: NoticeScalarWhereInput
    data: XOR<NoticeUpdateManyMutationInput, NoticeUncheckedUpdateManyWithoutUserInput>
  }

  export type NoticeScalarWhereInput = {
    AND?: NoticeScalarWhereInput | NoticeScalarWhereInput[]
    OR?: NoticeScalarWhereInput[]
    NOT?: NoticeScalarWhereInput | NoticeScalarWhereInput[]
    id?: IntFilter<"Notice"> | number
    createdAt?: DateTimeFilter<"Notice"> | Date | string
    title?: StringFilter<"Notice"> | string
    content?: StringNullableFilter<"Notice"> | string | null
    link?: StringNullableFilter<"Notice"> | string | null
    userId?: IntFilter<"Notice"> | number
  }

  export type GymUpsertWithWhereUniqueWithoutUserInput = {
    where: GymWhereUniqueInput
    update: XOR<GymUpdateWithoutUserInput, GymUncheckedUpdateWithoutUserInput>
    create: XOR<GymCreateWithoutUserInput, GymUncheckedCreateWithoutUserInput>
  }

  export type GymUpdateWithWhereUniqueWithoutUserInput = {
    where: GymWhereUniqueInput
    data: XOR<GymUpdateWithoutUserInput, GymUncheckedUpdateWithoutUserInput>
  }

  export type GymUpdateManyWithWhereWithoutUserInput = {
    where: GymScalarWhereInput
    data: XOR<GymUpdateManyMutationInput, GymUncheckedUpdateManyWithoutUserInput>
  }

  export type GymScalarWhereInput = {
    AND?: GymScalarWhereInput | GymScalarWhereInput[]
    OR?: GymScalarWhereInput[]
    NOT?: GymScalarWhereInput | GymScalarWhereInput[]
    id?: IntFilter<"Gym"> | number
    createdAt?: DateTimeFilter<"Gym"> | Date | string
    ceoName?: StringFilter<"Gym"> | string
    companyName?: StringFilter<"Gym"> | string
    businessNumber?: StringFilter<"Gym"> | string
    postcode?: StringFilter<"Gym"> | string
    mainAddress?: StringFilter<"Gym"> | string
    subAddress?: StringFilter<"Gym"> | string
    phone?: StringFilter<"Gym"> | string
    cellPhone?: StringFilter<"Gym"> | string
    fax?: StringFilter<"Gym"> | string
    email?: StringFilter<"Gym"> | string
    isCertified?: BoolFilter<"Gym"> | boolean
    userId?: IntFilter<"Gym"> | number
  }

  export type GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutAssignUserInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    update: XOR<GymEuquipmentsOnGymsUpdateWithoutAssignUserInput, GymEuquipmentsOnGymsUncheckedUpdateWithoutAssignUserInput>
    create: XOR<GymEuquipmentsOnGymsCreateWithoutAssignUserInput, GymEuquipmentsOnGymsUncheckedCreateWithoutAssignUserInput>
  }

  export type GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutAssignUserInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    data: XOR<GymEuquipmentsOnGymsUpdateWithoutAssignUserInput, GymEuquipmentsOnGymsUncheckedUpdateWithoutAssignUserInput>
  }

  export type GymEuquipmentsOnGymsUpdateManyWithWhereWithoutAssignUserInput = {
    where: GymEuquipmentsOnGymsScalarWhereInput
    data: XOR<GymEuquipmentsOnGymsUpdateManyMutationInput, GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserInput>
  }

  export type GymEuquipmentsOnGymsScalarWhereInput = {
    AND?: GymEuquipmentsOnGymsScalarWhereInput | GymEuquipmentsOnGymsScalarWhereInput[]
    OR?: GymEuquipmentsOnGymsScalarWhereInput[]
    NOT?: GymEuquipmentsOnGymsScalarWhereInput | GymEuquipmentsOnGymsScalarWhereInput[]
    id?: IntFilter<"GymEuquipmentsOnGyms"> | number
    createdAt?: DateTimeFilter<"GymEuquipmentsOnGyms"> | Date | string
    gymId?: IntFilter<"GymEuquipmentsOnGyms"> | number
    gymEquipmentId?: IntFilter<"GymEuquipmentsOnGyms"> | number
    assignBy?: IntFilter<"GymEuquipmentsOnGyms"> | number
  }

  export type GymMembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: GymMembershipWhereUniqueInput
    update: XOR<GymMembershipUpdateWithoutUserInput, GymMembershipUncheckedUpdateWithoutUserInput>
    create: XOR<GymMembershipCreateWithoutUserInput, GymMembershipUncheckedCreateWithoutUserInput>
  }

  export type GymMembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: GymMembershipWhereUniqueInput
    data: XOR<GymMembershipUpdateWithoutUserInput, GymMembershipUncheckedUpdateWithoutUserInput>
  }

  export type GymMembershipUpdateManyWithWhereWithoutUserInput = {
    where: GymMembershipScalarWhereInput
    data: XOR<GymMembershipUpdateManyMutationInput, GymMembershipUncheckedUpdateManyWithoutUserInput>
  }

  export type GymMembershipScalarWhereInput = {
    AND?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
    OR?: GymMembershipScalarWhereInput[]
    NOT?: GymMembershipScalarWhereInput | GymMembershipScalarWhereInput[]
    id?: IntFilter<"GymMembership"> | number
    createdAt?: DateTimeFilter<"GymMembership"> | Date | string
    userId?: IntFilter<"GymMembership"> | number
    gymId?: IntFilter<"GymMembership"> | number
    assignBy?: IntFilter<"GymMembership"> | number
    startDay?: DateTimeFilter<"GymMembership"> | Date | string
    endDay?: DateTimeFilter<"GymMembership"> | Date | string
    gymMembershipCancellationId?: IntNullableFilter<"GymMembership"> | number | null
  }

  export type GymMembershipUpsertWithWhereUniqueWithoutAssignUserInput = {
    where: GymMembershipWhereUniqueInput
    update: XOR<GymMembershipUpdateWithoutAssignUserInput, GymMembershipUncheckedUpdateWithoutAssignUserInput>
    create: XOR<GymMembershipCreateWithoutAssignUserInput, GymMembershipUncheckedCreateWithoutAssignUserInput>
  }

  export type GymMembershipUpdateWithWhereUniqueWithoutAssignUserInput = {
    where: GymMembershipWhereUniqueInput
    data: XOR<GymMembershipUpdateWithoutAssignUserInput, GymMembershipUncheckedUpdateWithoutAssignUserInput>
  }

  export type GymMembershipUpdateManyWithWhereWithoutAssignUserInput = {
    where: GymMembershipScalarWhereInput
    data: XOR<GymMembershipUpdateManyMutationInput, GymMembershipUncheckedUpdateManyWithoutAssignUserInput>
  }

  export type FavoriteGymUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteGymWhereUniqueInput
    update: XOR<FavoriteGymUpdateWithoutUserInput, FavoriteGymUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteGymCreateWithoutUserInput, FavoriteGymUncheckedCreateWithoutUserInput>
  }

  export type FavoriteGymUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteGymWhereUniqueInput
    data: XOR<FavoriteGymUpdateWithoutUserInput, FavoriteGymUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteGymUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteGymScalarWhereInput
    data: XOR<FavoriteGymUpdateManyMutationInput, FavoriteGymUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteGymScalarWhereInput = {
    AND?: FavoriteGymScalarWhereInput | FavoriteGymScalarWhereInput[]
    OR?: FavoriteGymScalarWhereInput[]
    NOT?: FavoriteGymScalarWhereInput | FavoriteGymScalarWhereInput[]
    gymId?: IntFilter<"FavoriteGym"> | number
    userId?: IntFilter<"FavoriteGym"> | number
    assignedAt?: DateTimeFilter<"FavoriteGym"> | Date | string
  }

  export type GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: GymEquipmentUserHistoryWhereUniqueInput
    update: XOR<GymEquipmentUserHistoryUpdateWithoutUserInput, GymEquipmentUserHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<GymEquipmentUserHistoryCreateWithoutUserInput, GymEquipmentUserHistoryUncheckedCreateWithoutUserInput>
  }

  export type GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: GymEquipmentUserHistoryWhereUniqueInput
    data: XOR<GymEquipmentUserHistoryUpdateWithoutUserInput, GymEquipmentUserHistoryUncheckedUpdateWithoutUserInput>
  }

  export type GymEquipmentUserHistoryUpdateManyWithWhereWithoutUserInput = {
    where: GymEquipmentUserHistoryScalarWhereInput
    data: XOR<GymEquipmentUserHistoryUpdateManyMutationInput, GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type GymEquipmentUserHistoryScalarWhereInput = {
    AND?: GymEquipmentUserHistoryScalarWhereInput | GymEquipmentUserHistoryScalarWhereInput[]
    OR?: GymEquipmentUserHistoryScalarWhereInput[]
    NOT?: GymEquipmentUserHistoryScalarWhereInput | GymEquipmentUserHistoryScalarWhereInput[]
    id?: IntFilter<"GymEquipmentUserHistory"> | number
    gymEuquipmentsOnGymsId?: IntFilter<"GymEquipmentUserHistory"> | number
    userId?: IntFilter<"GymEquipmentUserHistory"> | number
    usedAt?: DateTimeFilter<"GymEquipmentUserHistory"> | Date | string
    endAt?: DateTimeNullableFilter<"GymEquipmentUserHistory"> | Date | string | null
  }

  export type GymAccessHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: GymAccessHistoryWhereUniqueInput
    update: XOR<GymAccessHistoryUpdateWithoutUserInput, GymAccessHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<GymAccessHistoryCreateWithoutUserInput, GymAccessHistoryUncheckedCreateWithoutUserInput>
  }

  export type GymAccessHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: GymAccessHistoryWhereUniqueInput
    data: XOR<GymAccessHistoryUpdateWithoutUserInput, GymAccessHistoryUncheckedUpdateWithoutUserInput>
  }

  export type GymAccessHistoryUpdateManyWithWhereWithoutUserInput = {
    where: GymAccessHistoryScalarWhereInput
    data: XOR<GymAccessHistoryUpdateManyMutationInput, GymAccessHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type GymAccessHistoryScalarWhereInput = {
    AND?: GymAccessHistoryScalarWhereInput | GymAccessHistoryScalarWhereInput[]
    OR?: GymAccessHistoryScalarWhereInput[]
    NOT?: GymAccessHistoryScalarWhereInput | GymAccessHistoryScalarWhereInput[]
    id?: IntFilter<"GymAccessHistory"> | number
    createdAt?: DateTimeFilter<"GymAccessHistory"> | Date | string
    gymId?: IntFilter<"GymAccessHistory"> | number
    userId?: IntFilter<"GymAccessHistory"> | number
    entryAt?: DateTimeFilter<"GymAccessHistory"> | Date | string
    exitAt?: DateTimeNullableFilter<"GymAccessHistory"> | Date | string | null
  }

  export type GymPassHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: GymPassHistoryWhereUniqueInput
    update: XOR<GymPassHistoryUpdateWithoutUserInput, GymPassHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<GymPassHistoryCreateWithoutUserInput, GymPassHistoryUncheckedCreateWithoutUserInput>
  }

  export type GymPassHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: GymPassHistoryWhereUniqueInput
    data: XOR<GymPassHistoryUpdateWithoutUserInput, GymPassHistoryUncheckedUpdateWithoutUserInput>
  }

  export type GymPassHistoryUpdateManyWithWhereWithoutUserInput = {
    where: GymPassHistoryScalarWhereInput
    data: XOR<GymPassHistoryUpdateManyMutationInput, GymPassHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type GymPassHistoryScalarWhereInput = {
    AND?: GymPassHistoryScalarWhereInput | GymPassHistoryScalarWhereInput[]
    OR?: GymPassHistoryScalarWhereInput[]
    NOT?: GymPassHistoryScalarWhereInput | GymPassHistoryScalarWhereInput[]
    id?: IntFilter<"GymPassHistory"> | number
    createdAt?: DateTimeFilter<"GymPassHistory"> | Date | string
    gymId?: IntFilter<"GymPassHistory"> | number
    userId?: IntFilter<"GymPassHistory"> | number
    hash?: StringFilter<"GymPassHistory"> | string
  }

  export type UserCreateWithoutNoticeInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNoticeInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNoticeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNoticeInput, UserUncheckedCreateWithoutNoticeInput>
  }

  export type UserUpsertWithoutNoticeInput = {
    update: XOR<UserUpdateWithoutNoticeInput, UserUncheckedUpdateWithoutNoticeInput>
    create: XOR<UserCreateWithoutNoticeInput, UserUncheckedCreateWithoutNoticeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNoticeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNoticeInput, UserUncheckedUpdateWithoutNoticeInput>
  }

  export type UserUpdateWithoutNoticeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNoticeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BoardImageCreateWithoutBoardInput = {
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
  }

  export type BoardImageUncheckedCreateWithoutBoardInput = {
    id?: number
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
  }

  export type BoardImageCreateOrConnectWithoutBoardInput = {
    where: BoardImageWhereUniqueInput
    create: XOR<BoardImageCreateWithoutBoardInput, BoardImageUncheckedCreateWithoutBoardInput>
  }

  export type BoardImageCreateManyBoardInputEnvelope = {
    data: BoardImageCreateManyBoardInput | BoardImageCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type BoardReplyCreateWithoutBoardInput = {
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    User: UserCreateNestedOneWithoutBoardReplyInput
    BoardReply?: BoardReplyCreateNestedOneWithoutBoardNestedReplyInput
    BoardNestedReply?: BoardReplyCreateNestedManyWithoutBoardReplyInput
  }

  export type BoardReplyUncheckedCreateWithoutBoardInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    userId: number
    boardReplyId?: number | null
    boardType?: $Enums.BoardType
    BoardNestedReply?: BoardReplyUncheckedCreateNestedManyWithoutBoardReplyInput
  }

  export type BoardReplyCreateOrConnectWithoutBoardInput = {
    where: BoardReplyWhereUniqueInput
    create: XOR<BoardReplyCreateWithoutBoardInput, BoardReplyUncheckedCreateWithoutBoardInput>
  }

  export type BoardReplyCreateManyBoardInputEnvelope = {
    data: BoardReplyCreateManyBoardInput | BoardReplyCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutBoardInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBoardInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBoardInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoardInput, UserUncheckedCreateWithoutBoardInput>
  }

  export type BoardImageUpsertWithWhereUniqueWithoutBoardInput = {
    where: BoardImageWhereUniqueInput
    update: XOR<BoardImageUpdateWithoutBoardInput, BoardImageUncheckedUpdateWithoutBoardInput>
    create: XOR<BoardImageCreateWithoutBoardInput, BoardImageUncheckedCreateWithoutBoardInput>
  }

  export type BoardImageUpdateWithWhereUniqueWithoutBoardInput = {
    where: BoardImageWhereUniqueInput
    data: XOR<BoardImageUpdateWithoutBoardInput, BoardImageUncheckedUpdateWithoutBoardInput>
  }

  export type BoardImageUpdateManyWithWhereWithoutBoardInput = {
    where: BoardImageScalarWhereInput
    data: XOR<BoardImageUpdateManyMutationInput, BoardImageUncheckedUpdateManyWithoutBoardInput>
  }

  export type BoardImageScalarWhereInput = {
    AND?: BoardImageScalarWhereInput | BoardImageScalarWhereInput[]
    OR?: BoardImageScalarWhereInput[]
    NOT?: BoardImageScalarWhereInput | BoardImageScalarWhereInput[]
    id?: IntFilter<"BoardImage"> | number
    createdAt?: DateTimeFilter<"BoardImage"> | Date | string
    url?: StringFilter<"BoardImage"> | string
    width?: IntFilter<"BoardImage"> | number
    height?: IntFilter<"BoardImage"> | number
    size?: IntFilter<"BoardImage"> | number
    isThumb?: BoolFilter<"BoardImage"> | boolean
    boardId?: IntFilter<"BoardImage"> | number
  }

  export type BoardReplyUpsertWithWhereUniqueWithoutBoardInput = {
    where: BoardReplyWhereUniqueInput
    update: XOR<BoardReplyUpdateWithoutBoardInput, BoardReplyUncheckedUpdateWithoutBoardInput>
    create: XOR<BoardReplyCreateWithoutBoardInput, BoardReplyUncheckedCreateWithoutBoardInput>
  }

  export type BoardReplyUpdateWithWhereUniqueWithoutBoardInput = {
    where: BoardReplyWhereUniqueInput
    data: XOR<BoardReplyUpdateWithoutBoardInput, BoardReplyUncheckedUpdateWithoutBoardInput>
  }

  export type BoardReplyUpdateManyWithWhereWithoutBoardInput = {
    where: BoardReplyScalarWhereInput
    data: XOR<BoardReplyUpdateManyMutationInput, BoardReplyUncheckedUpdateManyWithoutBoardInput>
  }

  export type UserUpsertWithoutBoardInput = {
    update: XOR<UserUpdateWithoutBoardInput, UserUncheckedUpdateWithoutBoardInput>
    create: XOR<UserCreateWithoutBoardInput, UserUncheckedCreateWithoutBoardInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoardInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoardInput, UserUncheckedUpdateWithoutBoardInput>
  }

  export type UserUpdateWithoutBoardInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBoardInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BoardCreateWithoutBoardImageInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    BoardReply?: BoardReplyCreateNestedManyWithoutBoardInput
    User: UserCreateNestedOneWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutBoardImageInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    userId: number
    boardType?: $Enums.BoardType
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutBoardImageInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutBoardImageInput, BoardUncheckedCreateWithoutBoardImageInput>
  }

  export type BoardUpsertWithoutBoardImageInput = {
    update: XOR<BoardUpdateWithoutBoardImageInput, BoardUncheckedUpdateWithoutBoardImageInput>
    create: XOR<BoardCreateWithoutBoardImageInput, BoardUncheckedCreateWithoutBoardImageInput>
    where?: BoardWhereInput
  }

  export type BoardUpdateToOneWithWhereWithoutBoardImageInput = {
    where?: BoardWhereInput
    data: XOR<BoardUpdateWithoutBoardImageInput, BoardUncheckedUpdateWithoutBoardImageInput>
  }

  export type BoardUpdateWithoutBoardImageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardReply?: BoardReplyUpdateManyWithoutBoardNestedInput
    User?: UserUpdateOneRequiredWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutBoardImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type UserCreateWithoutBoardReplyInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBoardReplyInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBoardReplyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoardReplyInput, UserUncheckedCreateWithoutBoardReplyInput>
  }

  export type BoardCreateWithoutBoardReplyInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    BoardImage?: BoardImageCreateNestedManyWithoutBoardInput
    User: UserCreateNestedOneWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutBoardReplyInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    userId: number
    boardType?: $Enums.BoardType
    BoardImage?: BoardImageUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutBoardReplyInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutBoardReplyInput, BoardUncheckedCreateWithoutBoardReplyInput>
  }

  export type BoardReplyCreateWithoutBoardNestedReplyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    User: UserCreateNestedOneWithoutBoardReplyInput
    Board: BoardCreateNestedOneWithoutBoardReplyInput
    BoardReply?: BoardReplyCreateNestedOneWithoutBoardNestedReplyInput
  }

  export type BoardReplyUncheckedCreateWithoutBoardNestedReplyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    userId: number
    boardId: number
    boardReplyId?: number | null
    boardType?: $Enums.BoardType
  }

  export type BoardReplyCreateOrConnectWithoutBoardNestedReplyInput = {
    where: BoardReplyWhereUniqueInput
    create: XOR<BoardReplyCreateWithoutBoardNestedReplyInput, BoardReplyUncheckedCreateWithoutBoardNestedReplyInput>
  }

  export type BoardReplyCreateWithoutBoardReplyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    boardType?: $Enums.BoardType
    User: UserCreateNestedOneWithoutBoardReplyInput
    Board: BoardCreateNestedOneWithoutBoardReplyInput
    BoardNestedReply?: BoardReplyCreateNestedManyWithoutBoardReplyInput
  }

  export type BoardReplyUncheckedCreateWithoutBoardReplyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    userId: number
    boardId: number
    boardType?: $Enums.BoardType
    BoardNestedReply?: BoardReplyUncheckedCreateNestedManyWithoutBoardReplyInput
  }

  export type BoardReplyCreateOrConnectWithoutBoardReplyInput = {
    where: BoardReplyWhereUniqueInput
    create: XOR<BoardReplyCreateWithoutBoardReplyInput, BoardReplyUncheckedCreateWithoutBoardReplyInput>
  }

  export type BoardReplyCreateManyBoardReplyInputEnvelope = {
    data: BoardReplyCreateManyBoardReplyInput | BoardReplyCreateManyBoardReplyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBoardReplyInput = {
    update: XOR<UserUpdateWithoutBoardReplyInput, UserUncheckedUpdateWithoutBoardReplyInput>
    create: XOR<UserCreateWithoutBoardReplyInput, UserUncheckedCreateWithoutBoardReplyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoardReplyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoardReplyInput, UserUncheckedUpdateWithoutBoardReplyInput>
  }

  export type UserUpdateWithoutBoardReplyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBoardReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BoardUpsertWithoutBoardReplyInput = {
    update: XOR<BoardUpdateWithoutBoardReplyInput, BoardUncheckedUpdateWithoutBoardReplyInput>
    create: XOR<BoardCreateWithoutBoardReplyInput, BoardUncheckedCreateWithoutBoardReplyInput>
    where?: BoardWhereInput
  }

  export type BoardUpdateToOneWithWhereWithoutBoardReplyInput = {
    where?: BoardWhereInput
    data: XOR<BoardUpdateWithoutBoardReplyInput, BoardUncheckedUpdateWithoutBoardReplyInput>
  }

  export type BoardUpdateWithoutBoardReplyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardImage?: BoardImageUpdateManyWithoutBoardNestedInput
    User?: UserUpdateOneRequiredWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutBoardReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardImage?: BoardImageUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardReplyUpsertWithoutBoardNestedReplyInput = {
    update: XOR<BoardReplyUpdateWithoutBoardNestedReplyInput, BoardReplyUncheckedUpdateWithoutBoardNestedReplyInput>
    create: XOR<BoardReplyCreateWithoutBoardNestedReplyInput, BoardReplyUncheckedCreateWithoutBoardNestedReplyInput>
    where?: BoardReplyWhereInput
  }

  export type BoardReplyUpdateToOneWithWhereWithoutBoardNestedReplyInput = {
    where?: BoardReplyWhereInput
    data: XOR<BoardReplyUpdateWithoutBoardNestedReplyInput, BoardReplyUncheckedUpdateWithoutBoardNestedReplyInput>
  }

  export type BoardReplyUpdateWithoutBoardNestedReplyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    User?: UserUpdateOneRequiredWithoutBoardReplyNestedInput
    Board?: BoardUpdateOneRequiredWithoutBoardReplyNestedInput
    BoardReply?: BoardReplyUpdateOneWithoutBoardNestedReplyNestedInput
  }

  export type BoardReplyUncheckedUpdateWithoutBoardNestedReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardId?: IntFieldUpdateOperationsInput | number
    boardReplyId?: NullableIntFieldUpdateOperationsInput | number | null
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type BoardReplyUpsertWithWhereUniqueWithoutBoardReplyInput = {
    where: BoardReplyWhereUniqueInput
    update: XOR<BoardReplyUpdateWithoutBoardReplyInput, BoardReplyUncheckedUpdateWithoutBoardReplyInput>
    create: XOR<BoardReplyCreateWithoutBoardReplyInput, BoardReplyUncheckedCreateWithoutBoardReplyInput>
  }

  export type BoardReplyUpdateWithWhereUniqueWithoutBoardReplyInput = {
    where: BoardReplyWhereUniqueInput
    data: XOR<BoardReplyUpdateWithoutBoardReplyInput, BoardReplyUncheckedUpdateWithoutBoardReplyInput>
  }

  export type BoardReplyUpdateManyWithWhereWithoutBoardReplyInput = {
    where: BoardReplyScalarWhereInput
    data: XOR<BoardReplyUpdateManyMutationInput, BoardReplyUncheckedUpdateManyWithoutBoardReplyInput>
  }

  export type BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput = {
    assignedAt?: Date | string
    GymEquipment: GymEquipmentCreateNestedOneWithoutBodyPartsInput
  }

  export type BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput = {
    gymEquipmentId: number
    assignedAt?: Date | string
  }

  export type BodyPartsOnGymEquipmentsCreateOrConnectWithoutBodyPartInput = {
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
    create: XOR<BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput>
  }

  export type BodyPartsOnGymEquipmentsCreateManyBodyPartInputEnvelope = {
    data: BodyPartsOnGymEquipmentsCreateManyBodyPartInput | BodyPartsOnGymEquipmentsCreateManyBodyPartInput[]
    skipDuplicates?: boolean
  }

  export type BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutBodyPartInput = {
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
    update: XOR<BodyPartsOnGymEquipmentsUpdateWithoutBodyPartInput, BodyPartsOnGymEquipmentsUncheckedUpdateWithoutBodyPartInput>
    create: XOR<BodyPartsOnGymEquipmentsCreateWithoutBodyPartInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutBodyPartInput>
  }

  export type BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutBodyPartInput = {
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
    data: XOR<BodyPartsOnGymEquipmentsUpdateWithoutBodyPartInput, BodyPartsOnGymEquipmentsUncheckedUpdateWithoutBodyPartInput>
  }

  export type BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutBodyPartInput = {
    where: BodyPartsOnGymEquipmentsScalarWhereInput
    data: XOR<BodyPartsOnGymEquipmentsUpdateManyMutationInput, BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutBodyPartInput>
  }

  export type BodyPartsOnGymEquipmentsScalarWhereInput = {
    AND?: BodyPartsOnGymEquipmentsScalarWhereInput | BodyPartsOnGymEquipmentsScalarWhereInput[]
    OR?: BodyPartsOnGymEquipmentsScalarWhereInput[]
    NOT?: BodyPartsOnGymEquipmentsScalarWhereInput | BodyPartsOnGymEquipmentsScalarWhereInput[]
    gymEquipmentId?: IntFilter<"BodyPartsOnGymEquipments"> | number
    bodyPartId?: IntFilter<"BodyPartsOnGymEquipments"> | number
    assignedAt?: DateTimeFilter<"BodyPartsOnGymEquipments"> | Date | string
  }

  export type BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput = {
    assignedAt?: Date | string
    BodyPart: BodyPartCreateNestedOneWithoutGymEquipmentsInput
  }

  export type BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput = {
    bodyPartId: number
    assignedAt?: Date | string
  }

  export type BodyPartsOnGymEquipmentsCreateOrConnectWithoutGymEquipmentInput = {
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
    create: XOR<BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput>
  }

  export type BodyPartsOnGymEquipmentsCreateManyGymEquipmentInputEnvelope = {
    data: BodyPartsOnGymEquipmentsCreateManyGymEquipmentInput | BodyPartsOnGymEquipmentsCreateManyGymEquipmentInput[]
    skipDuplicates?: boolean
  }

  export type GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput = {
    createdAt?: Date | string
    Gym: GymCreateNestedOneWithoutGymEquipmentsInput
    assignUser: UserCreateNestedOneWithoutAssignedGymEquipmentsInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutGymEuquipmentsOnGymsInput
  }

  export type GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    assignBy: number
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutGymEuquipmentsOnGymsInput
  }

  export type GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    create: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput>
  }

  export type GymEuquipmentsOnGymsCreateManyGymEquipmentInputEnvelope = {
    data: GymEuquipmentsOnGymsCreateManyGymEquipmentInput | GymEuquipmentsOnGymsCreateManyGymEquipmentInput[]
    skipDuplicates?: boolean
  }

  export type GymEquipmentImageCreateWithoutGymEquipmentInput = {
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
  }

  export type GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput = {
    id?: number
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
  }

  export type GymEquipmentImageCreateOrConnectWithoutGymEquipmentInput = {
    where: GymEquipmentImageWhereUniqueInput
    create: XOR<GymEquipmentImageCreateWithoutGymEquipmentInput, GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput>
  }

  export type GymEquipmentImageCreateManyGymEquipmentInputEnvelope = {
    data: GymEquipmentImageCreateManyGymEquipmentInput | GymEquipmentImageCreateManyGymEquipmentInput[]
    skipDuplicates?: boolean
  }

  export type BodyPartsOnGymEquipmentsUpsertWithWhereUniqueWithoutGymEquipmentInput = {
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
    update: XOR<BodyPartsOnGymEquipmentsUpdateWithoutGymEquipmentInput, BodyPartsOnGymEquipmentsUncheckedUpdateWithoutGymEquipmentInput>
    create: XOR<BodyPartsOnGymEquipmentsCreateWithoutGymEquipmentInput, BodyPartsOnGymEquipmentsUncheckedCreateWithoutGymEquipmentInput>
  }

  export type BodyPartsOnGymEquipmentsUpdateWithWhereUniqueWithoutGymEquipmentInput = {
    where: BodyPartsOnGymEquipmentsWhereUniqueInput
    data: XOR<BodyPartsOnGymEquipmentsUpdateWithoutGymEquipmentInput, BodyPartsOnGymEquipmentsUncheckedUpdateWithoutGymEquipmentInput>
  }

  export type BodyPartsOnGymEquipmentsUpdateManyWithWhereWithoutGymEquipmentInput = {
    where: BodyPartsOnGymEquipmentsScalarWhereInput
    data: XOR<BodyPartsOnGymEquipmentsUpdateManyMutationInput, BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutGymEquipmentInput>
  }

  export type GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymEquipmentInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    update: XOR<GymEuquipmentsOnGymsUpdateWithoutGymEquipmentInput, GymEuquipmentsOnGymsUncheckedUpdateWithoutGymEquipmentInput>
    create: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentInput>
  }

  export type GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymEquipmentInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    data: XOR<GymEuquipmentsOnGymsUpdateWithoutGymEquipmentInput, GymEuquipmentsOnGymsUncheckedUpdateWithoutGymEquipmentInput>
  }

  export type GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymEquipmentInput = {
    where: GymEuquipmentsOnGymsScalarWhereInput
    data: XOR<GymEuquipmentsOnGymsUpdateManyMutationInput, GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymEquipmentInput>
  }

  export type GymEquipmentImageUpsertWithWhereUniqueWithoutGymEquipmentInput = {
    where: GymEquipmentImageWhereUniqueInput
    update: XOR<GymEquipmentImageUpdateWithoutGymEquipmentInput, GymEquipmentImageUncheckedUpdateWithoutGymEquipmentInput>
    create: XOR<GymEquipmentImageCreateWithoutGymEquipmentInput, GymEquipmentImageUncheckedCreateWithoutGymEquipmentInput>
  }

  export type GymEquipmentImageUpdateWithWhereUniqueWithoutGymEquipmentInput = {
    where: GymEquipmentImageWhereUniqueInput
    data: XOR<GymEquipmentImageUpdateWithoutGymEquipmentInput, GymEquipmentImageUncheckedUpdateWithoutGymEquipmentInput>
  }

  export type GymEquipmentImageUpdateManyWithWhereWithoutGymEquipmentInput = {
    where: GymEquipmentImageScalarWhereInput
    data: XOR<GymEquipmentImageUpdateManyMutationInput, GymEquipmentImageUncheckedUpdateManyWithoutGymEquipmentInput>
  }

  export type GymEquipmentImageScalarWhereInput = {
    AND?: GymEquipmentImageScalarWhereInput | GymEquipmentImageScalarWhereInput[]
    OR?: GymEquipmentImageScalarWhereInput[]
    NOT?: GymEquipmentImageScalarWhereInput | GymEquipmentImageScalarWhereInput[]
    id?: IntFilter<"GymEquipmentImage"> | number
    createdAt?: DateTimeFilter<"GymEquipmentImage"> | Date | string
    url?: StringFilter<"GymEquipmentImage"> | string
    width?: IntFilter<"GymEquipmentImage"> | number
    height?: IntFilter<"GymEquipmentImage"> | number
    size?: IntFilter<"GymEquipmentImage"> | number
    isThumb?: BoolFilter<"GymEquipmentImage"> | boolean
    gymEquipmentId?: IntFilter<"GymEquipmentImage"> | number
  }

  export type GymEquipmentCreateWithoutGymEquipmentImageInput = {
    createdAt?: Date | string
    name: string
    code: string
    BodyParts?: BodyPartsOnGymEquipmentsCreateNestedManyWithoutGymEquipmentInput
    Gyms?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymEquipmentInput
  }

  export type GymEquipmentUncheckedCreateWithoutGymEquipmentImageInput = {
    id?: number
    createdAt?: Date | string
    name: string
    code: string
    BodyParts?: BodyPartsOnGymEquipmentsUncheckedCreateNestedManyWithoutGymEquipmentInput
    Gyms?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymEquipmentInput
  }

  export type GymEquipmentCreateOrConnectWithoutGymEquipmentImageInput = {
    where: GymEquipmentWhereUniqueInput
    create: XOR<GymEquipmentCreateWithoutGymEquipmentImageInput, GymEquipmentUncheckedCreateWithoutGymEquipmentImageInput>
  }

  export type GymEquipmentUpsertWithoutGymEquipmentImageInput = {
    update: XOR<GymEquipmentUpdateWithoutGymEquipmentImageInput, GymEquipmentUncheckedUpdateWithoutGymEquipmentImageInput>
    create: XOR<GymEquipmentCreateWithoutGymEquipmentImageInput, GymEquipmentUncheckedCreateWithoutGymEquipmentImageInput>
    where?: GymEquipmentWhereInput
  }

  export type GymEquipmentUpdateToOneWithWhereWithoutGymEquipmentImageInput = {
    where?: GymEquipmentWhereInput
    data: XOR<GymEquipmentUpdateWithoutGymEquipmentImageInput, GymEquipmentUncheckedUpdateWithoutGymEquipmentImageInput>
  }

  export type GymEquipmentUpdateWithoutGymEquipmentImageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    BodyParts?: BodyPartsOnGymEquipmentsUpdateManyWithoutGymEquipmentNestedInput
    Gyms?: GymEuquipmentsOnGymsUpdateManyWithoutGymEquipmentNestedInput
  }

  export type GymEquipmentUncheckedUpdateWithoutGymEquipmentImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    BodyParts?: BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutGymEquipmentNestedInput
    Gyms?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymEquipmentNestedInput
  }

  export type GymEquipmentCreateWithoutBodyPartsInput = {
    createdAt?: Date | string
    name: string
    code: string
    Gyms?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymEquipmentInput
    GymEquipmentImage?: GymEquipmentImageCreateNestedManyWithoutGymEquipmentInput
  }

  export type GymEquipmentUncheckedCreateWithoutBodyPartsInput = {
    id?: number
    createdAt?: Date | string
    name: string
    code: string
    Gyms?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymEquipmentInput
    GymEquipmentImage?: GymEquipmentImageUncheckedCreateNestedManyWithoutGymEquipmentInput
  }

  export type GymEquipmentCreateOrConnectWithoutBodyPartsInput = {
    where: GymEquipmentWhereUniqueInput
    create: XOR<GymEquipmentCreateWithoutBodyPartsInput, GymEquipmentUncheckedCreateWithoutBodyPartsInput>
  }

  export type BodyPartCreateWithoutGymEquipmentsInput = {
    createdAt?: Date | string
    name: string
    code: string
  }

  export type BodyPartUncheckedCreateWithoutGymEquipmentsInput = {
    id?: number
    createdAt?: Date | string
    name: string
    code: string
  }

  export type BodyPartCreateOrConnectWithoutGymEquipmentsInput = {
    where: BodyPartWhereUniqueInput
    create: XOR<BodyPartCreateWithoutGymEquipmentsInput, BodyPartUncheckedCreateWithoutGymEquipmentsInput>
  }

  export type GymEquipmentUpsertWithoutBodyPartsInput = {
    update: XOR<GymEquipmentUpdateWithoutBodyPartsInput, GymEquipmentUncheckedUpdateWithoutBodyPartsInput>
    create: XOR<GymEquipmentCreateWithoutBodyPartsInput, GymEquipmentUncheckedCreateWithoutBodyPartsInput>
    where?: GymEquipmentWhereInput
  }

  export type GymEquipmentUpdateToOneWithWhereWithoutBodyPartsInput = {
    where?: GymEquipmentWhereInput
    data: XOR<GymEquipmentUpdateWithoutBodyPartsInput, GymEquipmentUncheckedUpdateWithoutBodyPartsInput>
  }

  export type GymEquipmentUpdateWithoutBodyPartsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Gyms?: GymEuquipmentsOnGymsUpdateManyWithoutGymEquipmentNestedInput
    GymEquipmentImage?: GymEquipmentImageUpdateManyWithoutGymEquipmentNestedInput
  }

  export type GymEquipmentUncheckedUpdateWithoutBodyPartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Gyms?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymEquipmentNestedInput
    GymEquipmentImage?: GymEquipmentImageUncheckedUpdateManyWithoutGymEquipmentNestedInput
  }

  export type BodyPartUpsertWithoutGymEquipmentsInput = {
    update: XOR<BodyPartUpdateWithoutGymEquipmentsInput, BodyPartUncheckedUpdateWithoutGymEquipmentsInput>
    create: XOR<BodyPartCreateWithoutGymEquipmentsInput, BodyPartUncheckedCreateWithoutGymEquipmentsInput>
    where?: BodyPartWhereInput
  }

  export type BodyPartUpdateToOneWithWhereWithoutGymEquipmentsInput = {
    where?: BodyPartWhereInput
    data: XOR<BodyPartUpdateWithoutGymEquipmentsInput, BodyPartUncheckedUpdateWithoutGymEquipmentsInput>
  }

  export type BodyPartUpdateWithoutGymEquipmentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type BodyPartUncheckedUpdateWithoutGymEquipmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutGymInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGymInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGymInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGymInput, UserUncheckedCreateWithoutGymInput>
  }

  export type GymEuquipmentsOnGymsCreateWithoutGymInput = {
    createdAt?: Date | string
    GymEquipment: GymEquipmentCreateNestedOneWithoutGymsInput
    assignUser: UserCreateNestedOneWithoutAssignedGymEquipmentsInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutGymEuquipmentsOnGymsInput
  }

  export type GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput = {
    id?: number
    createdAt?: Date | string
    gymEquipmentId: number
    assignBy: number
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutGymEuquipmentsOnGymsInput
  }

  export type GymEuquipmentsOnGymsCreateOrConnectWithoutGymInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    create: XOR<GymEuquipmentsOnGymsCreateWithoutGymInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput>
  }

  export type GymEuquipmentsOnGymsCreateManyGymInputEnvelope = {
    data: GymEuquipmentsOnGymsCreateManyGymInput | GymEuquipmentsOnGymsCreateManyGymInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteGymCreateWithoutGymInput = {
    assignedAt?: Date | string
    User: UserCreateNestedOneWithoutFavoriteGymsInput
  }

  export type FavoriteGymUncheckedCreateWithoutGymInput = {
    userId: number
    assignedAt?: Date | string
  }

  export type FavoriteGymCreateOrConnectWithoutGymInput = {
    where: FavoriteGymWhereUniqueInput
    create: XOR<FavoriteGymCreateWithoutGymInput, FavoriteGymUncheckedCreateWithoutGymInput>
  }

  export type FavoriteGymCreateManyGymInputEnvelope = {
    data: FavoriteGymCreateManyGymInput | FavoriteGymCreateManyGymInput[]
    skipDuplicates?: boolean
  }

  export type GymAccessHistoryCreateWithoutGymInput = {
    createdAt?: Date | string
    entryAt?: Date | string
    exitAt?: Date | string | null
    User: UserCreateNestedOneWithoutGymAccessHistoryInput
  }

  export type GymAccessHistoryUncheckedCreateWithoutGymInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    entryAt?: Date | string
    exitAt?: Date | string | null
  }

  export type GymAccessHistoryCreateOrConnectWithoutGymInput = {
    where: GymAccessHistoryWhereUniqueInput
    create: XOR<GymAccessHistoryCreateWithoutGymInput, GymAccessHistoryUncheckedCreateWithoutGymInput>
  }

  export type GymAccessHistoryCreateManyGymInputEnvelope = {
    data: GymAccessHistoryCreateManyGymInput | GymAccessHistoryCreateManyGymInput[]
    skipDuplicates?: boolean
  }

  export type GymMembershipCreateWithoutGymInput = {
    createdAt?: Date | string
    startDay?: Date | string
    endDay: Date | string
    User: UserCreateNestedOneWithoutGymMembershipInput
    assignUser: UserCreateNestedOneWithoutAssignedGymMembershipsInput
    GymMembershipCancellation?: GymMembershipCancellationCreateNestedOneWithoutGymMembershipInput
  }

  export type GymMembershipUncheckedCreateWithoutGymInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    assignBy: number
    startDay?: Date | string
    endDay: Date | string
    gymMembershipCancellationId?: number | null
  }

  export type GymMembershipCreateOrConnectWithoutGymInput = {
    where: GymMembershipWhereUniqueInput
    create: XOR<GymMembershipCreateWithoutGymInput, GymMembershipUncheckedCreateWithoutGymInput>
  }

  export type GymMembershipCreateManyGymInputEnvelope = {
    data: GymMembershipCreateManyGymInput | GymMembershipCreateManyGymInput[]
    skipDuplicates?: boolean
  }

  export type GymPassHistoryCreateWithoutGymInput = {
    createdAt?: Date | string
    hash: string
    User: UserCreateNestedOneWithoutGymPassHistoryInput
  }

  export type GymPassHistoryUncheckedCreateWithoutGymInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    hash: string
  }

  export type GymPassHistoryCreateOrConnectWithoutGymInput = {
    where: GymPassHistoryWhereUniqueInput
    create: XOR<GymPassHistoryCreateWithoutGymInput, GymPassHistoryUncheckedCreateWithoutGymInput>
  }

  export type GymPassHistoryCreateManyGymInputEnvelope = {
    data: GymPassHistoryCreateManyGymInput | GymPassHistoryCreateManyGymInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutGymInput = {
    update: XOR<UserUpdateWithoutGymInput, UserUncheckedUpdateWithoutGymInput>
    create: XOR<UserCreateWithoutGymInput, UserUncheckedCreateWithoutGymInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGymInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGymInput, UserUncheckedUpdateWithoutGymInput>
  }

  export type UserUpdateWithoutGymInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GymEuquipmentsOnGymsUpsertWithWhereUniqueWithoutGymInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    update: XOR<GymEuquipmentsOnGymsUpdateWithoutGymInput, GymEuquipmentsOnGymsUncheckedUpdateWithoutGymInput>
    create: XOR<GymEuquipmentsOnGymsCreateWithoutGymInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymInput>
  }

  export type GymEuquipmentsOnGymsUpdateWithWhereUniqueWithoutGymInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    data: XOR<GymEuquipmentsOnGymsUpdateWithoutGymInput, GymEuquipmentsOnGymsUncheckedUpdateWithoutGymInput>
  }

  export type GymEuquipmentsOnGymsUpdateManyWithWhereWithoutGymInput = {
    where: GymEuquipmentsOnGymsScalarWhereInput
    data: XOR<GymEuquipmentsOnGymsUpdateManyMutationInput, GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymInput>
  }

  export type FavoriteGymUpsertWithWhereUniqueWithoutGymInput = {
    where: FavoriteGymWhereUniqueInput
    update: XOR<FavoriteGymUpdateWithoutGymInput, FavoriteGymUncheckedUpdateWithoutGymInput>
    create: XOR<FavoriteGymCreateWithoutGymInput, FavoriteGymUncheckedCreateWithoutGymInput>
  }

  export type FavoriteGymUpdateWithWhereUniqueWithoutGymInput = {
    where: FavoriteGymWhereUniqueInput
    data: XOR<FavoriteGymUpdateWithoutGymInput, FavoriteGymUncheckedUpdateWithoutGymInput>
  }

  export type FavoriteGymUpdateManyWithWhereWithoutGymInput = {
    where: FavoriteGymScalarWhereInput
    data: XOR<FavoriteGymUpdateManyMutationInput, FavoriteGymUncheckedUpdateManyWithoutGymInput>
  }

  export type GymAccessHistoryUpsertWithWhereUniqueWithoutGymInput = {
    where: GymAccessHistoryWhereUniqueInput
    update: XOR<GymAccessHistoryUpdateWithoutGymInput, GymAccessHistoryUncheckedUpdateWithoutGymInput>
    create: XOR<GymAccessHistoryCreateWithoutGymInput, GymAccessHistoryUncheckedCreateWithoutGymInput>
  }

  export type GymAccessHistoryUpdateWithWhereUniqueWithoutGymInput = {
    where: GymAccessHistoryWhereUniqueInput
    data: XOR<GymAccessHistoryUpdateWithoutGymInput, GymAccessHistoryUncheckedUpdateWithoutGymInput>
  }

  export type GymAccessHistoryUpdateManyWithWhereWithoutGymInput = {
    where: GymAccessHistoryScalarWhereInput
    data: XOR<GymAccessHistoryUpdateManyMutationInput, GymAccessHistoryUncheckedUpdateManyWithoutGymInput>
  }

  export type GymMembershipUpsertWithWhereUniqueWithoutGymInput = {
    where: GymMembershipWhereUniqueInput
    update: XOR<GymMembershipUpdateWithoutGymInput, GymMembershipUncheckedUpdateWithoutGymInput>
    create: XOR<GymMembershipCreateWithoutGymInput, GymMembershipUncheckedCreateWithoutGymInput>
  }

  export type GymMembershipUpdateWithWhereUniqueWithoutGymInput = {
    where: GymMembershipWhereUniqueInput
    data: XOR<GymMembershipUpdateWithoutGymInput, GymMembershipUncheckedUpdateWithoutGymInput>
  }

  export type GymMembershipUpdateManyWithWhereWithoutGymInput = {
    where: GymMembershipScalarWhereInput
    data: XOR<GymMembershipUpdateManyMutationInput, GymMembershipUncheckedUpdateManyWithoutGymInput>
  }

  export type GymPassHistoryUpsertWithWhereUniqueWithoutGymInput = {
    where: GymPassHistoryWhereUniqueInput
    update: XOR<GymPassHistoryUpdateWithoutGymInput, GymPassHistoryUncheckedUpdateWithoutGymInput>
    create: XOR<GymPassHistoryCreateWithoutGymInput, GymPassHistoryUncheckedCreateWithoutGymInput>
  }

  export type GymPassHistoryUpdateWithWhereUniqueWithoutGymInput = {
    where: GymPassHistoryWhereUniqueInput
    data: XOR<GymPassHistoryUpdateWithoutGymInput, GymPassHistoryUncheckedUpdateWithoutGymInput>
  }

  export type GymPassHistoryUpdateManyWithWhereWithoutGymInput = {
    where: GymPassHistoryScalarWhereInput
    data: XOR<GymPassHistoryUpdateManyMutationInput, GymPassHistoryUncheckedUpdateManyWithoutGymInput>
  }

  export type GymCreateWithoutGymEquipmentsInput = {
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    User: UserCreateNestedOneWithoutGymInput
    FavoriteUsers?: FavoriteGymCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutGymEquipmentsInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    userId: number
    FavoriteUsers?: FavoriteGymUncheckedCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutGymEquipmentsInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutGymEquipmentsInput, GymUncheckedCreateWithoutGymEquipmentsInput>
  }

  export type GymEquipmentCreateWithoutGymsInput = {
    createdAt?: Date | string
    name: string
    code: string
    BodyParts?: BodyPartsOnGymEquipmentsCreateNestedManyWithoutGymEquipmentInput
    GymEquipmentImage?: GymEquipmentImageCreateNestedManyWithoutGymEquipmentInput
  }

  export type GymEquipmentUncheckedCreateWithoutGymsInput = {
    id?: number
    createdAt?: Date | string
    name: string
    code: string
    BodyParts?: BodyPartsOnGymEquipmentsUncheckedCreateNestedManyWithoutGymEquipmentInput
    GymEquipmentImage?: GymEquipmentImageUncheckedCreateNestedManyWithoutGymEquipmentInput
  }

  export type GymEquipmentCreateOrConnectWithoutGymsInput = {
    where: GymEquipmentWhereUniqueInput
    create: XOR<GymEquipmentCreateWithoutGymsInput, GymEquipmentUncheckedCreateWithoutGymsInput>
  }

  export type UserCreateWithoutAssignedGymEquipmentsInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedGymEquipmentsInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedGymEquipmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedGymEquipmentsInput, UserUncheckedCreateWithoutAssignedGymEquipmentsInput>
  }

  export type GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput = {
    usedAt?: Date | string
    endAt?: Date | string | null
    User: UserCreateNestedOneWithoutGymEquipmentUserHistoryInput
  }

  export type GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput = {
    id?: number
    userId: number
    usedAt?: Date | string
    endAt?: Date | string | null
  }

  export type GymEquipmentUserHistoryCreateOrConnectWithoutGymEuquipmentsOnGymsInput = {
    where: GymEquipmentUserHistoryWhereUniqueInput
    create: XOR<GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput, GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput>
  }

  export type GymEquipmentUserHistoryCreateManyGymEuquipmentsOnGymsInputEnvelope = {
    data: GymEquipmentUserHistoryCreateManyGymEuquipmentsOnGymsInput | GymEquipmentUserHistoryCreateManyGymEuquipmentsOnGymsInput[]
    skipDuplicates?: boolean
  }

  export type GymUpsertWithoutGymEquipmentsInput = {
    update: XOR<GymUpdateWithoutGymEquipmentsInput, GymUncheckedUpdateWithoutGymEquipmentsInput>
    create: XOR<GymCreateWithoutGymEquipmentsInput, GymUncheckedCreateWithoutGymEquipmentsInput>
    where?: GymWhereInput
  }

  export type GymUpdateToOneWithWhereWithoutGymEquipmentsInput = {
    where?: GymWhereInput
    data: XOR<GymUpdateWithoutGymEquipmentsInput, GymUncheckedUpdateWithoutGymEquipmentsInput>
  }

  export type GymUpdateWithoutGymEquipmentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneRequiredWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutGymEquipmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    FavoriteUsers?: FavoriteGymUncheckedUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutGymNestedInput
  }

  export type GymEquipmentUpsertWithoutGymsInput = {
    update: XOR<GymEquipmentUpdateWithoutGymsInput, GymEquipmentUncheckedUpdateWithoutGymsInput>
    create: XOR<GymEquipmentCreateWithoutGymsInput, GymEquipmentUncheckedCreateWithoutGymsInput>
    where?: GymEquipmentWhereInput
  }

  export type GymEquipmentUpdateToOneWithWhereWithoutGymsInput = {
    where?: GymEquipmentWhereInput
    data: XOR<GymEquipmentUpdateWithoutGymsInput, GymEquipmentUncheckedUpdateWithoutGymsInput>
  }

  export type GymEquipmentUpdateWithoutGymsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    BodyParts?: BodyPartsOnGymEquipmentsUpdateManyWithoutGymEquipmentNestedInput
    GymEquipmentImage?: GymEquipmentImageUpdateManyWithoutGymEquipmentNestedInput
  }

  export type GymEquipmentUncheckedUpdateWithoutGymsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    BodyParts?: BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutGymEquipmentNestedInput
    GymEquipmentImage?: GymEquipmentImageUncheckedUpdateManyWithoutGymEquipmentNestedInput
  }

  export type UserUpsertWithoutAssignedGymEquipmentsInput = {
    update: XOR<UserUpdateWithoutAssignedGymEquipmentsInput, UserUncheckedUpdateWithoutAssignedGymEquipmentsInput>
    create: XOR<UserCreateWithoutAssignedGymEquipmentsInput, UserUncheckedCreateWithoutAssignedGymEquipmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedGymEquipmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedGymEquipmentsInput, UserUncheckedUpdateWithoutAssignedGymEquipmentsInput>
  }

  export type UserUpdateWithoutAssignedGymEquipmentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedGymEquipmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GymEquipmentUserHistoryUpsertWithWhereUniqueWithoutGymEuquipmentsOnGymsInput = {
    where: GymEquipmentUserHistoryWhereUniqueInput
    update: XOR<GymEquipmentUserHistoryUpdateWithoutGymEuquipmentsOnGymsInput, GymEquipmentUserHistoryUncheckedUpdateWithoutGymEuquipmentsOnGymsInput>
    create: XOR<GymEquipmentUserHistoryCreateWithoutGymEuquipmentsOnGymsInput, GymEquipmentUserHistoryUncheckedCreateWithoutGymEuquipmentsOnGymsInput>
  }

  export type GymEquipmentUserHistoryUpdateWithWhereUniqueWithoutGymEuquipmentsOnGymsInput = {
    where: GymEquipmentUserHistoryWhereUniqueInput
    data: XOR<GymEquipmentUserHistoryUpdateWithoutGymEuquipmentsOnGymsInput, GymEquipmentUserHistoryUncheckedUpdateWithoutGymEuquipmentsOnGymsInput>
  }

  export type GymEquipmentUserHistoryUpdateManyWithWhereWithoutGymEuquipmentsOnGymsInput = {
    where: GymEquipmentUserHistoryScalarWhereInput
    data: XOR<GymEquipmentUserHistoryUpdateManyMutationInput, GymEquipmentUserHistoryUncheckedUpdateManyWithoutGymEuquipmentsOnGymsInput>
  }

  export type GymEuquipmentsOnGymsCreateWithoutGymEquipmentUserHistoryInput = {
    createdAt?: Date | string
    Gym: GymCreateNestedOneWithoutGymEquipmentsInput
    GymEquipment: GymEquipmentCreateNestedOneWithoutGymsInput
    assignUser: UserCreateNestedOneWithoutAssignedGymEquipmentsInput
  }

  export type GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentUserHistoryInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    gymEquipmentId: number
    assignBy: number
  }

  export type GymEuquipmentsOnGymsCreateOrConnectWithoutGymEquipmentUserHistoryInput = {
    where: GymEuquipmentsOnGymsWhereUniqueInput
    create: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentUserHistoryInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentUserHistoryInput>
  }

  export type UserCreateWithoutGymEquipmentUserHistoryInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGymEquipmentUserHistoryInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGymEquipmentUserHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGymEquipmentUserHistoryInput, UserUncheckedCreateWithoutGymEquipmentUserHistoryInput>
  }

  export type GymEuquipmentsOnGymsUpsertWithoutGymEquipmentUserHistoryInput = {
    update: XOR<GymEuquipmentsOnGymsUpdateWithoutGymEquipmentUserHistoryInput, GymEuquipmentsOnGymsUncheckedUpdateWithoutGymEquipmentUserHistoryInput>
    create: XOR<GymEuquipmentsOnGymsCreateWithoutGymEquipmentUserHistoryInput, GymEuquipmentsOnGymsUncheckedCreateWithoutGymEquipmentUserHistoryInput>
    where?: GymEuquipmentsOnGymsWhereInput
  }

  export type GymEuquipmentsOnGymsUpdateToOneWithWhereWithoutGymEquipmentUserHistoryInput = {
    where?: GymEuquipmentsOnGymsWhereInput
    data: XOR<GymEuquipmentsOnGymsUpdateWithoutGymEquipmentUserHistoryInput, GymEuquipmentsOnGymsUncheckedUpdateWithoutGymEquipmentUserHistoryInput>
  }

  export type GymEuquipmentsOnGymsUpdateWithoutGymEquipmentUserHistoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Gym?: GymUpdateOneRequiredWithoutGymEquipmentsNestedInput
    GymEquipment?: GymEquipmentUpdateOneRequiredWithoutGymsNestedInput
    assignUser?: UserUpdateOneRequiredWithoutAssignedGymEquipmentsNestedInput
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateWithoutGymEquipmentUserHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutGymEquipmentUserHistoryInput = {
    update: XOR<UserUpdateWithoutGymEquipmentUserHistoryInput, UserUncheckedUpdateWithoutGymEquipmentUserHistoryInput>
    create: XOR<UserCreateWithoutGymEquipmentUserHistoryInput, UserUncheckedCreateWithoutGymEquipmentUserHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGymEquipmentUserHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGymEquipmentUserHistoryInput, UserUncheckedUpdateWithoutGymEquipmentUserHistoryInput>
  }

  export type UserUpdateWithoutGymEquipmentUserHistoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGymEquipmentUserHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutGymMembershipInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGymMembershipInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGymMembershipInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGymMembershipInput, UserUncheckedCreateWithoutGymMembershipInput>
  }

  export type GymCreateWithoutGymMembershipInput = {
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    User: UserCreateNestedOneWithoutGymInput
    GymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutGymMembershipInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    userId: number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymUncheckedCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutGymMembershipInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutGymMembershipInput, GymUncheckedCreateWithoutGymMembershipInput>
  }

  export type UserCreateWithoutAssignedGymMembershipsInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedGymMembershipsInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedGymMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedGymMembershipsInput, UserUncheckedCreateWithoutAssignedGymMembershipsInput>
  }

  export type GymMembershipCancellationCreateWithoutGymMembershipInput = {
    createdAt?: Date | string
    reason?: string | null
  }

  export type GymMembershipCancellationUncheckedCreateWithoutGymMembershipInput = {
    id?: number
    createdAt?: Date | string
    reason?: string | null
  }

  export type GymMembershipCancellationCreateOrConnectWithoutGymMembershipInput = {
    where: GymMembershipCancellationWhereUniqueInput
    create: XOR<GymMembershipCancellationCreateWithoutGymMembershipInput, GymMembershipCancellationUncheckedCreateWithoutGymMembershipInput>
  }

  export type UserUpsertWithoutGymMembershipInput = {
    update: XOR<UserUpdateWithoutGymMembershipInput, UserUncheckedUpdateWithoutGymMembershipInput>
    create: XOR<UserCreateWithoutGymMembershipInput, UserUncheckedCreateWithoutGymMembershipInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGymMembershipInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGymMembershipInput, UserUncheckedUpdateWithoutGymMembershipInput>
  }

  export type UserUpdateWithoutGymMembershipInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGymMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GymUpsertWithoutGymMembershipInput = {
    update: XOR<GymUpdateWithoutGymMembershipInput, GymUncheckedUpdateWithoutGymMembershipInput>
    create: XOR<GymCreateWithoutGymMembershipInput, GymUncheckedCreateWithoutGymMembershipInput>
    where?: GymWhereInput
  }

  export type GymUpdateToOneWithWhereWithoutGymMembershipInput = {
    where?: GymWhereInput
    data: XOR<GymUpdateWithoutGymMembershipInput, GymUncheckedUpdateWithoutGymMembershipInput>
  }

  export type GymUpdateWithoutGymMembershipInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneRequiredWithoutGymNestedInput
    GymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutGymMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUncheckedUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutGymNestedInput
  }

  export type UserUpsertWithoutAssignedGymMembershipsInput = {
    update: XOR<UserUpdateWithoutAssignedGymMembershipsInput, UserUncheckedUpdateWithoutAssignedGymMembershipsInput>
    create: XOR<UserCreateWithoutAssignedGymMembershipsInput, UserUncheckedCreateWithoutAssignedGymMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedGymMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedGymMembershipsInput, UserUncheckedUpdateWithoutAssignedGymMembershipsInput>
  }

  export type UserUpdateWithoutAssignedGymMembershipsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedGymMembershipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GymMembershipCancellationUpsertWithoutGymMembershipInput = {
    update: XOR<GymMembershipCancellationUpdateWithoutGymMembershipInput, GymMembershipCancellationUncheckedUpdateWithoutGymMembershipInput>
    create: XOR<GymMembershipCancellationCreateWithoutGymMembershipInput, GymMembershipCancellationUncheckedCreateWithoutGymMembershipInput>
    where?: GymMembershipCancellationWhereInput
  }

  export type GymMembershipCancellationUpdateToOneWithWhereWithoutGymMembershipInput = {
    where?: GymMembershipCancellationWhereInput
    data: XOR<GymMembershipCancellationUpdateWithoutGymMembershipInput, GymMembershipCancellationUncheckedUpdateWithoutGymMembershipInput>
  }

  export type GymMembershipCancellationUpdateWithoutGymMembershipInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GymMembershipCancellationUncheckedUpdateWithoutGymMembershipInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GymMembershipCreateWithoutGymMembershipCancellationInput = {
    createdAt?: Date | string
    startDay?: Date | string
    endDay: Date | string
    User: UserCreateNestedOneWithoutGymMembershipInput
    Gym: GymCreateNestedOneWithoutGymMembershipInput
    assignUser: UserCreateNestedOneWithoutAssignedGymMembershipsInput
  }

  export type GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    gymId: number
    assignBy: number
    startDay?: Date | string
    endDay: Date | string
  }

  export type GymMembershipCreateOrConnectWithoutGymMembershipCancellationInput = {
    where: GymMembershipWhereUniqueInput
    create: XOR<GymMembershipCreateWithoutGymMembershipCancellationInput, GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput>
  }

  export type GymMembershipCreateManyGymMembershipCancellationInputEnvelope = {
    data: GymMembershipCreateManyGymMembershipCancellationInput | GymMembershipCreateManyGymMembershipCancellationInput[]
    skipDuplicates?: boolean
  }

  export type GymMembershipUpsertWithWhereUniqueWithoutGymMembershipCancellationInput = {
    where: GymMembershipWhereUniqueInput
    update: XOR<GymMembershipUpdateWithoutGymMembershipCancellationInput, GymMembershipUncheckedUpdateWithoutGymMembershipCancellationInput>
    create: XOR<GymMembershipCreateWithoutGymMembershipCancellationInput, GymMembershipUncheckedCreateWithoutGymMembershipCancellationInput>
  }

  export type GymMembershipUpdateWithWhereUniqueWithoutGymMembershipCancellationInput = {
    where: GymMembershipWhereUniqueInput
    data: XOR<GymMembershipUpdateWithoutGymMembershipCancellationInput, GymMembershipUncheckedUpdateWithoutGymMembershipCancellationInput>
  }

  export type GymMembershipUpdateManyWithWhereWithoutGymMembershipCancellationInput = {
    where: GymMembershipScalarWhereInput
    data: XOR<GymMembershipUpdateManyMutationInput, GymMembershipUncheckedUpdateManyWithoutGymMembershipCancellationInput>
  }

  export type GymCreateWithoutFavoriteUsersInput = {
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    User: UserCreateNestedOneWithoutGymInput
    GymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutFavoriteUsersInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    userId: number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutFavoriteUsersInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutFavoriteUsersInput, GymUncheckedCreateWithoutFavoriteUsersInput>
  }

  export type UserCreateWithoutFavoriteGymsInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteGymsInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteGymsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteGymsInput, UserUncheckedCreateWithoutFavoriteGymsInput>
  }

  export type GymUpsertWithoutFavoriteUsersInput = {
    update: XOR<GymUpdateWithoutFavoriteUsersInput, GymUncheckedUpdateWithoutFavoriteUsersInput>
    create: XOR<GymCreateWithoutFavoriteUsersInput, GymUncheckedCreateWithoutFavoriteUsersInput>
    where?: GymWhereInput
  }

  export type GymUpdateToOneWithWhereWithoutFavoriteUsersInput = {
    where?: GymWhereInput
    data: XOR<GymUpdateWithoutFavoriteUsersInput, GymUncheckedUpdateWithoutFavoriteUsersInput>
  }

  export type GymUpdateWithoutFavoriteUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneRequiredWithoutGymNestedInput
    GymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutFavoriteUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutGymNestedInput
  }

  export type UserUpsertWithoutFavoriteGymsInput = {
    update: XOR<UserUpdateWithoutFavoriteGymsInput, UserUncheckedUpdateWithoutFavoriteGymsInput>
    create: XOR<UserCreateWithoutFavoriteGymsInput, UserUncheckedCreateWithoutFavoriteGymsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteGymsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteGymsInput, UserUncheckedUpdateWithoutFavoriteGymsInput>
  }

  export type UserUpdateWithoutFavoriteGymsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteGymsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GymCreateWithoutGymAccessHistoryInput = {
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    User: UserCreateNestedOneWithoutGymInput
    GymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutGymAccessHistoryInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    userId: number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymUncheckedCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutGymInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutGymAccessHistoryInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutGymAccessHistoryInput, GymUncheckedCreateWithoutGymAccessHistoryInput>
  }

  export type UserCreateWithoutGymAccessHistoryInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGymAccessHistoryInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymPassHistory?: GymPassHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGymAccessHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGymAccessHistoryInput, UserUncheckedCreateWithoutGymAccessHistoryInput>
  }

  export type GymUpsertWithoutGymAccessHistoryInput = {
    update: XOR<GymUpdateWithoutGymAccessHistoryInput, GymUncheckedUpdateWithoutGymAccessHistoryInput>
    create: XOR<GymCreateWithoutGymAccessHistoryInput, GymUncheckedCreateWithoutGymAccessHistoryInput>
    where?: GymWhereInput
  }

  export type GymUpdateToOneWithWhereWithoutGymAccessHistoryInput = {
    where?: GymWhereInput
    data: XOR<GymUpdateWithoutGymAccessHistoryInput, GymUncheckedUpdateWithoutGymAccessHistoryInput>
  }

  export type GymUpdateWithoutGymAccessHistoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneRequiredWithoutGymNestedInput
    GymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutGymAccessHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUncheckedUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutGymNestedInput
  }

  export type UserUpsertWithoutGymAccessHistoryInput = {
    update: XOR<UserUpdateWithoutGymAccessHistoryInput, UserUncheckedUpdateWithoutGymAccessHistoryInput>
    create: XOR<UserCreateWithoutGymAccessHistoryInput, UserUncheckedCreateWithoutGymAccessHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGymAccessHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGymAccessHistoryInput, UserUncheckedUpdateWithoutGymAccessHistoryInput>
  }

  export type UserUpdateWithoutGymAccessHistoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGymAccessHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GymCreateWithoutGymPassHistoryInput = {
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    User: UserCreateNestedOneWithoutGymInput
    GymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipCreateNestedManyWithoutGymInput
  }

  export type GymUncheckedCreateWithoutGymPassHistoryInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
    userId: number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutGymInput
    FavoriteUsers?: FavoriteGymUncheckedCreateNestedManyWithoutGymInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutGymInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutGymInput
  }

  export type GymCreateOrConnectWithoutGymPassHistoryInput = {
    where: GymWhereUniqueInput
    create: XOR<GymCreateWithoutGymPassHistoryInput, GymUncheckedCreateWithoutGymPassHistoryInput>
  }

  export type UserCreateWithoutGymPassHistoryInput = {
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyCreateNestedManyWithoutUserInput
    Notice?: NoticeCreateNestedManyWithoutUserInput
    Gym?: GymCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGymPassHistoryInput = {
    id?: number
    createdAt?: Date | string
    loginId: string
    loginPw?: string | null
    username: string
    loginType: $Enums.LoginType
    userType: $Enums.UserType
    nickname: string
    phone?: string
    isDisable?: boolean
    Board?: BoardUncheckedCreateNestedManyWithoutUserInput
    BoardReply?: BoardReplyUncheckedCreateNestedManyWithoutUserInput
    Notice?: NoticeUncheckedCreateNestedManyWithoutUserInput
    Gym?: GymUncheckedCreateNestedManyWithoutUserInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedCreateNestedManyWithoutAssignUserInput
    GymMembership?: GymMembershipUncheckedCreateNestedManyWithoutUserInput
    assignedGymMemberships?: GymMembershipUncheckedCreateNestedManyWithoutAssignUserInput
    FavoriteGyms?: FavoriteGymUncheckedCreateNestedManyWithoutUserInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedCreateNestedManyWithoutUserInput
    GymAccessHistory?: GymAccessHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGymPassHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGymPassHistoryInput, UserUncheckedCreateWithoutGymPassHistoryInput>
  }

  export type GymUpsertWithoutGymPassHistoryInput = {
    update: XOR<GymUpdateWithoutGymPassHistoryInput, GymUncheckedUpdateWithoutGymPassHistoryInput>
    create: XOR<GymCreateWithoutGymPassHistoryInput, GymUncheckedCreateWithoutGymPassHistoryInput>
    where?: GymWhereInput
  }

  export type GymUpdateToOneWithWhereWithoutGymPassHistoryInput = {
    where?: GymWhereInput
    data: XOR<GymUpdateWithoutGymPassHistoryInput, GymUncheckedUpdateWithoutGymPassHistoryInput>
  }

  export type GymUpdateWithoutGymPassHistoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneRequiredWithoutGymNestedInput
    GymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutGymPassHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    GymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUncheckedUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutGymNestedInput
  }

  export type UserUpsertWithoutGymPassHistoryInput = {
    update: XOR<UserUpdateWithoutGymPassHistoryInput, UserUncheckedUpdateWithoutGymPassHistoryInput>
    create: XOR<UserCreateWithoutGymPassHistoryInput, UserUncheckedCreateWithoutGymPassHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGymPassHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGymPassHistoryInput, UserUncheckedUpdateWithoutGymPassHistoryInput>
  }

  export type UserUpdateWithoutGymPassHistoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutUserNestedInput
    Notice?: NoticeUpdateManyWithoutUserNestedInput
    Gym?: GymUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGymPassHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginId?: StringFieldUpdateOperationsInput | string
    loginPw?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    loginType?: EnumLoginTypeFieldUpdateOperationsInput | $Enums.LoginType
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    nickname?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    Board?: BoardUncheckedUpdateManyWithoutUserNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutUserNestedInput
    Notice?: NoticeUncheckedUpdateManyWithoutUserNestedInput
    Gym?: GymUncheckedUpdateManyWithoutUserNestedInput
    assignedGymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutUserNestedInput
    assignedGymMemberships?: GymMembershipUncheckedUpdateManyWithoutAssignUserNestedInput
    FavoriteGyms?: FavoriteGymUncheckedUpdateManyWithoutUserNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BoardCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
    startDay?: Date | string
    endDay?: Date | string
    isDisable?: boolean
    boardType?: $Enums.BoardType
  }

  export type BoardReplyCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    boardId: number
    boardReplyId?: number | null
    boardType?: $Enums.BoardType
  }

  export type NoticeCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    link?: string | null
  }

  export type GymCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    ceoName: string
    companyName: string
    businessNumber: string
    postcode: string
    mainAddress: string
    subAddress: string
    phone: string
    cellPhone: string
    fax: string
    email: string
    isCertified?: boolean
  }

  export type GymEuquipmentsOnGymsCreateManyAssignUserInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    gymEquipmentId: number
  }

  export type GymMembershipCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    assignBy: number
    startDay?: Date | string
    endDay: Date | string
    gymMembershipCancellationId?: number | null
  }

  export type GymMembershipCreateManyAssignUserInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    gymId: number
    startDay?: Date | string
    endDay: Date | string
    gymMembershipCancellationId?: number | null
  }

  export type FavoriteGymCreateManyUserInput = {
    gymId: number
    assignedAt?: Date | string
  }

  export type GymEquipmentUserHistoryCreateManyUserInput = {
    id?: number
    gymEuquipmentsOnGymsId: number
    usedAt?: Date | string
    endAt?: Date | string | null
  }

  export type GymAccessHistoryCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    entryAt?: Date | string
    exitAt?: Date | string | null
  }

  export type GymPassHistoryCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    hash: string
  }

  export type BoardUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardImage?: BoardImageUpdateManyWithoutBoardNestedInput
    BoardReply?: BoardReplyUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardImage?: BoardImageUncheckedUpdateManyWithoutBoardNestedInput
    BoardReply?: BoardReplyUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type BoardReplyUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    Board?: BoardUpdateOneRequiredWithoutBoardReplyNestedInput
    BoardReply?: BoardReplyUpdateOneWithoutBoardNestedReplyNestedInput
    BoardNestedReply?: BoardReplyUpdateManyWithoutBoardReplyNestedInput
  }

  export type BoardReplyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardId?: IntFieldUpdateOperationsInput | number
    boardReplyId?: NullableIntFieldUpdateOperationsInput | number | null
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardNestedReply?: BoardReplyUncheckedUpdateManyWithoutBoardReplyNestedInput
  }

  export type BoardReplyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardId?: IntFieldUpdateOperationsInput | number
    boardReplyId?: NullableIntFieldUpdateOperationsInput | number | null
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type NoticeUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoticeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoticeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GymUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    GymEquipments?: GymEuquipmentsOnGymsUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    GymEquipments?: GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymNestedInput
    FavoriteUsers?: FavoriteGymUncheckedUpdateManyWithoutGymNestedInput
    GymAccessHistory?: GymAccessHistoryUncheckedUpdateManyWithoutGymNestedInput
    GymMembership?: GymMembershipUncheckedUpdateManyWithoutGymNestedInput
    GymPassHistory?: GymPassHistoryUncheckedUpdateManyWithoutGymNestedInput
  }

  export type GymUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ceoName?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessNumber?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    mainAddress?: StringFieldUpdateOperationsInput | string
    subAddress?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cellPhone?: StringFieldUpdateOperationsInput | string
    fax?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GymEuquipmentsOnGymsUpdateWithoutAssignUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Gym?: GymUpdateOneRequiredWithoutGymEquipmentsNestedInput
    GymEquipment?: GymEquipmentUpdateOneRequiredWithoutGymsNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutGymEuquipmentsOnGymsNestedInput
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateWithoutAssignUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutGymEuquipmentsOnGymsNestedInput
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateManyWithoutAssignUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
  }

  export type GymMembershipUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    Gym?: GymUpdateOneRequiredWithoutGymMembershipNestedInput
    assignUser?: UserUpdateOneRequiredWithoutAssignedGymMembershipsNestedInput
    GymMembershipCancellation?: GymMembershipCancellationUpdateOneWithoutGymMembershipNestedInput
  }

  export type GymMembershipUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    gymMembershipCancellationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GymMembershipUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    gymMembershipCancellationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GymMembershipUpdateWithoutAssignUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutGymMembershipNestedInput
    Gym?: GymUpdateOneRequiredWithoutGymMembershipNestedInput
    GymMembershipCancellation?: GymMembershipCancellationUpdateOneWithoutGymMembershipNestedInput
  }

  export type GymMembershipUncheckedUpdateWithoutAssignUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    gymMembershipCancellationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GymMembershipUncheckedUpdateManyWithoutAssignUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    gymMembershipCancellationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FavoriteGymUpdateWithoutUserInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Gym?: GymUpdateOneRequiredWithoutFavoriteUsersNestedInput
  }

  export type FavoriteGymUncheckedUpdateWithoutUserInput = {
    gymId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteGymUncheckedUpdateManyWithoutUserInput = {
    gymId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymEquipmentUserHistoryUpdateWithoutUserInput = {
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    GymEuquipmentsOnGyms?: GymEuquipmentsOnGymsUpdateOneRequiredWithoutGymEquipmentUserHistoryNestedInput
  }

  export type GymEquipmentUserHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    gymEuquipmentsOnGymsId?: IntFieldUpdateOperationsInput | number
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymEquipmentUserHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    gymEuquipmentsOnGymsId?: IntFieldUpdateOperationsInput | number
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymAccessHistoryUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gym?: GymUpdateOneRequiredWithoutGymAccessHistoryNestedInput
  }

  export type GymAccessHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymAccessHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymPassHistoryUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    Gym?: GymUpdateOneRequiredWithoutGymPassHistoryNestedInput
  }

  export type GymPassHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type GymPassHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type BoardImageCreateManyBoardInput = {
    id?: number
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
  }

  export type BoardReplyCreateManyBoardInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    userId: number
    boardReplyId?: number | null
    boardType?: $Enums.BoardType
  }

  export type BoardImageUpdateWithoutBoardInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BoardImageUncheckedUpdateWithoutBoardInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BoardImageUncheckedUpdateManyWithoutBoardInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BoardReplyUpdateWithoutBoardInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    User?: UserUpdateOneRequiredWithoutBoardReplyNestedInput
    BoardReply?: BoardReplyUpdateOneWithoutBoardNestedReplyNestedInput
    BoardNestedReply?: BoardReplyUpdateManyWithoutBoardReplyNestedInput
  }

  export type BoardReplyUncheckedUpdateWithoutBoardInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardReplyId?: NullableIntFieldUpdateOperationsInput | number | null
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardNestedReply?: BoardReplyUncheckedUpdateManyWithoutBoardReplyNestedInput
  }

  export type BoardReplyUncheckedUpdateManyWithoutBoardInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardReplyId?: NullableIntFieldUpdateOperationsInput | number | null
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type BoardReplyCreateManyBoardReplyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    content: string
    isDisable?: boolean
    userId: number
    boardId: number
    boardType?: $Enums.BoardType
  }

  export type BoardReplyUpdateWithoutBoardReplyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    User?: UserUpdateOneRequiredWithoutBoardReplyNestedInput
    Board?: BoardUpdateOneRequiredWithoutBoardReplyNestedInput
    BoardNestedReply?: BoardReplyUpdateManyWithoutBoardReplyNestedInput
  }

  export type BoardReplyUncheckedUpdateWithoutBoardReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardId?: IntFieldUpdateOperationsInput | number
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
    BoardNestedReply?: BoardReplyUncheckedUpdateManyWithoutBoardReplyNestedInput
  }

  export type BoardReplyUncheckedUpdateManyWithoutBoardReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    content?: StringFieldUpdateOperationsInput | string
    isDisable?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    boardId?: IntFieldUpdateOperationsInput | number
    boardType?: EnumBoardTypeFieldUpdateOperationsInput | $Enums.BoardType
  }

  export type BodyPartsOnGymEquipmentsCreateManyBodyPartInput = {
    gymEquipmentId: number
    assignedAt?: Date | string
  }

  export type BodyPartsOnGymEquipmentsUpdateWithoutBodyPartInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GymEquipment?: GymEquipmentUpdateOneRequiredWithoutBodyPartsNestedInput
  }

  export type BodyPartsOnGymEquipmentsUncheckedUpdateWithoutBodyPartInput = {
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutBodyPartInput = {
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BodyPartsOnGymEquipmentsCreateManyGymEquipmentInput = {
    bodyPartId: number
    assignedAt?: Date | string
  }

  export type GymEuquipmentsOnGymsCreateManyGymEquipmentInput = {
    id?: number
    createdAt?: Date | string
    gymId: number
    assignBy: number
  }

  export type GymEquipmentImageCreateManyGymEquipmentInput = {
    id?: number
    createdAt?: Date | string
    url: string
    width: number
    height: number
    size: number
    isThumb?: boolean
  }

  export type BodyPartsOnGymEquipmentsUpdateWithoutGymEquipmentInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BodyPart?: BodyPartUpdateOneRequiredWithoutGymEquipmentsNestedInput
  }

  export type BodyPartsOnGymEquipmentsUncheckedUpdateWithoutGymEquipmentInput = {
    bodyPartId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BodyPartsOnGymEquipmentsUncheckedUpdateManyWithoutGymEquipmentInput = {
    bodyPartId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymEuquipmentsOnGymsUpdateWithoutGymEquipmentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Gym?: GymUpdateOneRequiredWithoutGymEquipmentsNestedInput
    assignUser?: UserUpdateOneRequiredWithoutAssignedGymEquipmentsNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutGymEuquipmentsOnGymsNestedInput
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateWithoutGymEquipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutGymEuquipmentsOnGymsNestedInput
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymEquipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
  }

  export type GymEquipmentImageUpdateWithoutGymEquipmentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GymEquipmentImageUncheckedUpdateWithoutGymEquipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GymEquipmentImageUncheckedUpdateManyWithoutGymEquipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
    isThumb?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GymEuquipmentsOnGymsCreateManyGymInput = {
    id?: number
    createdAt?: Date | string
    gymEquipmentId: number
    assignBy: number
  }

  export type FavoriteGymCreateManyGymInput = {
    userId: number
    assignedAt?: Date | string
  }

  export type GymAccessHistoryCreateManyGymInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    entryAt?: Date | string
    exitAt?: Date | string | null
  }

  export type GymMembershipCreateManyGymInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    assignBy: number
    startDay?: Date | string
    endDay: Date | string
    gymMembershipCancellationId?: number | null
  }

  export type GymPassHistoryCreateManyGymInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    hash: string
  }

  export type GymEuquipmentsOnGymsUpdateWithoutGymInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GymEquipment?: GymEquipmentUpdateOneRequiredWithoutGymsNestedInput
    assignUser?: UserUpdateOneRequiredWithoutAssignedGymEquipmentsNestedInput
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUpdateManyWithoutGymEuquipmentsOnGymsNestedInput
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    GymEquipmentUserHistory?: GymEquipmentUserHistoryUncheckedUpdateManyWithoutGymEuquipmentsOnGymsNestedInput
  }

  export type GymEuquipmentsOnGymsUncheckedUpdateManyWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gymEquipmentId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteGymUpdateWithoutGymInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutFavoriteGymsNestedInput
  }

  export type FavoriteGymUncheckedUpdateWithoutGymInput = {
    userId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteGymUncheckedUpdateManyWithoutGymInput = {
    userId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymAccessHistoryUpdateWithoutGymInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutGymAccessHistoryNestedInput
  }

  export type GymAccessHistoryUncheckedUpdateWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymAccessHistoryUncheckedUpdateManyWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    entryAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exitAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymMembershipUpdateWithoutGymInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutGymMembershipNestedInput
    assignUser?: UserUpdateOneRequiredWithoutAssignedGymMembershipsNestedInput
    GymMembershipCancellation?: GymMembershipCancellationUpdateOneWithoutGymMembershipNestedInput
  }

  export type GymMembershipUncheckedUpdateWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    gymMembershipCancellationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GymMembershipUncheckedUpdateManyWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    gymMembershipCancellationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GymPassHistoryUpdateWithoutGymInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hash?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutGymPassHistoryNestedInput
  }

  export type GymPassHistoryUncheckedUpdateWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type GymPassHistoryUncheckedUpdateManyWithoutGymInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type GymEquipmentUserHistoryCreateManyGymEuquipmentsOnGymsInput = {
    id?: number
    userId: number
    usedAt?: Date | string
    endAt?: Date | string | null
  }

  export type GymEquipmentUserHistoryUpdateWithoutGymEuquipmentsOnGymsInput = {
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutGymEquipmentUserHistoryNestedInput
  }

  export type GymEquipmentUserHistoryUncheckedUpdateWithoutGymEuquipmentsOnGymsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymEquipmentUserHistoryUncheckedUpdateManyWithoutGymEuquipmentsOnGymsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GymMembershipCreateManyGymMembershipCancellationInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    gymId: number
    assignBy: number
    startDay?: Date | string
    endDay: Date | string
  }

  export type GymMembershipUpdateWithoutGymMembershipCancellationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutGymMembershipNestedInput
    Gym?: GymUpdateOneRequiredWithoutGymMembershipNestedInput
    assignUser?: UserUpdateOneRequiredWithoutAssignedGymMembershipsNestedInput
  }

  export type GymMembershipUncheckedUpdateWithoutGymMembershipCancellationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GymMembershipUncheckedUpdateManyWithoutGymMembershipCancellationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gymId?: IntFieldUpdateOperationsInput | number
    assignBy?: IntFieldUpdateOperationsInput | number
    startDay?: DateTimeFieldUpdateOperationsInput | Date | string
    endDay?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardCountOutputTypeDefaultArgs instead
     */
    export type BoardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardReplyCountOutputTypeDefaultArgs instead
     */
    export type BoardReplyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardReplyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BodyPartCountOutputTypeDefaultArgs instead
     */
    export type BodyPartCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BodyPartCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymEquipmentCountOutputTypeDefaultArgs instead
     */
    export type GymEquipmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymEquipmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymCountOutputTypeDefaultArgs instead
     */
    export type GymCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymEuquipmentsOnGymsCountOutputTypeDefaultArgs instead
     */
    export type GymEuquipmentsOnGymsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymEuquipmentsOnGymsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymMembershipCancellationCountOutputTypeDefaultArgs instead
     */
    export type GymMembershipCancellationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymMembershipCancellationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoticeDefaultArgs instead
     */
    export type NoticeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoticeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardDefaultArgs instead
     */
    export type BoardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardImageDefaultArgs instead
     */
    export type BoardImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardReplyDefaultArgs instead
     */
    export type BoardReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardReplyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BodyPartDefaultArgs instead
     */
    export type BodyPartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BodyPartDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymEquipmentDefaultArgs instead
     */
    export type GymEquipmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymEquipmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymEquipmentImageDefaultArgs instead
     */
    export type GymEquipmentImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymEquipmentImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BodyPartsOnGymEquipmentsDefaultArgs instead
     */
    export type BodyPartsOnGymEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BodyPartsOnGymEquipmentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymDefaultArgs instead
     */
    export type GymArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymEuquipmentsOnGymsDefaultArgs instead
     */
    export type GymEuquipmentsOnGymsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymEuquipmentsOnGymsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymEquipmentUserHistoryDefaultArgs instead
     */
    export type GymEquipmentUserHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymEquipmentUserHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymMembershipDefaultArgs instead
     */
    export type GymMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymMembershipDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymMembershipCancellationDefaultArgs instead
     */
    export type GymMembershipCancellationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymMembershipCancellationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteGymDefaultArgs instead
     */
    export type FavoriteGymArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteGymDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymAccessHistoryDefaultArgs instead
     */
    export type GymAccessHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymAccessHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GymPassHistoryDefaultArgs instead
     */
    export type GymPassHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GymPassHistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}