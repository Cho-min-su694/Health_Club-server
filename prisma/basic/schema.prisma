// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "./basic"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 로그인 타입
enum LoginType {
  LOCAL
  ADMIN
}

// 유저 등급 타입
enum UserType {
  GENERAL
  BUSINESS
  ADMIN
  MANAGER
}

// 유저
model User {
  id                        Int      @id @default(autoincrement())
  createdAt                 DateTime @default(now())

  loginId                   String // 로그인 ID (SNS 토큰)
  loginPw                   String?   @db.Text // 로그인 PW 
  username                  String
  loginType                 LoginType
  userType                  UserType
  nickname                  String
  phone                     String    @default("")
  isDisable                 Boolean   @default(false)

  Board                     Board[]
  BoardReply                BoardReply[]
  Notice                    Notice[]
  Gym                       Gym[]
  assignedGymEquipments     GymEuquipmentsOnGyms[]      @relation("GymEquipmentAssginUser")
  GymMembership             GymMembership[]
  assignedGymMemberships    GymMembership[]             @relation("GymMembershipAssignUser")
  FavoriteGyms              FavoriteGym[]
  GymEquipmentUserHistory   GymEquipmentUserHistory[]
  GymAccessHistory          GymAccessHistory[]
  GymPassHistory            GymPassHistory[]

  @@unique([loginType, loginId], name: "loginUnique")
}

model Notice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  title   String
  content String? @db.Text
  link    String?

  userId  Int
  User    User  @relation(fields: [userId], references: [id])
}

// 게시물 상태
enum BoardType {
  BTALK //잡담
  BINFORM //정보
  BQUESTION //질문
}

// 게시물
model Board {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  title    String
  content  String?  @db.Text
  link     String?
  startDay DateTime @default(now())
  endDay   DateTime @default(now())

  isDisable  Boolean      @default(false) // 노출 여부 false 노출 true 비노출
  BoardImage BoardImage[]
  BoardReply BoardReply[]

  userId  Int
  User    User  @relation(fields: [userId], references: [id])

  boardType  BoardType    @default(BTALK) //처음에는 보드타입(잡담)
}

// 게시물 이미지
model BoardImage {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())

  url    String       @db.Text
  width  Int
  height Int
  size   Int

  isThumb Boolean     @default(false) // 썸네일이미지 여부 true 썸네일 false 상세

  boardId Int         @unique
  Board   Board       @relation(fields: [boardId], references: [id])
}

// 게시물 댓글
model BoardReply {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  content   String
  isDisable Boolean @default(false)

  userId  Int
  User    User  @relation(fields: [userId], references: [id])
  boardId Int
  Board   Board @relation(fields: [boardId], references: [id])
  boardReplyId Int?
  BoardReply BoardReply? @relation("BoardNestedReply",fields: [boardReplyId], references: [id])
  BoardNestedReply BoardReply[] @relation("BoardNestedReply")

  boardType  BoardType    @default(BTALK) //처음에는 보드타입(잡담)
}

// 운동 부위
model BodyPart {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())

  name            String
  code            String    @unique

  GymEquipments   BodyPartsOnGymEquipments[]
}

// 기기등록
model GymEquipment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())

  name      String
  code      String    @unique

  isDisable       Boolean @default(false)

  BodyParts BodyPartsOnGymEquipments[]
  Gyms      GymEuquipmentsOnGyms[]
  GymEquipmentImage   GymEquipmentImage[]
}

// 운동기기 이미지
model GymEquipmentImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  url    String @db.Text
  width  Int
  height Int
  size   Int

  isThumb Boolean @default(false) // 썸네일이미지 여부 true 썸네일 false 상세

  gymEquipmentId  Int
  GymEquipment    GymEquipment @relation(fields: [gymEquipmentId], references: [id])
}

// 기기 운동부위 관계
model BodyPartsOnGymEquipments {
  GymEquipment        GymEquipment  @relation(fields: [gymEquipmentId], references: [id])
  gymEquipmentId      Int 
  BodyPart            BodyPart      @relation(fields: [bodyPartId], references: [id])
  bodyPartId          Int 
  assignedAt          DateTime      @default(now())

  @@id([gymEquipmentId, bodyPartId])
}

// 헬스장 정보
model Gym {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  ceoName         String
  companyName     String
  businessNumber  String
  postcode        String
  mainAddress     String
  subAddress      String
  phone           String
  cellPhone       String
  fax             String
  email           String
  isCertified     Boolean @default(false)

  isDisable       Boolean @default(false)

  userId          Int
  User            User    @relation(fields: [userId], references: [id])

  GymImage                GymImage[]

  GymEquipments           GymEuquipmentsOnGyms[]
  FavoriteUsers           FavoriteGym[]
  GymAccessHistory        GymAccessHistory[]

  GymMembership           GymMembership[]

  GymPassHistory          GymPassHistory[]
}

// 헬스장 이미지
model GymImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  url    String @db.Text
  width  Int
  height Int
  size   Int

  isThumb Boolean @default(false) // 썸네일이미지 여부 true 썸네일 false 상세

  gymId   Int     @unique
  Gym     Gym     @relation(fields: [gymId], references: [id])
}

// 헬스장 내 기구 목록
model GymEuquipmentsOnGyms {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  Gym                 Gym           @relation(fields: [gymId], references: [id])
  gymId               Int 
  GymEquipment        GymEquipment  @relation(fields: [gymEquipmentId], references: [id])
  gymEquipmentId      Int 

  assignBy            Int
  assignUser          User          @relation("GymEquipmentAssginUser", fields: [assignBy], references: [id])

  GymEquipmentUserHistory           GymEquipmentUserHistory[]
}

// 기구 사용 기록
model GymEquipmentUserHistory {
  id            Int       @id @default(autoincrement())

  GymEuquipmentsOnGyms    GymEuquipmentsOnGyms  @relation(fields: [gymEuquipmentsOnGymsId], references: [id])
  gymEuquipmentsOnGymsId  Int

  userId        Int
  User          User      @relation(fields: [userId], references: [id])

  usedAt        DateTime  @default(now())
  endAt         DateTime?
}

// 헬스장 회원권
model GymMembership {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())

  userId        Int
  User          User      @relation(fields: [userId], references: [id])

  Gym           Gym       @relation(fields: [gymId], references: [id])
  gymId         Int 

  assignBy      Int
  assignUser    User      @relation("GymMembershipAssignUser", fields: [assignBy], references: [id])

  startDay      DateTime  @default(now())
  endDay        DateTime

  gymMembershipCancellationId   Int?
  GymMembershipCancellation     GymMembershipCancellation?  @relation(fields: [gymMembershipCancellationId], references: [id])
}

// 헬스장 회원권 해지
model GymMembershipCancellation {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())

  reason        String?         @db.Text

  GymMembership GymMembership[]
}

// 즐겨찾기한 헬스장
model FavoriteGym {
  Gym                 Gym       @relation(fields: [gymId], references: [id])
  gymId               Int 
  userId              Int
  User                User      @relation(fields: [userId], references: [id])
  assignedAt          DateTime  @default(now())

  @@id([gymId, userId])
}

// 헬스장 출입 기록
model GymAccessHistory {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())

  Gym           Gym       @relation(fields: [gymId], references: [id])
  gymId         Int

  userId        Int
  User          User      @relation(fields: [userId], references: [id])

  entryAt       DateTime  @default(now())
  exitAt        DateTime?
}

// 헬스장 출입증 기록
model GymPassHistory {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())

  Gym           Gym       @relation(fields: [gymId], references: [id])
  gymId         Int

  userId        Int
  User          User      @relation(fields: [userId], references: [id])

  hash          String
}